{"version":3,"sources":["webpack://oneplayer/webpack/universalModuleDefinition","webpack://oneplayer/webpack/bootstrap","webpack://oneplayer/./src/Types.ts","webpack://oneplayer/./src/Errors.ts","webpack://oneplayer/./src/OnePlayer.ts","webpack://oneplayer/external \"dashjs\"","webpack://oneplayer/./src/DefaultPlayer.ts","webpack://oneplayer/./node_modules/base64-js/base64js.min.js","webpack://oneplayer/./src/hlsfp/FairPlayController.ts","webpack://oneplayer/./src/hlsfp/HlsFpPlayer.ts","webpack://oneplayer/./src/dashjs/TTMLController.ts","webpack://oneplayer/./src/tools/DebugComponent.css","webpack://oneplayer/./src/tools/DebugComponent.html","webpack://oneplayer/./src/tools/DebugPanel.ts","webpack://oneplayer/./src/tools/DebugController.ts","webpack://oneplayer/./src/tools/PlaybackSpeedController.ts","webpack://oneplayer/external \"adsplayer.js\"","webpack://oneplayer/./src/plugins/AdsPlugin.ts","webpack://oneplayer/external \"metricsagent.js\"","webpack://oneplayer/./src/plugins/MetricsPlugin.ts","webpack://oneplayer/./src/dashjs/DashJSPlayer.ts","webpack://oneplayer/./index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__14__","__WEBPACK_EXTERNAL_MODULE__16__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PlayerType","HasProtocol","ServiceType","PluginType","ChallengeFormatType","MediaType","AudioKind","TextKind","PlayerEvents","PlayerErrorCode","PlayerErrorMessage","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED","CAPABILITY_ERR_MEDIASOURCE","CAPABILITY_ERR_CODEC_UNSUPPORTED","DOWNLOAD_ERR_MANIFEST","DOWNLOAD_ERR_CONTENT","CAPABILITY_ERR_MEDIAKEYS","MEDIA_KEYERR_UNKNOWN","MEDIA_KEYERR_CLIENT","MEDIA_KEYERR_SERVICE","MEDIA_KEYERR_OUTPUT","MEDIA_KEYERR_HARDWARECHANGE","MEDIA_KEYERR_DOMAIN","MEDIAKEYS_ERR_KEYSYSTEM_ACCESS","MEDIAKEYS_ERR_SERVER_CERTIFICATE","MEDIAKEYS_ERR_CREATE_SESSION","MEDIAKEYS_ERR_UNKNOWN_LICENSER","MEDIAKEYS_ERR_LICENSE_REQUEST","MEDIAKEYS_ERR_KEY_ERROR","MEDIAKEYS_ERR_EXPIRED","MEDIAKEYS_ERR_OUTPUT_RESTRICTED","MEDIAKEYS_ERR_INTERNAL_ERROR","PLAYER_INTERNAL_ERROR","Types_1","DashJSPlayer_1","HlsFpPlayer_1","OnePlayer","getVersion","playerType","video","ttmlRenderingDiv","Promise","resolve","reject","player","DASHJS","DashJSPlayer","HLSFP","HlsFpPlayer","init","then","catch","e","addPlugin","type","config","Error","Errors_1","MetricsPlugin_1","AdsPlugin_1","PlaybackSpeedController_1","DebugController_1","DefaultPlayer","this","plugins","videoElement","HTMLMediaElement","stream","storeMediaSettings","mediaSettingsKey","playbackSpeedController","PlaybackSpeedController","debugController","DebugController","logsEnabled","enableLogs","enable","length","enableLastMediaSettingsCaching","applyMediaSettings","removeMediaSettings","reset","stop","load","loadPlugins","_this","_loadStream","loadStream","console","log","pluginLoadPromises","push","all","values","indexOf","setPlaybackSpeed","speed","setSpeed","getPlaybackSpeed","getSpeed","stopPlugins","getTracks","tracks","Video","getTracksForType","Audio","Text","plugin","METRICS","MetricsPlugin","ADINSERTION","AdsPlugin","showDebug","show","debugRenderingDiv","showDebugPanel","start","sendErrorEvent","code","extMessage","data","event","document","createEvent","error","message","initCustomEvent","PLAYER_ERROR","dispatchEvent","storeDefaultLanguage","lang","settings","getMediaSettings","localStorage","setItem","JSON","stringify","storeTextState","storedSettings","getItem","parse","undefined","setDefaultAudioLanguage","setDefaultTextLanguage","setDefaultTextEnabled","removeItem","f","u","a","v","/","byteLength","toByteArray","h","charCodeAt","fromByteArray","join","Uint8Array","Array","base64","FairPlayController","protectionData","keySystemConfiguration","mediaKeySession","licenseRequest","needKeyListener","onNeedKey","keyMessageListener","onKeyMessage","keyAddedListener","onKeyAdded","keyErrorListener","onKeyError","addEventListener","abort","removeEventListener","debug","stringToArray","str","buffer","ArrayBuffer","array","Uint16Array","getChallengeFormatType","challengeFormat","OCTET_STREAM","extractContentId","initData","parts","String","fromCharCode","apply","split","getCertificate","serverCertificate","concatInitDataIdAndCertificate","id","cert","idArray","offset","dataView","DataView","initDataArray","set","setUint32","id16Array","processLicenseMessage","encodeURIComponent","contentId","sendLicenseRequest","url","challenge","withCredentials","challengeFormatType","XMLHttpRequest","success","responseType","onload","status","readyState","onloadend","open","setRequestHeader","send","processLicenseResponse","request","TEXT","responseText","trim","substr","slice","response","update","getKeyError","target","systemCode","certificate","mediaKeys","createSession","serverUrl","serverURL","DefaultPlayer_1","FairPlayController_1","_super","__extends","getPlayerType","defaultAudioLanguage","defaultTextLanguage","defaultTextEnabled","selectedTextTrackId","loadedmetadataListener","onLoadedmetadata","stateChangedListener","onStateChanged","seekedListener","onSeeked","errorListener","onError","setConfig","params","fpcontroller","listener","scope","play","pause","seek","time","currentTime","isLive","removeAttribute","getDuration","duration","Number","POSITIVE_INFINITY","getTime","getVideoTracks","getAudioTracks","getTextTracks","getSelectedTrackForType","getSelectedAudioTrack","getSelectedTextTrack","getQualityForType","getBufferLevelForType","selectTrackForType","selectAudioTrack","selectTextTrack","selectTrack","track","mediaType","enableText","textTracks","isTextEnabled","canplayListener","protData","src","startTime","limitToLowestBitrate","state","tracksInfo","trackInfo","selected","codec","mimeType","qualities","audioTracks","audioTrackToMediaInfo","textTrackToMediaInfo","selectedLang","language","enabled","label","audioTrack","kind","textTrack","dashjs","TTMLController","mediaPlayer","on","MediaPlayer","events","TTML_TO_PARSE","onTTMLPreProcess","ttmlSubtitles","replace","OnePlayer_1","html","css","Chartist","DebugPanel","version","protocol","streamType","playbackState","playbackTime","jitter","videoBuffer","audioBuffer","bufferTarget","videoBitrate","connectionSpeed","playbackQuality","containerDiv","debugDiv","pollInterval","videoBufferSizes","audioBufferSizes","videoQualities","connectionSpeeds","pauseListener","onPause","qualityRenderedListener","onQualityRendered","registerEvents","unregisterEvents","LIVE","render","stopMetricsPolling","parentElement","createDebugPanel","removeChild","liveStartTime","liveStartPlaybackTime","startMetricsPolling","Date","newQuality","updateMetrics","setInterval","clearInterval","updateDashMetrics","videoMetrics","getMetricsFor","BufferState","Math","max","updateBufferLevel","videoBufferChart","updateConnectionSpeed","audioMetrics","audioBufferChart","updateVideoBitrate","metrics","bufferSizes","chart","level","BufferLevel","appendChartValue","options","high","videoTrack","videoBitrateChart","qualityIndex","quality","bitrate","HttpList","responsecode","responseTime","tresponse","downloadTimeInSeconds","_tfinish","downloadBytes","trace","reduce","b","round","connectionSpeedChart","shift","querySelector","innerHTML","toFixed","formatDuration","getPlaybackQualityInfos","formatBitrate","series","style","visibility","floor","bitrateInKbps","qualityInfos","width","height","loadChartist","node","createElement","ShowDebug","getElementsByTagName","appendChild","addStyles","optionsBufferChart","low","fullWidth","showPoint","showLine","showArea","chartPadding","bottom","left","right","top","axisX","showGrid","showLabel","axisY","lineSmooth","Interpolation","none","Line","step","simple","head","getHeadSection","elements","body","DebugPanel_1","verbose","onKeyPressedListener","onKeyPressed","debugPanel","altKey","ctrlKey","shiftKey","keyCode","playerVersion","trickModeSpeed","volume","playPromise","onSeekedListener","stopTrickMode","isNaN","applySpeed","playbackRate","abs","startTrickMode","paused","onPlay","clearTimeout","seekTimeout","seekTime","seekPos","min","elapsedTime","setTimeout","adsplayer_js_1","getType","checkInitialized","adsPlayer","handleMainPlayerPlayback","adsRenderingDiv","AdsPlayer","EventTypes","ERROR","START","onStart","END","onEnd","ADD_ELEMENT","onAddElement","REMOVE_ELEMENT","onRemoveElement","PLAY","PAUSE","CLICK","onClick","destroy","res","display","sendEvent","AD_ERROR","AD_START","AD_END","eventType","MetricsAgent","DEFAULT_SETTINGS","activationUrl","dbServerUrl","collector","formatter","sendingTime","metricsAgent","TTMLController_1","dashjs_1","MSS","liveDelay","stableBufferTime","bufferTimeAtTopQuality","bufferTimeAtTopQualityLongForm","lowLatencyEnabled","keepProtectionMediaKeys","MEDIAINFO_TYPE_TO_MEDIATYPE","audio","text","fragmentedText","embeddedText","defaultSettings","audioSettings","default","PLAYBACK_PLAYING","onPlaybackPlaying","PLAYBACK_SEEKING","onPlaybackSeeking","PLAYBACK_WAITING","onPlaybackWaiting","ttmlController","getDefaultSettings","initialize","attachTTMLRenderingDiv","parentNode","enableLastBitrateCaching","setLowLatencyEnabled","applySettings","getDebug","setLogToBrowserConsole","off","isDynamic","attachSource","isReady","selectedTrack","getCurrentTrackFor","getTracksFor","mediaInfoToTrackInfo","trackInfos","getQualityFor","getBufferLength","filter","mediaInfo","idx","parseInt","setCurrentTrack","setTextDefaultLanguage","setTextDefaultEnabled","setProtectionData","downloadError","STREAM_INITIALIZED","onStreamInitialized","setInitialMediaSettingsFor","videoInfo","audioInfo","setMaxAllowedBitrateFor","NaN","getLiveDelay","getStableBufferTime","getBufferTimeAtTopQuality","getBufferTimeAtTopQualityLongForm","getLowLatencyEnabled","setLiveDelay","setStableBufferTime","setBufferTimeAtTopQuality","setBufferTimeAtTopQualityLongForm","minVideoBitrate","setMinAllowedBitrateFor","index","toString","bitrateList","map","item","bandwidth","roles","Main","Translation","accessibility","Clean","Alternative","Commentary","Descriptions","Captions","Subtitles","getResponseText","dashType","processDownloadError","segmentTime","segmentDuration","errors","CAPABILITY_MEDIASOURCE_ERROR_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","DOWNLOAD_ERROR_ID_CONTENT_CODE","CAPABILITY_MEDIAKEYS_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_DOMAIN_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","messageS","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEYERR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,UAAAA,QAAA,gBAAAA,QAAA,oBACA,mBAAAC,eAAAC,IACAD,OAAA,wDAAAJ,GACA,iBAAAC,QACAA,QAAA,UAAAD,EAAAG,QAAA,UAAAA,QAAA,gBAAAA,QAAA,oBAEAJ,EAAA,UAAAC,EAAAD,EAAA,OAAAA,EAAA,gBAAAA,EAAA,oBARA,CASCO,OAAA,SAAAC,EAAAC,EAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAX,QAGA,IAAAC,EAAAQ,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAb,YAUA,OANAc,EAAAH,GAAAI,KAAAd,EAAAD,QAAAC,IAAAD,QAAAU,GAGAT,EAAAY,GAAA,EAGAZ,EAAAD,QA0DA,OArDAU,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAlB,EAAAmB,EAAAC,GACAV,EAAAW,EAAArB,EAAAmB,IACAG,OAAAC,eAAAvB,EAAAmB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAA1B,GACA,oBAAA2B,eAAAC,aACAN,OAAAC,eAAAvB,EAAA2B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAvB,EAAA,cAAiD6B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAApC,GACA,IAAAmB,EAAAnB,KAAA+B,WACA,WAA2B,OAAA/B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAS,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFClFA,SAAYC,GAERA,EAAA,gBAGAA,EAAA,cALJ,CAAY5C,EAAA4C,aAAA5C,EAAA4C,gBAQZ,SAAYC,GAERA,EAAA,YAGAA,EAAA,UAGAA,EAAA,UARJ,CAAY7C,EAAA6C,cAAA7C,EAAA6C,iBAWZ,SAAYC,GAERA,EAAA,YAGAA,EAAA,oBALJ,CAAY9C,EAAA8C,cAAA9C,EAAA8C,iBAQZ,SAAYC,GAERA,EAAA,kBAGAA,EAAA,0BALJ,CAAY/C,EAAA+C,aAAA/C,EAAA+C,gBAQZ,SAAYC,GACRA,EAAA,4BACAA,EAAA,YAFJ,CAAYhD,EAAAgD,sBAAAhD,EAAAgD,yBAiEZ,SAAYC,GAERA,EAAA,cAGAA,EAAA,cAGAA,EAAA,YARJ,CAAYjD,EAAAiD,YAAAjD,EAAAiD,eAWZ,SAAYC,GAERA,EAAA,0BAGAA,EAAA,4BAGAA,EAAA,YAGAA,EAAA,qBAGAA,EAAA,0BAGAA,EAAA,wBAGAA,EAAA,cApBJ,CAAYlD,EAAAkD,YAAAlD,EAAAkD,eAwBZ,SAAYC,GAGRA,EAAA,oBAIAA,EAAA,sBAGAA,EAAA,4BAGAA,EAAA,oBAGAA,EAAA,oBAhBJ,CAAYnD,EAAAmD,WAAAnD,EAAAmD,cAwDZ,SAAYC,GASRA,EAAA,4BASAA,EAAA,oBAUAA,EAAA,oBAUAA,EAAA,gBAtCJ,CAAYpD,EAAAoD,eAAApD,EAAAoD,gDC/LZ,IAAYC,mDAAZ,SAAYA,GAKRA,IAAA,yCACAA,IAAA,yCAKAA,IAAA,uCAKAA,IAAA,6DAUAA,IAAA,6CAWAA,IAAA,4DAKAA,IAAA,wEAeAA,IAAA,kDASAA,IAAA,gDAWAA,IAAA,yDAMAA,IAAA,iDAMAA,IAAA,+CAMAA,IAAA,iDAMAA,IAAA,+CAMAA,IAAA,+DAMAA,IAAA,+CAMAA,IAAA,qEAKAA,IAAA,yEAKAA,IAAA,iEAKAA,IAAA,qEASAA,IAAA,mEAKAA,IAAA,uDAKAA,IAAA,mDAMAA,IAAA,uEAKAA,IAAA,iEAWAA,IAAA,6CAKAA,IAAA,yCAMAA,IAAA,mDA1LJ,CAAYA,EAAArD,EAAAqD,kBAAArD,EAAAqD,qBA8MCrD,EAAAsD,sBACbtD,EAAAsD,mBAAmBD,EAAgBE,mBAAqB,2BACxDvD,EAAAsD,mBAAmBD,EAAgBG,mBAAqB,gBACxDxD,EAAAsD,mBAAmBD,EAAgBI,kBAAoB,uBACvDzD,EAAAsD,mBAAmBD,EAAgBK,6BAA+B,6BAClE1D,EAAAsD,mBAAmBD,EAAgBM,qBAAuB,qBAE1D3D,EAAAsD,mBAAmBD,EAAgBO,4BAA8B,4CACjE5D,EAAAsD,mBAAmBD,EAAgBQ,kCAAoC,+BAEvE7D,EAAAsD,mBAAmBD,EAAgBS,uBAAyB,8BAC5D9D,EAAAsD,mBAAmBD,EAAgBU,sBAAwB,mCAE3D/D,EAAAsD,mBAAmBD,EAAgBW,0BAA4B,+DAC/DhE,EAAAsD,mBAAmBD,EAAgBY,sBAAwB,qCAC3DjE,EAAAsD,mBAAmBD,EAAgBa,qBAAuB,8CAC1DlE,EAAAsD,mBAAmBD,EAAgBc,sBAAwB,6BAC3DnE,EAAAsD,mBAAmBD,EAAgBe,qBAAuB,4BAC1DpE,EAAAsD,mBAAmBD,EAAgBgB,6BAA+B,oDAClErE,EAAAsD,mBAAmBD,EAAgBiB,qBAAuB,iCAC1DtE,EAAAsD,mBAAmBD,EAAgBkB,gCAAkC,iDACrEvE,EAAAsD,mBAAmBD,EAAgBmB,kCAAoC,2CACvExE,EAAAsD,mBAAmBD,EAAgBoB,8BAAgC,gCACnEzE,EAAAsD,mBAAmBD,EAAgBqB,gCAAkC,kCACrE1E,EAAAsD,mBAAmBD,EAAgBsB,+BAAiC,iCACpE3E,EAAAsD,mBAAmBD,EAAgBuB,yBAA2B,qBAC9D5E,EAAAsD,mBAAmBD,EAAgBwB,uBAAyB,+BAC5D7E,EAAAsD,mBAAmBD,EAAgByB,iCAAmC,4BACtE9E,EAAAsD,mBAAmBD,EAAgB0B,8BAAgC,qBAEnE/E,EAAAsD,mBAAmBD,EAAgB2B,uBAAyB,gGC3O5D,IAAAC,EAAAvE,EAAA,GAGAwE,EAAAxE,EAAA,IAGAyE,EAAAzE,EAAA,GAWA0E,EAAA,oBAAAA,KAwDA,OAlDWA,EAAAC,WAAP,WACI,MAdQ,cAwBLD,EAAAlD,OAAP,SAAeoD,EAAwBC,EAAoBC,GACvD,OAAO,IAAIC,QAAiB,SAACC,EAASC,GAClC,IAAIC,EAAS,KACb,OAAQN,GAEJ,KAAKL,EAAArC,WAAWiD,OACZD,EAAS,IAAIV,EAAAY,aACb,MAGJ,KAAKb,EAAArC,WAAWmD,MACZH,EAAS,IAAIT,EAAAa,YACb,MAEJ,QACI,KArCa,sBAwCrBJ,EAAOK,KAAKV,EAAOC,GAAkBU,KAAK,WACtCR,EAAQE,KAEXO,MAAM,SAACC,GACJT,EAAOS,QAWZhB,EAAAiB,UAAP,SAAkBT,EAAiBU,EAAkBC,GACjD,IAAKX,EACD,MAAM,IAAIY,MAAM,4DAEnBZ,EAAyBS,UAAUC,EAAMC,IAElDnB,EAxDA,GAAapF,EAAAoF,2BClBbnF,EAAAD,QAAAM,iFCAA,IAAA2E,EAAAvE,EAAA,GAEA+F,EAAA/F,EAAA,GAGAgG,EAAAhG,EAAA,IAGAiG,EAAAjG,EAAA,IAEAkG,EAAAlG,EAAA,IACAmG,EAAAnG,EAAA,IAOAoG,EAAA,oBAAAA,IAuBcC,KAAAC,WAwUd,OAjTWF,EAAAtE,UAAAyD,KAAP,SAAagB,EAA2BzB,GACpC,KAAMyB,aAAwBC,kBAC1B,MAAM,IAAIV,MAAM,sDAWpB,OATAO,KAAKE,aAAeA,EACpBF,KAAKI,OAAS,KACdJ,KAAKK,oBAAqB,EAC1BL,KAAKM,iBA1DsB,6BA2D3BN,KAAKO,wBAA0B,IAAIV,EAAAW,wBACnCR,KAAKO,wBAAwBrB,KAAKc,KAAKE,cACvCF,KAAKS,gBAAkB,IAAIX,EAAAY,gBAAgBV,KAAMA,KAAKE,cACtDF,KAAKW,aAAc,EAEZjC,QAAQC,WAKZoB,EAAAtE,UAAAmF,WAAP,SAAmBC,GACfb,KAAKW,YAAcE,EACnB,IAAK,IAAIhH,EAAI,EAAGA,EAAImG,KAAKC,QAAQa,OAAQjH,IACrCmG,KAAKC,QAAQpG,GAAG+G,WAAWC,IAI5Bd,EAAAtE,UAAAsF,+BAAP,SAAuCF,EAAiBzF,QAAA,IAAAA,MA5EzB,8BA6E3B4E,KAAKK,mBAAqBQ,EACtBzF,GAAOA,EAAI0F,OAAS,IACpBd,KAAKM,iBAAmBlF,GAExB4E,KAAKK,mBACLL,KAAKgB,qBAELhB,KAAKiB,uBAQNlB,EAAAtE,UAAAyF,MAAP,WACIlB,KAAKmB,OACLnB,KAAKS,gBAAgBS,QAErB,IAAK,IAAIrH,EAAI,EAAGA,EAAImG,KAAKC,QAAQa,OAAQjH,IACrCmG,KAAKC,QAAQpG,GAAGqH,SAUjBnB,EAAAtE,UAAA2F,KAAP,SAAahB,EAAoBiB,GAAjC,IAAAC,EAAAtB,KAEI,YAF6B,IAAAqB,OAAA,GAEtB,IAAI3C,QAAQ,SAACC,EAASC,GAEzB,IAAI2C,EAAc,SAACnB,GACfkB,EAAKE,WAAWpB,GAAQjB,KAAK,WACzBR,MACDS,MAAM,SAAAC,GACLT,EAAOS,MAKXiC,EAAKlB,QACLkB,EAAKH,OAGLG,EAAKX,aACLc,QAAQC,IAAI,0BAA2BtB,GAI3CkB,EAAKN,qBAEAK,GACDE,EAAYnB,GAIhB,IADA,IAAIuB,KACK9H,EAAI,EAAGA,EAAIyH,EAAKrB,QAAQa,OAAQjH,IACrC8H,EAAmBC,KAAKN,EAAKrB,QAAQpG,GAAGuH,KAAKhB,IAGjD1B,QAAQmD,IAAIF,GAAoBxC,KAAK,SAAC2C,IAEC,IAA/BA,EAAOC,QAAQ,YACfR,EAAYnB,KAEjBhB,MAAM,SAACC,GACNkC,EAAYnB,QASjBL,EAAAtE,UAAAuG,iBAAP,SAAyBC,GACrBjC,KAAKO,wBAAwB2B,SAASD,IAGnClC,EAAAtE,UAAA0G,iBAAP,WACI,OAAOnC,KAAKO,wBAAwB6B,YAGjCrC,EAAAtE,UAAA0F,KAAP,SAAaD,EAAcmB,GAUvB,QAVS,IAAAnB,OAAA,QAAc,IAAAmB,OAAA,GAEnBnB,GACAlB,KAAKI,OAAS,KACdJ,KAAKO,wBAAwBW,QAC7BlB,KAAKS,gBAAgBU,QAErBnB,KAAKO,wBAAwB2B,SAAS,GAGtCG,EAEA,IAAK,IAAIxI,EAAI,EAAGA,EAAImG,KAAKC,QAAQa,OAAQjH,IACrCmG,KAAKC,QAAQpG,GAAGsH,QAyBrBpB,EAAAtE,UAAA6G,UAAP,SAAkB/C,GACd,IAAIgD,KAIJ,OAHAA,EAAOrE,EAAAhC,UAAUsG,OAASxC,KAAKyC,iBAAiBvE,EAAAhC,UAAUsG,OAC1DD,EAAOrE,EAAAhC,UAAUwG,OAAS1C,KAAKyC,iBAAiBvE,EAAAhC,UAAUwG,OAC1DH,EAAOrE,EAAAhC,UAAUyG,MAAQ3C,KAAKyC,iBAAiBvE,EAAAhC,UAAUyG,MAClDJ,GAqBJxC,EAAAtE,UAAA6D,UAAP,SAAkBC,EAAkBC,GAChC,IAAIoD,EACJ,OAAQrD,GAEJ,KAAKrB,EAAAlC,WAAW6G,QACZD,EAAS,IAAIjD,EAAAmD,cACb,MAGJ,KAAK5E,EAAAlC,WAAW+G,YACZH,EAAS,IAAIhD,EAAAoD,UACb,MAEJ,QACI,MAAM,IAAIvD,MAAM,wBAA0BF,GAElDqD,EAAO1D,KAAKc,KAAMA,KAAKE,aAAcV,GACrCoD,EAAOhC,WAAWZ,KAAKW,aACvBX,KAAKC,QAAQ2B,KAAKgB,IASf7C,EAAAtE,UAAAwH,UAAP,SAAkBC,EAAeC,GAC7BnD,KAAKS,gBAAgB2C,eAAeF,EAAMC,IAYpCpD,EAAAtE,UAAA+F,WAAV,SAAsBpB,GAGlB,OAFAJ,KAAKI,OAASA,EACdJ,KAAKS,gBAAgB4C,MAAMjD,GACpB1B,QAAQC,WAKToB,EAAAtE,UAAA6H,eAAV,SAA0BC,EAAuBC,EAAqBC,GAClE,IAAIC,EAAQC,SAASC,YAAY,eAC7BC,GACAN,KAAMA,EACNO,QAASpE,EAAAnD,mBAAmBgH,GAC5BC,WAAYA,EACZC,KAAMA,GAEVC,EAAMK,gBAAgB7F,EAAA7B,aAAa2H,cAAc,GAAO,EAAOH,GAC/D7D,KAAKE,aAAa+D,cAAcP,IAG1B3D,EAAAtE,UAAAyI,qBAAV,SAAgC3E,EAAiB4E,GAC7C,GAAKnE,KAAKK,mBAAV,CAGA,IAAI+D,EAAWpE,KAAKqE,mBACfD,EAAS7E,KACV6E,EAAS7E,OAEb6E,EAAS7E,GAAY,KAAI4E,EACzBG,aAAaC,QAAQvE,KAAKM,iBAAkBkE,KAAKC,UAAUL,MAGrDrE,EAAAtE,UAAAiJ,eAAV,SAA0B7D,GACtB,GAAKb,KAAKK,mBAAV,CAGA,IAAI+D,EAAWpE,KAAKqE,mBACfD,EAASlG,EAAAhC,UAAUyG,QACpByB,EAASlG,EAAAhC,UAAUyG,UAEvByB,EAASlG,EAAAhC,UAAUyG,MAAc,OAAI9B,EACrCyD,aAAaC,QAAQvE,KAAKM,iBAAkBkE,KAAKC,UAAUL,MASvDrE,EAAAtE,UAAAuF,mBAAR,WACI,IAAI2D,EAAiBL,aAAaM,QAAQ5E,KAAKM,kBAC/C,GAAKqE,EAGL,IACI,IAAIP,EAAWI,KAAKK,MAAMF,QACAG,IAAtBV,EAAgB,YAAiDU,IAA9BV,EAAgB,MAAQ,MAC3DpE,KAAK+E,wBAAwBX,EAAgB,MAAQ,WAEhCU,IAArBV,EAAe,WAAgDU,IAA7BV,EAAe,KAAQ,MACzDpE,KAAKgF,uBAAuBZ,EAAe,KAAQ,WAE9BU,IAArBV,EAAe,WAAkDU,IAA/BV,EAAe,KAAU,QAC3DpE,KAAKiF,sBAAsBb,EAAe,KAAU,QAE1D,MAAO/E,GACLoC,QAAQC,IAAIrC,KAIZU,EAAAtE,UAAAwF,oBAAR,WACIqD,aAAaY,WAAWlF,KAAKM,mBAGzBP,EAAAtE,UAAA4I,iBAAR,WACI,IAAID,KACAO,EAAiBL,aAAaM,QAAQ5E,KAAKM,kBAC/C,GAAIqE,EACA,IACIP,EAAWI,KAAKK,MAAMF,GACxB,MAAOtF,GACL,OAAO+E,EAGf,OAAOA,GAIfrE,EA/VA,GAAsB9G,EAAA8G,iCClBtB,IAAA5G,EAAwED,EAAAD,QAAiS,SAAA0B,EAAA0E,EAAA/D,EAAAP,GAAkB,SAAAT,EAAA6K,EAAAtL,GAAgB,IAAAyB,EAAA6J,GAAA,CAAU,IAAA9F,EAAA8F,GAAA,CAAU,IAAAC,EAAA,mBAAAjM,KAA0C,IAAAU,GAAAuL,EAAA,OAAgBjM,EAACgM,GAAA,GAAO,GAAAE,EAAA,OAAAA,EAAAF,GAAA,GAAoB,IAAAG,EAAA,IAAA7F,MAAA,uBAAA0F,EAAA,KAA8C,MAAAG,EAAA/B,KAAA,mBAAA+B,EAAkC,IAAAnL,EAAAmB,EAAA6J,IAAYlM,YAAYoG,EAAA8F,GAAA,GAAAnL,KAAAG,EAAAlB,QAAA,SAAA0B,GAAmC,IAAAW,EAAA+D,EAAA8F,GAAA,GAAAxK,GAAiB,OAAAL,EAAAgB,GAAAX,IAAeR,IAAAlB,QAAA0B,EAAA0E,EAAA/D,EAAAP,GAAsB,OAAAO,EAAA6J,GAAAlM,QAAoB,QAAAoM,EAAA,mBAAAlM,KAAAgM,EAAA,EAAkDA,EAAApK,EAAA+F,OAAWqE,IAAA7K,EAAAS,EAAAoK,IAAY,OAAA7K,EAA5b,EAAkdiL,KAAA,SAAA5K,EAAA0E,EAAA/D,GAAqB,aAAaA,EAAAkK,WAA8d,SAAA7K,GAAc,IAAA0E,EAAAiG,EAAA3K,GAAWW,EAAA+D,EAAA,GAAWtE,EAAAsE,EAAA,GAAW,UAAA/D,EAAAP,GAAA,EAAAA,GAA9fO,EAAAmK,YAAojB,SAAA9K,GAAmG,IAArF,IAAA0E,EAAM/D,EAAAgK,EAAA3K,GAAWI,EAAAO,EAAA,GAAW6J,EAAA7J,EAAA,GAAWzB,EAAA,IAAAwL,EAAzF,SAAA1K,EAAA0E,EAAA/D,GAAkB,UAAA+D,EAAA/D,GAAA,EAAAA,EAAuEpB,CAAAS,EAAAI,EAAAoK,IAAsBC,EAAA,EAAQjL,EAAAgL,EAAA,EAAApK,EAAA,EAAAA,EAAgB2K,EAAA,EAAYA,EAAAvL,EAAIuL,GAAA,EAAMrG,EAAA/E,EAAAK,EAAAgL,WAAAD,KAAA,GAAApL,EAAAK,EAAAgL,WAAAD,EAAA,QAAApL,EAAAK,EAAAgL,WAAAD,EAAA,OAAApL,EAAAK,EAAAgL,WAAAD,EAAA,IAA+F7L,EAAAuL,KAAA/F,GAAA,OAAiBxF,EAAAuL,KAAA/F,GAAA,MAAgBxF,EAAAuL,KAAA,IAAA/F,EAAoM,OAAvL,IAAA8F,IAAU9F,EAAA/E,EAAAK,EAAAgL,WAAAD,KAAA,EAAApL,EAAAK,EAAAgL,WAAAD,EAAA,OAAgD7L,EAAAuL,KAAA,IAAA/F,GAAa,IAAA8F,IAAU9F,EAAA/E,EAAAK,EAAAgL,WAAAD,KAAA,GAAApL,EAAAK,EAAAgL,WAAAD,EAAA,OAAApL,EAAAK,EAAAgL,WAAAD,EAAA,OAAyE7L,EAAAuL,KAAA/F,GAAA,MAAgBxF,EAAAuL,KAAA,IAAA/F,GAAaxF,GAAj+ByB,EAAAsK,cAAqrC,SAAAjL,GAAkE,IAApD,IAAA0E,EAAM/D,EAAAX,EAAAmG,OAAexG,EAAAgB,EAAA,EAAU+J,KAASF,EAAA,MAAYtL,EAAA,EAAAuL,EAAA9J,EAAAhB,EAAkBT,EAAAuL,EAAIvL,GAAAsL,EAAME,EAAAzD,KAAA9H,EAAAa,EAAAd,IAAAsL,EAAAC,IAAAvL,EAAAsL,IAA6J,OAAlI,IAAA7K,GAAU+E,EAAA1E,EAAAW,EAAA,GAAS+J,EAAAzD,KAAA7G,EAAAsE,GAAA,GAAAtE,EAAAsE,GAAA,aAAgC,IAAA/E,IAAe+E,GAAA1E,EAAAW,EAAA,OAAAX,EAAAW,EAAA,GAAqB+J,EAAAzD,KAAA7G,EAAAsE,GAAA,IAAAtE,EAAAsE,GAAA,MAAAtE,EAAAsE,GAAA,YAA2CgG,EAAAQ,KAAA,KAA5wC,IAAlJ,IAAA9K,KAAST,KAAS+K,EAAA,oBAAAS,sBAAAC,MAAuDZ,EAAA,mEAAyEtL,EAAA,EAAAuL,EAAAD,EAAArE,OAAuBjH,EAAAuL,IAAIvL,EAAKkB,EAAAlB,GAAAsL,EAAAtL,GAAUS,EAAA6K,EAAAQ,WAAA9L,MAAqE,SAAAyL,EAAA3K,GAAc,IAAA0E,EAAA1E,EAAAmG,OAAe,GAAAzB,EAAA,IAAU,UAAAI,MAAA,kDAAkE,IAAAnE,EAAAX,EAAAoH,QAAA,MAAqB,IAAAzG,MAAA+D,GAAc,IAAAtE,EAAAO,IAAA+D,EAAA,IAAA/D,EAAA,EAAoB,OAAAA,EAAAP,GAAujB,SAAAa,EAAAjB,GAAc,OAAAI,EAAAJ,GAAA,OAAAI,EAAAJ,GAAA,OAAAI,EAAAJ,GAAA,MAAAI,EAAA,GAAAJ,GAAkD,SAAAb,EAAAa,EAAA0E,EAAA/D,GAAiC,IAAf,IAAAP,EAAMT,KAAS+K,EAAAhG,EAAYgG,EAAA/J,EAAI+J,GAAA,EAAMtK,GAAAJ,EAAA0K,IAAA,cAAA1K,EAAA0K,EAAA,kBAAA1K,EAAA0K,EAAA,IAAqD/K,EAAAsH,KAAAhG,EAAAb,IAAa,OAAAT,EAAAuL,KAAA,IAAh8BvL,EAAA,IAAAqL,WAAA,OAAwBrL,EAAA,IAAAqL,WAAA,mBAA9wB,CAA89D,oFCArzE,IAAAzH,EAAAvE,EAAA,GAEMqM,EAASrM,EAAQ,GAKvBsM,EAAA,oBAAAA,KA6UA,OA3SWA,EAAAxK,UAAAyD,KAAP,SAAagB,EAAgCgG,GACzClG,KAAKE,aAAeA,EAChBgG,GAAkBA,EAAe,uBACjClG,KAAKmG,uBAAyBD,EAAe,sBAEjDlG,KAAKW,aAAc,EACnBX,KAAKoG,gBAAkB,KACvBpG,KAAKqG,eAAiB,KAEtBrG,KAAKsG,gBAAkBtG,KAAKuG,UAAUlL,KAAK2E,MAC3CA,KAAKwG,mBAAqBxG,KAAKyG,aAAapL,KAAK2E,MACjDA,KAAK0G,iBAAmB1G,KAAK2G,WAAWtL,KAAK2E,MAC7CA,KAAK4G,iBAAmB5G,KAAK6G,WAAWxL,KAAK2E,MAE7CA,KAAKE,aAAa4G,iBAAiB,gBAAiB9G,KAAKsG,kBAGtDL,EAAAxK,UAAAyF,MAAP,WACgC,OAAxBlB,KAAKqG,iBACLrG,KAAKqG,eAAeU,QACpB/G,KAAKqG,eAAiB,MAE1BrG,KAAKoG,gBAAkB,KACvBpG,KAAKE,aAAa8G,oBAAoB,gBAAiBhH,KAAKsG,kBAGzDL,EAAAxK,UAAAmF,WAAP,SAAmBC,GACfb,KAAKW,YAAcE,GASfoF,EAAAxK,UAAAwL,MAAR,SAAenD,GACN9D,KAAKW,aAGVc,QAAQC,IAAI,YAAcoC,IAGtBmC,EAAAxK,UAAA6H,eAAR,SAAwBjE,GACpB,IAAIqE,EAAQC,SAASC,YAAY,eACjCF,EAAMK,gBAAgB7F,EAAA7B,aAAa2H,cAAc,GAAO,EAAO3E,GAC/DW,KAAKE,aAAa+D,cAAcP,IAG5BuC,EAAAxK,UAAAyL,cAAR,SAAuBC,GAGnB,IAFA,IAAIC,EAAS,IAAIC,YAAyB,EAAbF,EAAIrG,QAC7BwG,EAAQ,IAAIC,YAAYH,GACnBvN,EAAI,EAAGA,EAAIsN,EAAIrG,OAAQjH,IAC5ByN,EAAMzN,GAAKsN,EAAIxB,WAAW9L,GAE9B,OAAOyN,GAGHrB,EAAAxK,UAAA+L,uBAAR,WACI,OAAQxH,KAAKmG,wBAA0BnG,KAAKmG,uBAAuBsB,gBAAmBzH,KAAKmG,uBAAuBsB,gBAAkBvJ,EAAAjC,oBAAoByL,cAGpJzB,EAAAxK,UAAAkM,iBAAR,SAA0BC,GACtB,IACIC,EADYC,OAAOC,aAAaC,MAAM,KAAM,IAAIT,YAAYK,EAASR,SACnDa,MAAM,MAC5B,GAAqB,IAAjBJ,EAAM/G,OACN,MAAM,IAAIrB,MAAM,8BAEpB,OAAOoI,EAAM,IAGT5B,EAAAxK,UAAAyM,eAAR,WACI,OAAKlI,KAAKmG,wBAA2BnG,KAAKmG,uBAAuBgC,kBAG1DnC,EAAOP,YAAYzF,KAAKmG,uBAAuBgC,mBAF3C,IAAIrC,WAAW,IAKtBG,EAAAxK,UAAA2M,+BAAR,SAAwCR,EAAsBS,EAAYC,GACtE,IAAIC,EAAyB,iBAAPF,EAAmBrI,KAAKkH,cAAcmB,GAAMA,EAG9DG,EAAS,EACTpB,EAAS,IAAIC,YAAYO,EAASpC,WAAa,EAAI+C,EAAQ/C,WAAa,EAAI8C,EAAK9C,YACjFiD,EAAW,IAAIC,SAAStB,GAExBuB,EAAgB,IAAI7C,WAAWsB,EAAQoB,EAAQZ,EAASpC,YAC5DmD,EAAcC,IAAIhB,GAClBY,GAAUG,EAAcnD,WAExBiD,EAASI,UAAUL,EAAQD,EAAQ/C,YAAY,GAC/CgD,GAAU,EAEV,IAAIM,EAAY,IAAIvB,YAAYH,EAAQoB,EAAQH,EAAGvH,QAUnD,OATAgI,EAAUF,IAAIL,GACdC,GAAUM,EAAUtD,WAEpBiD,EAASI,UAAUL,EAAQF,EAAK9C,YAAY,GAC5CgD,GAAU,EAEM,IAAI1C,WAAWsB,EAAQoB,EAAQF,EAAK9C,YAC1CoD,IAAIN,GAEP,IAAIxC,WAAWsB,EAAQ,EAAGA,EAAO5B,aAGpCS,EAAAxK,UAAAsN,sBAAR,SAA+BjF,GAC3B,OAAI9D,KAAKwH,2BAA6BtJ,EAAAjC,oBAAoByL,aAC/C5D,EAGO,OAASkC,EAAOJ,cAAc9B,GAAW,YAAckF,mBAAmBhJ,KAAKoG,gBAAgB6C,YAI7GhD,EAAAxK,UAAAyN,mBAAR,SAA4BC,EAAaC,EAAgBC,GAAzD,IAAA/H,EAAAtB,KACI,OAAO,IAAItB,QAAwB,SAACC,EAASC,GACzC,IAAI0K,EAAsBhI,EAAKkG,yBAC3BnB,EAAiB,IAAIkD,eACrBC,GAAU,EACdnD,EAAeoD,aAAeH,IAAwBpL,EAAAjC,oBAAoByL,aAAe,cAAgB,OACzGrB,EAAegD,gBAAkBA,EAEjChD,EAAeqD,OAAS,SAAgCrK,GAChDW,KAAK2J,OAAS,KAAO3J,KAAK2J,OAAS,KAGnB,MAAhB3J,KAAK2J,QAAsC,IAApB3J,KAAK4J,aAC5BJ,GAAU,EACV7K,EAAQqB,QAIhBqG,EAAewD,UAAY,SAAgCxK,GACnDmK,GAGJ5K,EAAOoB,OAUXqG,EAAeyD,KAAK,OAAQX,GAAK,GACjC9C,EAAe0D,iBAAiB,eAAgBT,IAAwBpL,EAAAjC,oBAAoByL,aAAe,2BAA6B,qCACxIrB,EAAe2D,KAAKZ,MAIpBnD,EAAAxK,UAAAwO,uBAAR,SAAgCC,GAC5B,IACI9O,EADsB4E,KAAKwH,2BAGHtJ,EAAAjC,oBAAoBkO,MAGnB,WADzB/O,EAAM8O,EAAQE,aAAaC,QACnBC,OAAO,EAAG,IAAqC,WAAnBlP,EAAIkP,QAAQ,KAC5ClP,EAAMA,EAAImP,MAAM,GAAG,IAEvBnP,EAAM4K,EAAOP,YAAYrK,IAEzBA,EAAM,IAAI0K,WAAWoE,EAAQM,UAGjCxK,KAAKiH,MAAM,sBACXjH,KAAKoG,gBAAgBqE,OAAOrP,IAGxB6K,EAAAxK,UAAAiP,YAAR,SAAqBhH,GACjB,IAAIG,EAAQH,EAAMiH,OAAO9G,MACrBN,EAAO,eACPO,EAAU,gBAEd,GAAID,EACA,OAAQA,EAAMN,MACV,KAAK,EACDA,EAAO,uBACPO,EAAU,wGACV,MACJ,KAAK,EACDP,EAAO,sBACPO,EAAU,oDACV,MACJ,KAAK,EACDP,EAAO,uBACPO,EAAU,8EACV,MACJ,KAAK,EACDP,EAAO,sBACPO,EAAU,2GACV,MACJ,KAAK,EACDP,EAAO,8BACPO,GAAW,qEACX,MACJ,KAAK,EACDP,EAAO,sBACPO,EAAU,6HACV,MACJ,QACIP,EAAO,uBACPO,EAAU,6GAIlBP,EAAO,uBACPO,EAAU,wGAKd,OAHID,EAAM+G,aACN9G,GAAW,oBAAsBJ,EAAMkH,WAAa,MAGpDrH,KAAMA,EACNO,QAASA,IAITmC,EAAAxK,UAAA8K,UAAR,SAAmBlH,GACfW,KAAKiH,MAAM,iBAEX,IAAIgC,EAAYjJ,KAAK2H,iBAAiBtI,EAAEuI,UACpCiD,EAAc7K,KAAKkI,iBACnBN,EAAW5H,KAAKoI,+BAA+B/I,EAAEuI,SAAUqB,EAAW4B,GAE1E7K,KAAKiH,MAAM,sBACX,IAAI6D,EAAY,IAAIxR,OAAwB,gBAAE,qBAI9C,GAHA0G,KAAKE,aAAiC,mBAAE4K,GACxC9K,KAAKoG,gBAAkBpG,KAAKE,aAAyB,WAAE6K,cAAc,YAAanD,IAE7E5H,KAAKoG,gBACN,MAAM,IAAI3G,MAAM,gCAGhBO,KAAKoG,gBAAgBvC,OACrB7D,KAAKsD,gBACDC,KAAM,8BACNO,QAAS,+BACTL,KAAMzD,KAAKoG,gBAAgBvC,QAInC7D,KAAKoG,gBAAgB6C,UAAYA,EAEjCjJ,KAAKoG,gBAAgBU,iBAAiB,mBAAoB9G,KAAKwG,oBAC/DxG,KAAKoG,gBAAgBU,iBAAiB,iBAAkB9G,KAAK0G,kBAC7D1G,KAAKoG,gBAAgBU,iBAAiB,iBAAkB9G,KAAK4G,mBAGzDX,EAAAxK,UAAAgL,aAAR,SAAsBpH,GAAtB,IAAAiC,EAAAtB,KAEIA,KAAKiH,MAAM,oBAEX,IAAI+D,EAAYhL,KAAKmG,uBAAyBnG,KAAKmG,uBAAuB8E,UAAY,KACtF,GAAKD,EAAL,CAQA,IAAIlH,EAAUzE,EAAEyE,QAChBA,EAAU9D,KAAK+I,sBAAsBjF,GAErC,IAAIuF,IAAkBrJ,KAAKmG,yBAA0E,IAAhDnG,KAAKmG,uBAAuBkD,gBACjFrJ,KAAKiH,MAAM,wBACXjH,KAAKkJ,mBAAmB8B,EAAWlH,EAASuF,GAC3ClK,KAAK,SAAC+K,GACH5I,EAAK2F,MAAM,4BACX3F,EAAK2I,uBAAuBC,KAE/B9K,MAAM,SAAC8K,GACJ5I,EAAKgC,gBACDC,KAAM,kCACNO,QAAS,yBACTL,MACIkG,OAAQO,EAAQP,OAChB9F,MAAOqG,EAAQM,mBAvBvBxK,KAAKsD,gBACDC,KAAM,wCACNO,QAAS,qCA2BbmC,EAAAxK,UAAAkL,WAAR,SAAoBtH,GAChBW,KAAKiH,MAAM,mBAGPhB,EAAAxK,UAAAoL,WAAR,SAAoBxH,GAChBW,KAAKiH,MAAM,kBACX,IAAIpD,EAAQ7D,KAAK0K,YAAYrL,GAC7BW,KAAKsD,eAAeO,IAK5BoC,EA7UA,GAAahN,EAAAgN,ycCNb,IAAAiF,EAAAvR,EAAA,GACAuE,EAAAvE,EAAA,GACAwR,EAAAxR,EAAA,GACA+F,EAAA/F,EAAA,GAKAsF,EAAA,SAAAmM,GAsCI,SAAAnM,WACImM,EAAApR,KAAAgG,OAAOA,KA0cf,OAjfiCqL,EAAApM,EAAAmM,GAiDtBnM,EAAAxD,UAAA6C,WAAP,WACI,MAAO,IAGJW,EAAAxD,UAAA6P,cAAP,WACI,OAAOpN,EAAArC,WAAWmD,OAGfC,EAAAxD,UAAAyD,KAAP,SAAagB,EAA2BzB,GAoBpC,OAnBA2M,EAAA3P,UAAMyD,KAAIlF,KAAAgG,KAACE,EAAczB,GACzBuB,KAAKuL,qBAAuB,KAC5BvL,KAAKwL,oBAAsB,KAC3BxL,KAAKyL,oBAAqB,EAC1BzL,KAAK0L,oBAAsB,KAE3B1L,KAAK2L,uBAAyB3L,KAAK4L,iBAAiBvQ,KAAK2E,MACzDA,KAAK6L,qBAAuB7L,KAAK8L,eAAezQ,KAAK2E,MACrDA,KAAK+L,eAAiB/L,KAAKgM,SAAS3Q,KAAK2E,MACzCA,KAAKiM,cAAgBjM,KAAKkM,QAAQ7Q,KAAK2E,MAEvCA,KAAKE,aAAa4G,iBAAiB,iBAAkB9G,KAAK2L,wBAC1D3L,KAAKE,aAAa4G,iBAAiB,OAAQ9G,KAAK6L,sBAChD7L,KAAKE,aAAa4G,iBAAiB,QAAS9G,KAAK6L,sBACjD7L,KAAKE,aAAa4G,iBAAiB,UAAW9G,KAAK6L,sBACnD7L,KAAKE,aAAa4G,iBAAiB,UAAW9G,KAAK6L,sBACnD7L,KAAKE,aAAa4G,iBAAiB,UAAW9G,KAAK6L,sBACnD7L,KAAKE,aAAa4G,iBAAiB,QAAS9G,KAAKiM,eAE1CvN,QAAQC,WAGZM,EAAAxD,UAAA0Q,UAAP,SAAkBC,KAIXnN,EAAAxD,UAAAmF,WAAP,SAAmBC,GACfuK,EAAA3P,UAAMmF,WAAU5G,KAAAgG,KAACa,GACbb,KAAKqM,cACLrM,KAAKqM,aAAazL,WAAWC,IAI9B5B,EAAAxD,UAAAqL,iBAAP,SAAyBvH,EAAc+M,EAAeC,GAClDvM,KAAKE,aAAa4G,iBAAiBvH,EAAM+M,EAAUC,IAGhDtN,EAAAxD,UAAAuL,oBAAP,SAA4BzH,EAAc+M,EAAeC,GACrDvM,KAAKE,aAAa8G,oBAAoBzH,EAAM+M,EAAUC,IAGnDtN,EAAAxD,UAAAyF,MAAP,WACIlB,KAAKE,aAAa8G,oBAAoB,iBAAkBhH,KAAK2L,wBAC7D3L,KAAKE,aAAa8G,oBAAoB,OAAQhH,KAAK6L,sBACnD7L,KAAKE,aAAa8G,oBAAoB,QAAShH,KAAK6L,sBACpD7L,KAAKE,aAAa8G,oBAAoB,UAAWhH,KAAK6L,sBACtD7L,KAAKE,aAAa8G,oBAAoB,UAAWhH,KAAK6L,sBACtD7L,KAAKE,aAAa8G,oBAAoB,UAAWhH,KAAK6L,sBACtD7L,KAAKE,aAAa8G,oBAAoB,QAAShH,KAAKiM,gBASjDhN,EAAAxD,UAAA+Q,KAAP,WACI,OAAOxM,KAAKE,aAAasM,QAGtBvN,EAAAxD,UAAAgR,MAAP,WACIzM,KAAKE,aAAauM,SAGfxN,EAAAxD,UAAAiR,KAAP,SAAaC,GACT3M,KAAKE,aAAa0M,YAAcD,GAG7B1N,EAAAxD,UAAA0F,KAAP,SAAaD,EAAcmB,QAAd,IAAAnB,OAAA,GAKTkK,EAAA3P,UAAM0F,KAAInH,KAAAgG,KAACqC,GAEXrC,KAAKiH,MAAM,QAEP/F,GAASlB,KAAK6M,UACd7M,KAAKE,aAAauM,QACQ,OAAtBzM,KAAKqM,eACLrM,KAAKqM,aAAanL,QAClBlB,KAAKqM,aAAe,MAGxBrM,KAAKE,aAAa4M,gBAAgB,OAClC9M,KAAKE,aAAakB,SAElBpB,KAAKE,aAAa4G,iBAAiB,SAAU9G,KAAK+L,gBAClD/L,KAAKE,aAAa0M,YAAc,IAWjC3N,EAAAxD,UAAAsR,YAAP,WACI,OAAO/M,KAAKE,aAAa8M,UAGtB/N,EAAAxD,UAAAoR,OAAP,WACI,OAAO7M,KAAK+M,gBAAkBE,OAAOC,mBAGlCjO,EAAAxD,UAAA0R,QAAP,WACI,OAAOnN,KAAKE,aAAa0M,aAStB3N,EAAAxD,UAAAgH,iBAAP,SAAyBlD,GACrB,OAAQA,GACJ,KAAKrB,EAAAhC,UAAUsG,MACX,OAAOxC,KAAKoN,iBAChB,KAAKlP,EAAAhC,UAAUwG,MACX,OAAO1C,KAAKqN,iBAChB,KAAKnP,EAAAhC,UAAUyG,KACX,OAAO3C,KAAKsN,gBAChB,QACI,OAAO,OAIZrO,EAAAxD,UAAA8R,wBAAP,SAAgChO,GAC5B,OAAQA,GACJ,KAAKrB,EAAAhC,UAAUwG,MACX,OAAO1C,KAAKwN,wBAChB,KAAKtP,EAAAhC,UAAUyG,KACX,OAAO3C,KAAKyN,uBAChB,QACI,OAAO,OAIZxO,EAAAxD,UAAAiS,kBAAP,SAA0BnO,GAEtB,OAAQ,GAGLN,EAAAxD,UAAAkS,sBAAP,SAA8BpO,GAE1B,OAAQ,GAGLN,EAAAxD,UAAAmS,mBAAP,SAA2BrO,EAAiB8I,GACxC,IAAIlE,EAAO,KACX,OAAQ5E,GACJ,KAAKrB,EAAAhC,UAAUwG,MACXyB,EAAOnE,KAAK6N,iBAAiBxF,GAC7B,MACJ,KAAKnK,EAAAhC,UAAUyG,KACXwB,EAAOnE,KAAK8N,gBAAgBzF,GAC5BrI,KAAK0L,oBAAsBrD,EAK/BlE,IACAnE,KAAKkE,qBAAqB3E,EAAM4E,GAC5B5E,IAASrB,EAAAhC,UAAUyG,MACnB3C,KAAK0E,gBAAe,KAKzBzF,EAAAxD,UAAAsS,YAAP,SAAoBC,GAChBhO,KAAK4N,mBAAmBI,EAAMC,UAAWD,EAAM3F,KAG5CpJ,EAAAxD,UAAAsJ,wBAAP,SAAgCZ,GAC5BnE,KAAKuL,qBAAuBpH,GAGzBlF,EAAAxD,UAAAuJ,uBAAP,SAA+Bb,GAC3BnE,KAAKwL,oBAAsBrH,GAGxBlF,EAAAxD,UAAAyS,WAAP,SAAmBrN,GACf,GAAIA,EACAb,KAAK8N,gBAAgB9N,KAAK0L,0BAG1B,IADA,IAAIyC,EAAanO,KAAKE,aAAaiO,WAC1BtU,EAAI,EAAGA,EAAIsU,EAAWrN,OAAQjH,IACnCsU,EAAWtU,GAAGmB,KAAO,WAG7BgF,KAAK0E,eAAe7D,IAGjB5B,EAAAxD,UAAA2S,cAAP,WAEI,IADA,IAAID,EAAanO,KAAKE,aAAaiO,WAC1BtU,EAAI,EAAGA,EAAIsU,EAAWrN,OAAQjH,IACnC,GAA2B,YAAvBsU,EAAWtU,GAAGmB,KACd,OAAO,EAGf,OAAO,GAGJiE,EAAAxD,UAAAwJ,sBAAP,SAA8BpE,GAC1Bb,KAAKyL,oBAAqB,GAYpBxM,EAAAxD,UAAA+F,WAAV,SAAsBpB,GAAtB,IAAAkB,EAAAtB,KACI,OAAO,IAAItB,QAAQ,SAACC,EAASC,GAEzB,IAAIyP,EAAkB,SAAChP,GACnBiC,EAAK2F,MAAM,WACX3F,EAAKpB,aAAa8G,oBAAoB,UAAWqH,GAEjD/M,EAAKpB,aAAasM,OAAOrN,KAAK,WAC1BR,MACDS,MAAM,SAAAC,GACLT,EAAOS,MAIfiC,EAAKpB,aAAa4G,iBAAiB,UAAWuH,GAE9CjD,EAAA3P,UAAM+F,WAAUxH,KAAAsH,EAAClB,GACjBkB,EAAKoK,oBAAsB,KAEvBtL,EAAOkO,WACPhN,EAAK4E,eAAiB9F,EAAOkO,UAGjChN,EAAK+K,aAAe,IAAIlB,EAAAlF,mBACxB3E,EAAK+K,aAAanN,KAAKoC,EAAKpB,aAAcoB,EAAK4E,gBAE/C5E,EAAKpB,aAAaqO,IAAMnO,EAAO+I,KAAO/I,EAAOoO,WAAa,EAAK,MAAQpO,EAAOoO,UAAa,OAIzFvP,EAAAxD,UAAAgT,qBAAV,SAAgCC,KAUxBzP,EAAAxD,UAAA2R,eAAR,WACI,IAAIuB,KACAC,GACAX,UAAW/P,EAAAhC,UAAUsG,MACrB6F,GAAI,QACJwG,UAAU,EACVC,MAAO,GACPC,SAAU,GACV5K,KAAM,GACN6K,cAGJ,OADAL,EAAW/M,KAAKgN,GACTD,GAGH1P,EAAAxD,UAAA4R,eAAR,WACI,IAAIsB,KACAM,EAAcjP,KAAKE,aAAa+O,YAEpC,GAA2B,IAAvBA,EAAYnO,OACZ,SAGJ,IAAK,IAAIjH,EAAI,EAAGA,EAAIoV,EAAYnO,OAAQjH,IACpC8U,EAAW/M,KAAK5B,KAAKkP,sBAAsBD,EAAYpV,KAE3D,OAAO8U,GAGH1P,EAAAxD,UAAA6R,cAAR,WACI,IAAIqB,KACAR,EAAanO,KAAKE,aAAaiO,WAEnC,GAA0B,IAAtBA,EAAWrN,OACX,SAGJ,IAAK,IAAIjH,EAAI,EAAGA,EAAIsU,EAAWrN,OAAQjH,IACnC8U,EAAW/M,KAAK5B,KAAKmP,qBAAqBhB,EAAWtU,KAEzD,OAAO8U,GAGH1P,EAAAxD,UAAAoS,iBAAR,SAA0BxF,EAAalE,GAGnC,IAFA,IAAI8K,EAAcjP,KAAKE,aAAa+O,YAChCG,EAAe,KACVvV,EAAI,EAAGA,EAAIoV,EAAYnO,OAAQjH,KAC/BwO,GAAM4G,EAAYpV,GAAGwO,KAAOA,GAAQlE,GAAQ8K,EAAYpV,GAAGwV,WAAalL,KACzE8K,EAAYpV,GAAGyV,SAAU,EACzBF,EAAeH,EAAYpV,GAAGwV,UAGtC,OAAOD,GAGHnQ,EAAAxD,UAAAqS,gBAAR,SAAyBzF,EAAalE,GAGlC,IAFA,IAAIgK,EAAanO,KAAKE,aAAaiO,WAC/BiB,EAAe,KACVvV,EAAI,EAAGA,EAAIsU,EAAWrN,OAAQjH,IAC9BwO,GAAM8F,EAAWtU,GAAG0V,QAAUlH,GAAQlE,GAAQgK,EAAWtU,GAAGwV,WAAalL,GAC1EgK,EAAWtU,GAAGmB,KAAO,UACrBoU,EAAejB,EAAWtU,GAAGwV,UAE7BlB,EAAWtU,GAAGmB,KAAO,WAO7B,OAJKoU,GAAgBjB,EAAWrN,OAAS,IACrCqN,EAAW,GAAGnT,KAAO,UACrBoU,EAAejB,EAAW,GAAGkB,UAE1BD,GAGHnQ,EAAAxD,UAAA+R,sBAAR,WAEI,IADA,IAAIyB,EAAcjP,KAAKE,aAAa+O,YAC3BpV,EAAI,EAAGA,EAAIoV,EAAYnO,OAAQjH,IACpC,GAAIoV,EAAYpV,GAAGyV,QACf,OAAOtP,KAAKkP,sBAAsBD,EAAYpV,IAGtD,OAAO,MAGHoF,EAAAxD,UAAAgS,qBAAR,WAEI,IADA,IAAIU,EAAanO,KAAKE,aAAaiO,WAC1BtU,EAAI,EAAGA,EAAIsU,EAAWrN,OAAQjH,IACnC,GAA2B,YAAvBsU,EAAWtU,GAAGmB,KACd,OAAOgF,KAAKmP,qBAAqBhB,EAAWtU,IAGpD,OAAO,MAGHoF,EAAAxD,UAAAyT,sBAAR,SAA+BM,GAW3B,OATIvB,UAAW/P,EAAAhC,UAAUwG,MACrB2F,GAAImH,EAAWnH,GACfwG,SAAUW,EAAWF,QACrBG,KAAMD,EAAWC,KACjBX,MAAO,GACPC,SAAU,GACV5K,KAAMqL,EAAWH,SACjBL,eAKA/P,EAAAxD,UAAA0T,qBAAR,SAA8BO,GAY1B,OAVIzB,UAAW/P,EAAAhC,UAAUyG,KACrB0F,GAAIqH,EAAUH,MACdV,SAA6B,YAAnBa,EAAU1U,KACpByU,KAAMC,EAAUD,KAChBX,MAAO,GACPC,SAAU,GACV5K,KAAMuL,EAAUL,SAChBL,eAMA/P,EAAAxD,UAAAmQ,iBAAR,SAA0BvM,GACtBW,KAAKiH,MAAM,kBACPjH,KAAKuL,sBACLvL,KAAK6N,sBAAiB/I,EAAW9E,KAAKuL,sBAEtCvL,KAAKwL,qBAAuBxL,KAAKyL,oBACjCzL,KAAK8N,qBAAgBhJ,EAAW9E,KAAKwL,sBAIrCvM,EAAAxD,UAAAqQ,eAAR,SAAwBzM,GACpBW,KAAKiH,MAAM5H,EAAEE,OAGTN,EAAAxD,UAAAuQ,SAAR,SAAkB3M,GAEdW,KAAKiH,MAAM,UACXjH,KAAKE,aAAauM,QAClBzM,KAAKE,aAAa8G,oBAAoB,SAAUhH,KAAK+L,iBAGjD9M,EAAAxD,UAAAyQ,QAAR,SAAiB7M,GACb,OAAQA,EAAEsL,OAAO9G,MAAMN,MAEnB,KAAK,EACDvD,KAAKsD,eAAe5D,EAAApD,gBAAgBE,mBACpC,MAEJ,KAAK,EACDwD,KAAKsD,eAAe5D,EAAApD,gBAAgBU,sBACpC,MAEJ,KAAK,EACDgD,KAAKsD,eAAe5D,EAAApD,gBAAgBI,kBACpC,MAEJ,KAAK,EACDsD,KAAKsD,eAAe5D,EAAApD,gBAAgBS,sBAAuB,IACvDoM,IAAK9J,EAAEsL,OAAO4D,MAElB,MAEJ,KAAK,EACDvO,KAAKsD,eAAe5D,EAAApD,gBAAgBM,uBAKxCqC,EAAAxD,UAAAwL,MAAR,SAAenD,GACN9D,KAAKW,aAGVc,QAAQC,IAAI,YAAcoC,IAKlC7E,EAjfA,CAAiCiM,EAAAnL,eAApB9G,EAAAgG,6FCTb,IAAA0Q,EAAAhW,EAAA,GAEAiW,EAAA,oBAAAA,KAwBA,OAlBIA,EAAAnU,UAAAyD,KAAA,SAAM2Q,GACFA,EAAYC,GAAGH,EAAOI,YAAYC,OAAOC,cAAejQ,KAAKkQ,iBAAkBlQ,OAK3E4P,EAAAnU,UAAAyU,iBAAR,SAA0BC,GACjBA,GAAkBA,EAAc1M,OAIrC0M,EAAc1M,KAAO0M,EAAc1M,KAAK2M,QAAQ,yCAA0C,6BAC1FD,EAAc1M,KAAO0M,EAAc1M,KAAK2M,QAAQ,iBAAkB,UAClED,EAAc1M,KAAO0M,EAAc1M,KAAK2M,QAAQ,gBAAiB,SACjED,EAAc1M,KAAO0M,EAAc1M,KAAK2M,QAAQ,cAAe,OAC/DD,EAAc1M,KAAO0M,EAAc1M,KAAK2M,QAAQ,gBAAiB,WAGzER,EAxBA,GAAa3W,EAAA2W,gCCFb1W,EAAAD,QAAA,ikDCAAC,EAAAD,QAAA,+oDCAA,IAAAoX,EAAA1W,EAAA,GAEAuE,EAAAvE,EAAA,GAGI2W,EAAO3W,EAAQ,IACf4W,EAAM5W,EAAQ,GASlBL,OAAOkX,SAAWlX,OAAOkX,aAEzB,IAAAC,EAAA,WAwDI,SAAAA,EAAa5R,EAAiBL,GAvCtBwB,KAAA0Q,QAAU,GACV1Q,KAAA2Q,SAAmB,GACnB3Q,KAAA4Q,WAAqB,GACrB5Q,KAAA6Q,cAAwB,GACxB7Q,KAAA8Q,aAAuB,EACvB9Q,KAAAgN,SAAmB,EACnBhN,KAAA+Q,OAAiB,EAGjB/Q,KAAAgR,YAAsB,EACtBhR,KAAAiR,YAAsB,EACtBjR,KAAAkR,aAAuB,EAEvBlR,KAAAmR,aAAuB,EAEvBnR,KAAAoR,gBAA0B,EAC1BpR,KAAAqR,iBAA2B,EAwB/BrR,KAAKnB,OAASA,EACdmB,KAAKE,aAAe1B,EACpBwB,KAAKsR,aAAe,KACpBtR,KAAKuR,SAAW,KAChBvR,KAAKwR,aAAe,KAEpBxR,KAAKyR,oBACLzR,KAAK0R,oBACL1R,KAAK2R,kBACL3R,KAAK4R,oBAEL5R,KAAK6L,qBAAuB7L,KAAK8L,eAAezQ,KAAK2E,MACrDA,KAAK6R,cAAgB7R,KAAK8R,QAAQzW,KAAK2E,MACvCA,KAAK+R,wBAA0B/R,KAAKgS,kBAAkB3W,KAAK2E,MAE3DA,KAAKiS,iBAELjS,KAAKd,OA6db,OApdWuR,EAAAhV,UAAAyF,MAAP,WACIlB,KAAKkS,mBACLlS,KAAKkD,MAAK,IAGPuN,EAAAhV,UAAA4H,MAAP,SAAcjD,GACVJ,KAAKd,OACLc,KAAK2Q,SAAWvQ,EAAOuQ,UAAY,GACnC3Q,KAAK4Q,WAAaxQ,EAAOb,KAAQa,EAAOb,OAASrB,EAAAnC,YAAYoW,KAAO,OAAS,SAAY,GACzFnS,KAAKoS,UAGF3B,EAAAhV,UAAA0F,KAAP,WACInB,KAAKqS,qBACLrS,KAAKd,OACLc,KAAKoS,UAGF3B,EAAAhV,UAAAyH,KAAP,SAAaA,EAAeC,GACnBD,GAA0B,OAAlBlD,KAAKuR,SAGPrO,GAA0B,OAAlBlD,KAAKuR,WAEpBvR,KAAKsR,aAAenO,GAAwCnD,KAAKE,aAAaoS,cAC9EtS,KAAKuS,mBACLvS,KAAKoS,WANLpS,KAAKsR,aAAakB,YAAYxS,KAAKuR,UACnCvR,KAAKuR,SAAW,OAehBd,EAAAhV,UAAAwW,eAAR,WACIjS,KAAKE,aAAa4G,iBAAiB,iBAAkB9G,KAAK6L,sBAC1D7L,KAAKE,aAAa4G,iBAAiB,UAAW9G,KAAK6L,sBACnD7L,KAAKE,aAAa4G,iBAAiB,SAAU9G,KAAK6L,sBAClD7L,KAAKE,aAAa4G,iBAAiB,UAAW9G,KAAK6L,sBACnD7L,KAAKE,aAAa4G,iBAAiB,UAAW9G,KAAK6L,sBACnD7L,KAAKE,aAAa4G,iBAAiB,QAAS9G,KAAK6R,eAE7C7R,KAAKnB,OAAOyM,kBAAoBpN,EAAArC,WAAWiD,QAC3CkB,KAAKnB,OAAOiI,iBAAiB,wBAAyB9G,KAAK+R,0BAI3DtB,EAAAhV,UAAAyW,iBAAR,WACIlS,KAAKE,aAAa8G,oBAAoB,iBAAkBhH,KAAK6L,sBAC7D7L,KAAKE,aAAa8G,oBAAoB,UAAWhH,KAAK6L,sBACtD7L,KAAKE,aAAa8G,oBAAoB,SAAUhH,KAAK6L,sBACrD7L,KAAKE,aAAa8G,oBAAoB,UAAWhH,KAAK6L,sBACtD7L,KAAKE,aAAa8G,oBAAoB,UAAWhH,KAAK6L,sBACtD7L,KAAKE,aAAa8G,oBAAoB,QAAShH,KAAK6R,eAEhD7R,KAAKnB,OAAOyM,kBAAoBpN,EAAArC,WAAWiD,QAC3CkB,KAAKnB,OAAOmI,oBAAoB,wBAAyBhH,KAAK+R,0BAI9DtB,EAAAhV,UAAAyD,KAAR,WACIc,KAAK0Q,QAAU,iBAAmBL,EAAAhS,UAAUC,cAAiB0B,KAAKnB,OAAOP,aAAawC,OAAS,EAAM,MAAQd,KAAKnB,OAAOP,aAAgB,IACzI0B,KAAK2Q,SAAW,GAChB3Q,KAAK4Q,WAAa,GAClB5Q,KAAK6Q,cAAgB,GACrB7Q,KAAK8Q,aAAe,EACpB9Q,KAAKgN,SAAW,EAChBhN,KAAK+Q,OAAS,EACd/Q,KAAKyR,kBAAoB,GACzBzR,KAAK0R,kBAAoB,GACzB1R,KAAKgR,YAAc,EACnBhR,KAAKiR,YAAc,EACnBjR,KAAKkR,aAAe,EACpBlR,KAAK2R,gBAAkB,GACvB3R,KAAKmR,aAAe,EACpBnR,KAAK4R,kBAAoB,GACzB5R,KAAKoR,gBAAkB,EACvBpR,KAAKqR,iBAAmB,EAExBrR,KAAKyS,cAAgB,EACrBzS,KAAK0S,sBAAwB,GAGzBjC,EAAAhV,UAAAqQ,eAAR,SAAwBzM,GACpBW,KAAK6Q,cAAgBxR,EAAEE,KAER,mBAAXF,EAAEE,MAAwC,YAAXF,EAAEE,MACjCS,KAAK2S,sBAGM,YAAXtT,EAAEE,MAAsBS,KAAKnB,OAAOgO,WACpC7M,KAAKyS,eAAgB,IAAIG,MAAOzF,UAChCnN,KAAK0S,sBAAwB1S,KAAKE,aAAa0M,cAI/C6D,EAAAhV,UAAAqW,QAAR,SAAiBzS,GACbW,KAAK6Q,cAAgB,SACrB7Q,KAAKoS,SACLpS,KAAKqS,sBAGD5B,EAAAhV,UAAAuW,kBAAR,SAA2B3S,GACnBA,EAAE4O,YAAc/P,EAAAhC,UAAUsG,QAG9BxC,KAAKqR,gBAAkBhS,EAAEwT,aAGrBpC,EAAAhV,UAAAkX,oBAAR,eAAArR,EAAAtB,KAC8B,OAAtBA,KAAKwR,eAGTxR,KAAK8S,gBACL9S,KAAKwR,aAAeuB,YAAY,WAC5BzR,EAAKwR,iBAjNK,OAqNVrC,EAAAhV,UAAA4W,mBAAR,WAC8B,OAAtBrS,KAAKwR,eAGTwB,cAAchT,KAAKwR,cACnBxR,KAAKwR,aAAe,OAGhBf,EAAAhV,UAAAqX,cAAR,WACI,IAAInG,GAAO,IAAIiG,MAAOzF,UAEtBnN,KAAK4Q,WAAa5Q,KAAKnB,OAAOgO,SAAW,OAAS,SAClD7M,KAAK8Q,aAAe9Q,KAAKE,aAAa0M,YACtC5M,KAAKgN,SAAWhN,KAAKE,aAAa8M,SAE9BhN,KAAKyS,cAAgB,IACrBzS,KAAK+Q,QAAWpE,EAAO3M,KAAKyS,eAAiB,KAASzS,KAAK8Q,aAAe9Q,KAAK0S,wBAG/E1S,KAAKnB,OAAOyM,kBAAoBpN,EAAArC,WAAWiD,QAC3CkB,KAAKiT,oBAGTjT,KAAKoS,UAGD3B,EAAAhV,UAAAwX,kBAAR,WAEI,IAAIpD,EAA4B7P,KAAKnB,OAGjCqU,EAAerD,EAAYsD,cAAcjV,EAAAhC,UAAUsG,OAGnD0Q,GAAgBA,EAAaE,YAAYtS,OAAS,IAClDd,KAAKkR,aAAemC,KAAKC,IAAItT,KAAKkR,aAAcgC,EAAaE,YAAYF,EAAaE,YAAYtS,OAAS,GAAG6J,SAGlH3K,KAAKgR,YAAchR,KAAKuT,kBAAkBL,EAAclT,KAAKyR,iBAAkBzR,KAAKwT,kBAEpFxT,KAAKyT,sBAAsBP,GAG3B,IAAIQ,EAAe7D,EAAYsD,cAAcjV,EAAAhC,UAAUwG,OACvD1C,KAAKiR,YAAcjR,KAAKuT,kBAAkBG,EAAc1T,KAAK0R,iBAAkB1R,KAAK2T,kBAEpF3T,KAAK4T,sBAGDnD,EAAAhV,UAAA8X,kBAAR,SAA2BM,EAASC,EAAuBC,GACvD,IAAIC,EAAQ,EAQZ,OAPIH,GAAWA,EAAQI,YAAYnT,OAAS,IACxCkT,EAAQH,EAAQI,YAAYJ,EAAQI,YAAYnT,OAAS,GAAGkT,MAAQ,IACpEhU,KAAKkU,iBAAiBJ,EAAaE,IAEjB,OAAlBhU,KAAKuR,WACLwC,EAAMI,QAAQC,KAAOpU,KAAKkR,cAEvB8C,GAGHvD,EAAAhV,UAAAmY,mBAAR,WACI,IAAIS,EAAarU,KAAKnB,OAAO0O,wBAAwBrP,EAAAhC,UAAUsG,OAC/D,GAAmB,OAAf6R,EAAJ,CAIsB,OAAlBrU,KAAKuR,WAELvR,KAAKsU,kBAAkBH,QAAQC,KAAOC,EAAWrF,UAAUlO,OAAS,GAIxE,IAAIyT,EAAevU,KAAKnB,OAAO6O,kBAAkBxP,EAAAhC,UAAUsG,OAC3DxC,KAAKkU,iBAAiBlU,KAAK2R,eAAgB4C,GAG3C,IAAIC,EAAmBH,EAAWrF,UAAUuF,GAC5CvU,KAAKmR,aAAeqD,EAAQC,UAGxBhE,EAAAhV,UAAAgY,sBAAR,SAA+BI,GAE3B,GAAKA,GAAuC,IAA5BA,EAAQa,SAAS5T,OAAjC,CAIA,IAAIoJ,EAAU2J,EAAQa,SAASb,EAAQa,SAAS5T,OAAS,GACzD,GAA6B,MAAzBoJ,EAAQyK,aAAZ,CAGA,IAAIC,EAAe,IAAIhC,KAAK1I,EAAQ2K,WAEhCC,GADa,IAAIlC,KAAK1I,EAAQ6K,UACM5H,UAAYyH,EAAazH,WAAa,IAC1E6H,EAAgB9K,EAAQ+K,MAAMC,OAAO,SAAC7P,EAAG8P,GAAM,OAAA9P,EAAI8P,EAAEA,EAAE,IAAI,GAC/DnV,KAAKoR,gBAAkBiC,KAAK+B,MAAO,EAAIJ,EAAiBF,GAExD9U,KAAKkU,iBAAiBlU,KAAK4R,iBAAkB5R,KAAKoR,iBAC5B,OAAlBpR,KAAKuR,WACLvR,KAAKqV,qBAAqBlB,QAAQC,KAAOf,KAAKC,IAAItT,KAAKqV,qBAAqBlB,QAAQC,KAAMpU,KAAKoR,qBAI/FX,EAAAhV,UAAAyY,iBAAR,SAA0BpS,EAAkBhH,GACpCgH,EAAOhB,QA5TG,KA6TVgB,EAAOwT,QAEXxT,EAAOF,KAAK9G,IAGR2V,EAAAhV,UAAA2W,OAAR,WACSpS,KAAKuR,WAIVvR,KAAKuR,SAASgE,cAAc,4BAA4BC,UAAYxV,KAAK0Q,QAEjD,KAApB1Q,KAAK4Q,aACL5Q,KAAKuR,SAASgE,cAAc,0CAA0CC,UAAgC,SAApBxV,KAAK4Q,WAAwB,UAAY,aAG/H5Q,KAAKuR,SAASgE,cAAc,6BAA6BC,UAAYxV,KAAK2Q,SAC1E3Q,KAAKuR,SAASgE,cAAc,gCAAgCC,UAAYxV,KAAK4Q,WAC7E5Q,KAAKuR,SAASgE,cAAc,mCAAmCC,UAAYxV,KAAK6Q,cAChF7Q,KAAKuR,SAASgE,cAAc,kCAAkCC,UAAYxV,KAAK8Q,aAAa2E,QAAQ,GAAK,IACzGzV,KAAKuR,SAASgE,cAAc,oCAAoCC,UAAgC,SAApBxV,KAAK4Q,WAAyB5Q,KAAK+Q,OAAO0E,QAAQ,GAAK,IAAOzV,KAAK0V,eAAe1V,KAAKgN,UACnKhN,KAAKuR,SAASgE,cAAc,qCAAqCC,UAAYxV,KAAK2V,0BAClF3V,KAAKuR,SAASgE,cAAc,iCAAiCC,UAAYxV,KAAKgR,YAAYyE,QAAQ,GAAK,IACvGzV,KAAKuR,SAASgE,cAAc,iCAAiCC,UAAYxV,KAAKiR,YAAYwE,QAAQ,GAAK,IACvGzV,KAAKuR,SAASgE,cAAc,kCAAkCC,UAAYxV,KAAK4V,cAAc5V,KAAKmR,cAClGnR,KAAKuR,SAASgE,cAAc,qCAAqCC,UAAYxV,KAAK4V,cAAc5V,KAAKoR,iBAErGpR,KAAKwT,iBAAiB/I,QAClBoL,QAAS7V,KAAKyR,mBACfzR,KAAKwT,iBAAiBW,SAEzBnU,KAAK2T,iBAAiBlJ,QAClBoL,QAAS7V,KAAK0R,mBACf1R,KAAK2T,iBAAiBQ,SAEzBnU,KAAKsU,kBAAkB7J,QACnBoL,QAAS7V,KAAK2R,iBACf3R,KAAKsU,kBAAkBH,SAE1BnU,KAAKqV,qBAAqB5K,QACtBoL,QAAS7V,KAAK4R,mBACf5R,KAAKqV,qBAAqBlB,SAG7BnU,KAAKuR,SAASuE,MAAMC,WAAa,YAG7BtF,EAAAhV,UAAAia,eAAR,SAAwB1I,GACpB,IAAIpR,EAAIoR,EAASyI,QAAQ,GAAK,IAC9B,OAAIzI,EAAW,GACJpR,GAEXA,GAAK,KACDoR,EAAW,OACXpR,GAAKyX,KAAK2C,MAAMhJ,EAAW,MAAQ,KAEnCA,EAAW,KACXpR,GAAKyX,KAAK2C,MAAMhJ,EAAW,KAAO,IAAM,KAE5CpR,IAAMoR,EAAW,IAAIyI,QAAQ,GAAK,OAI9BhF,EAAAhV,UAAAma,cAAR,SAAuBnB,GACnB,IAAIwB,EAAgB5C,KAAK+B,MAAMX,EAAU,KACzC,OAAIwB,EAAgB,KACRA,EAAgB,KAAMR,QAAQ,GAAK,OAExCQ,EAAgB,QAGnBxF,EAAAhV,UAAAka,wBAAR,WACI,IAA8B,IAA1B3V,KAAKqR,gBACL,MAAO,GAGX,IAAIgD,EAAarU,KAAKnB,OAAO0O,wBAAwBrP,EAAAhC,UAAUsG,OAC/D,GAAmB,OAAf6R,EACA,MAAO,GAGX,IAAIG,EAAmBH,EAAWrF,UAAUhP,KAAKqR,iBAC7C6E,EAAelW,KAAK4V,cAAcpB,EAAQC,SAK9C,OAJID,EAAQ2B,OAAS3B,EAAQ4B,SACzBF,GAAgB,MAAQ1B,EAAQ2B,MAAQ,IAAM3B,EAAQ4B,QAE1DF,GAAgB,MAAQlW,KAAKqR,gBAAkB,GAAK,IAAMgD,EAAWrF,UAAUlO,OAAS,KAIpF2P,EAAAhV,UAAA4a,aAAR,WACI,IAAIC,EAAO3S,SAAS4S,cAAc,UAClCD,EAAK/H,IAAM,qEACX+H,EAAK/W,KAAO,kBACZ+W,EAAK5M,OAAS1J,KAAKwW,UAAUnb,KAAK2E,MAClC2D,SAAS8S,qBAAqB,QAAQ,GAAGC,YAAYJ,IAGjD7F,EAAAhV,UAAA+a,UAAR,WAEIxW,KAAK2W,UAAU,yBAA0BpG,GAGzCvQ,KAAKuR,SAAW5N,SAAS4S,cAAc,OACvCvW,KAAKuR,SAASuE,MAAMC,WAAa,SACjC/V,KAAKuR,SAASlJ,GAAK,kBACnBrI,KAAKuR,SAASiE,UAAYlF,EAG1BtQ,KAAKsR,aAAaoF,YAAY1W,KAAKuR,UAGnC,IAAIqF,GACAxC,KAAMpU,KAAKkR,aACX2F,IAAK,EACLC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,cACIC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GAETC,OACIC,UAAU,EACVC,WAAW,EACXjP,OAAQ,GAEZkP,OACIF,UAAU,EACVC,WAAW,EACXjP,OAAQ,GAEZmP,WAAYre,OAAOkX,SAASoH,cAAcC,QAG9C7X,KAAKwT,iBAAmB,IAAIla,OAAOkX,SAASsH,KAAK,uCAC7CjC,QAAS7V,KAAKyR,mBACfmF,GAEH5W,KAAK2T,iBAAmB,IAAIra,OAAOkX,SAASsH,KAAK,uCAC7CjC,QAAS7V,KAAKyR,mBACfmF,GAGH5W,KAAKsU,kBAAoB,IAAIhb,OAAOkX,SAASsH,KAAK,wCAC9CjC,QAAS7V,KAAK2R,kBAEdkF,IAAK,EACLC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,cACIC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GAETC,OACIC,UAAU,EACVC,WAAW,EACXjP,OAAQ,GAEZkP,OACIF,UAAU,EACVC,WAAW,EACXjP,OAAQ,GAEZmP,WAAYre,OAAOkX,SAASoH,cAAcG,SAI9C/X,KAAKqV,qBAAuB,IAAI/b,OAAOkX,SAASsH,KAAK,2CACjDjC,QAAS7V,KAAK4R,oBAEdiF,IAAK,EACLC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,cACIC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GAETC,OACIC,UAAU,EACVC,WAAW,EACXjP,OAAQ,GAEZkP,OACIF,UAAU,EACVC,WAAW,EACXjP,OAAQ,GAEZmP,WAAYre,OAAOkX,SAASoH,cAAcI,YAI1CvH,EAAAhV,UAAA8W,iBAAR,WACSjZ,OAAOkX,SAASoH,cAGjB5X,KAAKwW,YAFLxW,KAAKqW,gBAML5F,EAAAhV,UAAAkb,UAAR,SAAmBtO,EAAYkI,GAC3B,IAAI0H,EAAOjY,KAAKkY,iBAGZpC,EAAQmC,EAAK1C,cAAc,IAAMlN,GACjCyN,KAIJA,EAAQnS,SAAS4S,cAAc,UACzBlO,GAAKA,EACXyN,EAAMN,UAAYjF,EAClB0H,EAAKvB,YAAYZ,KAGbrF,EAAAhV,UAAAyc,eAAR,WAEI,IAAIC,EAAWxU,SAAS8S,qBAAqB,QAC7C,GAAI0B,EAASrX,OAAS,EAClB,OAAOqX,EAAS,GAIpB,IAAIF,EAAOtU,SAAS4S,cAAc,QAElC,OADA5S,SAASyU,KAAK1B,YAAYuB,GACnBA,GAMfxH,EAviBA,GAAaxX,EAAAwX,4FCjBb9W,EAAA,OAGA0e,EAAA1e,EAAA,IAEA+G,EAAA,WAsBI,SAAAA,EAAa7B,EAAiBL,GAC1BwB,KAAKnB,OAASA,EACdmB,KAAKiH,OAAQ,EACbjH,KAAKsY,SAAU,EACftY,KAAKuY,qBAAuBvY,KAAKwY,aAAand,KAAK2E,MACnD1G,OAAOwN,iBAAiB,UAAW9G,KAAKuY,sBACxCvY,KAAKyY,WAAa,IAAIJ,EAAA5H,WAAW5R,EAAQL,GA6CjD,OA1CWkC,EAAAjF,UAAAyF,MAAP,WACIlB,KAAKyY,WAAWvX,SAGbR,EAAAjF,UAAA4H,MAAP,SAAcjD,GACVJ,KAAKyY,WAAWpV,MAAMjD,IAGnBM,EAAAjF,UAAA0F,KAAP,WACInB,KAAKyY,WAAWtX,QAGbT,EAAAjF,UAAA2H,eAAP,SAAuBF,EAAeC,GAClCnD,KAAKyY,WAAWvV,KAAKA,EAAMC,IASvBzC,EAAAjF,UAAA+c,aAAR,SAAsBnZ,GASlB,IANkB,IAAbA,EAAEqZ,SAAmC,IAAdrZ,EAAEsZ,UAAqC,IAAftZ,EAAEuZ,UAAqC,KAAdvZ,EAAEwZ,UAC3E7Y,KAAKiH,OAASjH,KAAKiH,MACnBjH,KAAKyY,WAAWvV,KAAKlD,KAAKiH,SAIZ,IAAb5H,EAAEqZ,SAAmC,IAAdrZ,EAAEsZ,UAAqC,IAAftZ,EAAEuZ,UAAqC,KAAdvZ,EAAEwZ,QAAiB,CAC5F7Y,KAAKsY,SAAWtY,KAAKsY,QACrB7W,QAAQC,IAAI,uBAAyB1B,KAAKsY,QAAU,KAAO,QAC3D,IAAIQ,EAAgB9Y,KAAKnB,OAAOP,aAChCmD,QAAQC,IAA8E,MAAQoX,GAC9F9Y,KAAKnB,OAAO+B,WAAWZ,KAAKsY,WAMxC5X,EAzEA,GAAazH,EAAAyH,iGCJb,IAAAF,EAAA,oBAAAA,IASYR,KAAAiC,MAAgB,EAGhBjC,KAAA+Y,eAAyB,EAyLrC,OApKWvY,EAAA/E,UAAAyD,KAAP,SAAagB,GACTF,KAAKE,aAAeA,EACpBF,KAAKgZ,OAAS,KACdhZ,KAAKiZ,YAAc,KACnBjZ,KAAKkZ,iBAAmBlZ,KAAKgM,SAAS3Q,KAAK2E,OAGxCQ,EAAA/E,UAAAyF,MAAP,WACIlB,KAAKmZ,gBAGDnZ,KAAKgZ,SACLhZ,KAAKE,aAAa8Y,OAAShZ,KAAKgZ,OAChChZ,KAAKgZ,OAAS,OAIfxY,EAAA/E,UAAAyG,SAAP,SAAiBD,GAKb,GAAIA,GAAS,GAAKA,GAAS,EACvB,MAAM,IAAIxC,MAAM,gCAAkCwC,EAAQ,mCAI9D,GAAImX,MAAMpZ,KAAKE,aAAa8M,UACxB,MAAM,IAAIvN,MAAM,oEAGpBO,KAAKiC,MAAQA,EAKe,IAAxBjC,KAAK+Y,gBAAuC,IAAf/Y,KAAKiC,OAAoC,OAArBjC,KAAKiZ,aACtDjZ,KAAKqZ,cAIN7Y,EAAA/E,UAAA2G,SAAP,WACI,OAA+B,IAAxBpC,KAAK+Y,eAAuB/Y,KAAKE,aAAaoZ,aAAetZ,KAAK+Y,gBAQrEvY,EAAA/E,UAAA4d,WAAR,WAE2C,IAAnCrZ,KAAKE,aAAaoZ,cAA8C,IAAxBtZ,KAAK+Y,gBAAuC,IAAf/Y,KAAKiC,QAC1EjC,KAAKgZ,OAAShZ,KAAKE,aAAa8Y,OAEhChZ,KAAKE,aAAa8Y,OAAS,GAI3B3F,KAAKkG,IAAIvZ,KAAKiC,QAAU,GAA6B,IAAxBjC,KAAK+Y,gBAElC/Y,KAAKmZ,iBAILnZ,KAAKiC,QAAU,GAAKjC,KAAKiC,MAAQ,KACL,IAAxBjC,KAAK+Y,eAML/Y,KAAKwZ,eAAexZ,KAAKiC,OAClBjC,KAAK+Y,iBAAmB/Y,KAAKiC,QAGpCjC,KAAK+Y,eAAiB/Y,KAAKiC,QAK/BjC,KAAKiC,MAAQ,GAAKjC,KAAKiC,OAAS,IAChCjC,KAAKE,aAAaoZ,aAAetZ,KAAKiC,MAElCjC,KAAKE,aAAauZ,SAElBzZ,KAAKiZ,YAAcjZ,KAAKE,aAAasM,OAAOrN,KAAKa,KAAK0Z,OAAOre,KAAK2E,UAKtEQ,EAAA/E,UAAA+d,eAAR,SAAwBvX,GAGpBjC,KAAK+Y,eAAiB9W,EAGtBjC,KAAKE,aAAauM,QAClBzM,KAAKE,aAAaoZ,aAAe,EAGjCtZ,KAAKE,aAAa4G,iBAAiB,SAAU9G,KAAKkZ,kBAGlDlZ,KAAK0M,QAGDlM,EAAA/E,UAAA0d,cAAR,WAIInZ,KAAKE,aAAa8G,oBAAoB,SAAUhH,KAAKkZ,kBAGrDS,aAAa3Z,KAAK4Z,aAElB5Z,KAAK+Y,eAAiB,GAGlBvY,EAAA/E,UAAAiR,KAAR,WACI1M,KAAK6Z,UAAW,IAAIjH,MAAOzF,UAC3B,IAAI2M,EAAU9Z,KAAKE,aAAa0M,YAAc5M,KAAK+Y,eAEnD/Y,KAAKE,aAAa0M,YAAcyG,KAAK0G,IAAI1G,KAAKC,IAAIwG,EAAS,GAAI9Z,KAAKE,aAAa8M,WAG7ExM,EAAA/E,UAAAuQ,SAAR,eAAA1K,EAAAtB,KAIIA,KAAKE,aAAauM,QAElB,IACIuN,GADO,IAAIpH,MAAOzF,UACGnN,KAAK6Z,SAG9B7Z,KAAKqZ,aAGuB,IAAxBrZ,KAAK+Y,gBACL/Y,KAAKE,aAAa0M,YAAc,GAChC5M,KAAKE,aAAa0M,YAAc5M,KAAKE,aAAa8M,WAClDhN,KAAK4Z,YAAcK,WAAW,WAC1B3Y,EAAKoL,QACN2G,KAAKC,IAAK,IAAO0G,EAAc,MAIlCxZ,EAAA/E,UAAAie,OAAR,WAGI1Z,KAAKiZ,YAAc,KAEnBjZ,KAAKqZ,aAGkC,IAAnCrZ,KAAKE,aAAaoZ,cAAsBtZ,KAAKgZ,SAE7ChZ,KAAKE,aAAa8Y,OAAShZ,KAAKgZ,OAChChZ,KAAKgZ,OAAS,OAK1BxY,EArMA,GAAavH,EAAAuH,yCCDbtH,EAAAD,QAAAO,iFCCA,IAAA0E,EAAAvE,EAAA,GAGAugB,EAAAvgB,EAAA,IAKAqJ,EAAA,oBAAAA,KAmKA,OAvIWA,EAAAvH,UAAA0e,QAAP,WACI,OAAOjc,EAAAlC,WAAW6G,SAGfG,EAAAvH,UAAA6C,WAAP,WAEI,OADA0B,KAAKoa,mBACE,gBAAkBpa,KAAKqa,UAAU/b,cAGrC0E,EAAAvH,UAAAyD,KAAP,SAAaL,EAAiBqB,EAAgCV,GAE1D,IAAKA,EAAwB,gBACzB,MAAM,IAAIC,MAAM,oFAGpBO,KAAKsa,0BAA2B,EAC5B9a,EAAiC,2BACjCQ,KAAKsa,yBAA2B9a,EAAiC,0BAGrEQ,KAAKE,aAAeA,EACpBF,KAAKnB,OAASA,EACdmB,KAAKua,gBAAkB/a,EAAwB,gBAC/CQ,KAAKqa,UAAY,IAAIH,EAAAM,UACrBxa,KAAKqa,UAAUnb,KAAKc,KAAKE,aAAcF,KAAKua,gBAAiBva,KAAKsa,0BAClEta,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWC,MAAO1a,KAAKkM,QAAQ7Q,KAAK2E,OACpEA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWE,MAAO3a,KAAK4a,QAAQvf,KAAK2E,OACpEA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWI,IAAK7a,KAAK8a,MAAMzf,KAAK2E,OAChEA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWM,YAAa/a,KAAKgb,aAAa3f,KAAK2E,OAC/EA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWQ,eAAgBjb,KAAKkb,gBAAgB7f,KAAK2E,OACrFA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWU,KAAMnb,KAAK0Z,OAAOre,KAAK2E,OAClEA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWW,MAAOpb,KAAK8R,QAAQzW,KAAK2E,OACpEA,KAAKqa,UAAUvT,iBAAiBoT,EAAAO,WAAWY,MAAOrb,KAAKsb,QAAQjgB,KAAK2E,QAGjEgD,EAAAvH,UAAAmF,WAAP,SAAmBC,GACfb,KAAKqa,UAAUzZ,WAAWC,IAGvBmC,EAAAvH,UAAAyF,MAAP,WACIlB,KAAKoa,mBACLpa,KAAKqa,UAAUkB,WASZvY,EAAAvH,UAAA2F,KAAP,SAAahB,GAAb,IAAAkB,EAAAtB,KAEI,OADAA,KAAKoa,mBACE,IAAI1b,QAAa,SAACC,EAASC,GAC9B0C,EAAK+Y,UAAUjZ,KAAKhB,GACnBjB,KAAK,SAACqc,GACH7c,EAAQ6c,EAAM,UAAY,MAE7Bpc,MAAM,SAACC,GACJV,SAKLqE,EAAAvH,UAAA0F,KAAP,WACInB,KAAKoa,mBACLpa,KAAKqa,UAAUnZ,QACflB,KAAKE,aAAa4V,MAAM2F,QAAU,QAClCzb,KAAKua,gBAAgBzE,MAAM2F,QAAU,QASjCzY,EAAAvH,UAAA2e,iBAAR,WACI,IAAKpa,KAAKqa,UACN,MAAM,IAAI5a,MAAM,wCAIhBuD,EAAAvH,UAAAyQ,QAAR,SAAiB7M,GACb,IAAIwE,GACAN,KAAMlE,EAAEoE,KAAKF,KACbO,QAAUzE,EAAEoE,KAAKK,QACjBN,WAAY,GACZC,KAAMpE,EAAEoE,KAAKA,MAEjBzD,KAAK0b,UAAUxd,EAAA7B,aAAasf,SAAU9X,IAGlCb,EAAAvH,UAAAmf,QAAR,SAAiBvb,GACbW,KAAK0b,UAAUxd,EAAA7B,aAAauf,SAAUvc,EAAEoE,MACxCzD,KAAKE,aAAa4V,MAAM2F,QAAU,OAClCzb,KAAKua,gBAAgBzE,MAAM2F,QAAU,SAGjCzY,EAAAvH,UAAAqf,MAAR,SAAezb,GACXW,KAAKE,aAAa4V,MAAM2F,QAAU,QAClCzb,KAAKua,gBAAgBzE,MAAM2F,QAAU,OACrCzb,KAAK0b,UAAUxd,EAAA7B,aAAawf,SAGxB7Y,EAAAvH,UAAAuf,aAAR,SAAsB3b,GAClBoC,QAAQC,IAAI,eAAiBrC,EAAEE,KAAO,MAAQF,EAAEoE,KAAKlE,OAGjDyD,EAAAvH,UAAAyf,gBAAR,SAAyB7b,GACrBoC,QAAQC,IAAI,eAAiBrC,EAAEE,KAAO,MAAQF,EAAEoE,KAAKlE,OAGjDyD,EAAAvH,UAAAie,OAAR,SAAgBra,GACZoC,QAAQC,IAAI,eAAiBrC,EAAEE,OAG3ByD,EAAAvH,UAAAqW,QAAR,SAAiBzS,GACboC,QAAQC,IAAI,eAAiBrC,EAAEE,OAG3ByD,EAAAvH,UAAA6f,QAAR,SAAiBjc,GACboC,QAAQC,IAAI,eAAiBrC,EAAEE,OAM3ByD,EAAAvH,UAAAigB,UAAR,SAAmBI,EAAyBrY,GACxC,IAAIC,EAAQC,SAASC,YAAY,eACjCF,EAAMK,gBAAgB+X,GAAW,GAAO,EAAOrY,GAC/CzD,KAAKE,aAAa+D,cAAcP,IAKxCV,EAnKA,GAAa/J,EAAA+J,2BCTb9J,EAAAD,QAAAQ,iFCCA,IAAAyE,EAAAvE,EAAA,GAEAoiB,EAAApiB,EAAA,IAEMqiB,GACF5hB,KAAM,iBACN6hB,cAAe,GACfjR,UAAW,gCACXnK,QAAQ,EACRqb,YAAa,GACbC,UAAW,qBACXC,UAAW,SACXC,YAAa,KAOjBvZ,EAAA,oBAAAA,KAkFA,OAlEWA,EAAArH,UAAA0e,QAAP,WACI,OAAOjc,EAAAlC,WAAW6G,SAGfC,EAAArH,UAAA6C,WAAP,WAEI,OADA0B,KAAKoa,mBACE,mBAAqBpa,KAAKsc,aAAahe,cAG3CwE,EAAArH,UAAAyD,KAAP,SAAaL,EAAiBqB,EAAgCV,GAG1D,IAAI4E,EAAW4X,EACf,IAAK,IAAI5gB,KAAOoE,EAAQ4E,EAAShJ,GAAOoE,EAAOpE,GAE/C4E,KAAKsc,aAAe,IAAIP,EAAa3X,GACrCpE,KAAKsc,aAAapd,KAAKL,EAAQqB,IAG5B4C,EAAArH,UAAAmF,WAAP,SAAmBC,KAIZiC,EAAArH,UAAAyF,MAAP,WACIlB,KAAKoa,mBACLpa,KAAKsc,aAAaf,WAafzY,EAAArH,UAAA2F,KAAP,SAAahB,GAAb,IAAAkB,EAAAtB,KACI,OAAO,IAAItB,QAAa,SAACC,EAASC,GAC9B0C,EAAKgb,aAAalb,KAAKhB,GACvBzB,OAODmE,EAAArH,UAAA0F,KAAP,WACInB,KAAKsc,aAAapb,SASd4B,EAAArH,UAAA2e,iBAAR,WACI,IAAKpa,KAAKsc,aACN,MAAM,IAAI7c,MAAM,mCAM5BqD,EAlFA,GAAa7J,EAAA6J,ocCnBb,IAAAoI,EAAAvR,EAAA,GACAuE,EAAAvE,EAAA,GACA+F,EAAA/F,EAAA,GACA4iB,EAAA5iB,EAAA,GACA6iB,EAAA7iB,EAAA,GAIMqiB,GACFS,KACItK,MACIuK,UAAW,GACXC,iBAAkB,GAClBC,uBAAwB,GACxBC,+BAAgC,GAChCC,mBAAmB,EACnBC,yBAAyB,KAK/BC,GACFxe,MAASN,EAAAhC,UAAUsG,MACnBya,MAAS/e,EAAAhC,UAAUwG,MACnBwa,KAAQhf,EAAAhC,UAAUyG,KAClBwa,eAAkBjf,EAAAhC,UAAUyG,KAC5Bya,aAAgBlf,EAAAhC,UAAUyG,MAM9B5D,EAAA,SAAAqM,GA4BI,SAAArM,IAAA,IAAAuC,EACI8J,EAAApR,KAAAgG,OAAOA,YArBHsB,EAAA+b,mBAGA/b,EAAAgc,iBAmBJhc,EAAKuO,YAAc2M,EAAAe,QAAOxN,cAAc5U,SACxCmG,EAAKuO,YAAYC,GAAG0M,EAAAe,QAAOxN,YAAYC,OAAO0K,MAAOpZ,EAAK4K,QAAS5K,GACnEA,EAAKuO,YAAYC,GAAG0M,EAAAe,QAAOxN,YAAYC,OAAOwN,iBAAkBlc,EAAKmc,kBAAmBnc,GACxFA,EAAKuO,YAAYC,GAAG0M,EAAAe,QAAOxN,YAAYC,OAAO0N,iBAAkBpc,EAAKqc,kBAAmBrc,GACxFA,EAAKuO,YAAYC,GAAG0M,EAAAe,QAAOxN,YAAYC,OAAO4N,iBAAkBtc,EAAKuc,kBAAmBvc,GAExFA,EAAKwc,eAAiB,IAAIvB,EAAA3M,eAC1BtO,EAAKwc,eAAe5e,KAAKoC,EAAKuO,aAE9BvO,EAAKyc,uBA2jBb,OAlmBkC1S,EAAAtM,EAAAqM,GAiDvBrM,EAAAtD,UAAA6C,WAAP,WAEI,OADA0B,KAAKoa,mBACE,WAAapa,KAAK6P,YAAYvR,cAGlCS,EAAAtD,UAAA6P,cAAP,WACI,OAAOpN,EAAArC,WAAWiD,QAGfC,EAAAtD,UAAAyD,KAAP,SAAagB,EAA2BzB,GA0BpC,OAzBAuB,KAAKoa,mBACLhP,EAAA3P,UAAMyD,KAAIlF,KAAAgG,KAACE,EAAczB,GAGzBuB,KAAK6P,YAAYmO,WAAWhe,KAAKE,kBAAc4E,GAAW,GAGtDrG,EACAuB,KAAK6P,YAAYoO,uBAAuBxf,IAExCA,EAAmBkF,SAAS4S,cAAc,OACtCvW,KAAKE,aAAage,aAClBle,KAAKE,aAAage,WAAWxH,YAAYjY,GACzCuB,KAAK6P,YAAYoO,uBAAuBxf,KAKhDuB,KAAK6P,YAAY9O,gCAA+B,GAGhDf,KAAK6P,YAAYsO,0BAAyB,GAE1Cne,KAAK6P,YAAYuO,sBAAqB,GAE/B1f,QAAQC,WAGZI,EAAAtD,UAAA0Q,UAAP,SAAkBC,GAGd,IAAK,IAAIhR,KAFT4E,KAAKoa,mBAEWhO,EACZpM,KAAKqd,gBAAgBjiB,GAAOgR,EAAOhR,GAEvC4E,KAAKqe,cAAcjS,IAGhBrN,EAAAtD,UAAAmF,WAAP,SAAmBC,GACfuK,EAAA3P,UAAMmF,WAAU5G,KAAAgG,KAACa,GACjBb,KAAKoa,mBACLpa,KAAK6P,YAAYyO,WAAWC,uBAAuB1d,IAGhD9B,EAAAtD,UAAAqL,iBAAP,SAAyBvH,EAAc+M,EAAeC,GAClDvM,KAAKoa,mBACLpa,KAAK6P,YAAYC,GAAGvQ,EAAM+M,EAAUC,IAGjCxN,EAAAtD,UAAAuL,oBAAP,SAA4BzH,EAAc+M,EAAeC,GACrDvM,KAAKoa,mBACLpa,KAAK6P,YAAY2O,IAAIjf,EAAM+M,EAAUC,IAGlCxN,EAAAtD,UAAAyF,MAAP,WACIkK,EAAA3P,UAAMyF,MAAKlH,KAAAgG,MACXA,KAAKoa,mBACLpa,KAAK6P,YAAY3O,SAGdnC,EAAAtD,UAAA0X,cAAP,SAAsB5T,GAElB,OADAS,KAAKoa,mBACEpa,KAAK6P,YAAYsD,cAAcnT,KAAKma,QAAQ5a,KAShDR,EAAAtD,UAAA+Q,KAAP,WAGI,OAFAxM,KAAKoa,mBACLpa,KAAK6P,YAAYrD,OACV9N,QAAQC,WAGZI,EAAAtD,UAAAgR,MAAP,WACIzM,KAAKoa,mBACLpa,KAAK6P,YAAYpD,SAGd1N,EAAAtD,UAAAiR,KAAP,SAAaC,GACT3M,KAAKoa,mBACLpa,KAAK6P,YAAYnD,KAAKC,IAGnB5N,EAAAtD,UAAA0F,KAAP,SAAaD,EAAcmB,QAAd,IAAAnB,OAAA,GACTkK,EAAA3P,UAAM0F,KAAInH,KAAAgG,KAACkB,EAAOmB,GAClBrC,KAAKoa,mBACDlZ,GAASlB,KAAK6P,YAAY4O,YAC1Bze,KAAK6P,YAAY6O,aAAa,OAE9B1e,KAAKyM,QACLzM,KAAK0M,KAAK,KAUX3N,EAAAtD,UAAAsR,YAAP,WAEI,OADA/M,KAAKoa,mBACApa,KAAK6P,YAAY8O,UAGf3e,KAAK6P,YAAY7C,WAFb,GAKRjO,EAAAtD,UAAAoR,OAAP,WAEI,OADA7M,KAAKoa,mBACEpa,KAAK6P,YAAY4O,aAGrB1f,EAAAtD,UAAA0R,QAAP,WAEI,OADAnN,KAAKoa,mBACApa,KAAK6P,YAAY8O,UAGf3e,KAAK6P,YAAYlD,UAAK7H,GAFlB,GAWR/F,EAAAtD,UAAAgH,iBAAP,SAAyBlD,GACrBS,KAAKoa,mBAML,IAJA,IAAIzL,KACAV,EAAYjO,KAAKma,QAAQ5a,GACzBqf,EAAgB5e,KAAK6P,YAAYgP,mBAAmB5Q,GACpD1L,EAASvC,KAAK6P,YAAYiP,aAAa7Q,GAClCpU,EAAI,EAAGA,EAAI0I,EAAOzB,OAAQjH,IAC/B8U,EAAW/M,KAAK5B,KAAK+e,qBAAqBxc,EAAO1I,GAAI8U,EAAW7N,OAAQyB,EAAO1I,KAAO+kB,IAG1F,OAAOjQ,GAGJ5P,EAAAtD,UAAA8R,wBAAP,SAAgChO,GAC5BS,KAAKoa,mBAGL,IADA,IAAI4E,EAAahf,KAAKyC,iBAAiBlD,GAC9B1F,EAAI,EAAGA,EAAImlB,EAAWle,OAAQjH,IACnC,GAAImlB,EAAWnlB,GAAGgV,SACd,OAAOmQ,EAAWnlB,GAG1B,OAAO,MAGJkF,EAAAtD,UAAAiS,kBAAP,SAA0BnO,GAEtB,OADAS,KAAKoa,mBACEpa,KAAK6P,YAAYoP,cAAcjf,KAAKma,QAAQ5a,KAGhDR,EAAAtD,UAAAkS,sBAAP,SAA8BpO,GAE1B,OADAS,KAAKoa,mBACEpa,KAAK6P,YAAYqP,gBAAgBlf,KAAKma,QAAQ5a,KAGlDR,EAAAtD,UAAAmS,mBAAP,SAA2BrO,EAAiB8I,GACxCrI,KAAKoa,mBAEL,IAAInM,EAAYjO,KAAKma,QAAQ5a,GACzBgD,EAASvC,KAAK6P,YAAYiP,aAAa7Q,GAC3C,GAAK1L,GAA4B,IAAlBA,EAAOzB,OAAtB,CAGA,IAAIkN,EAASzL,EAAO4c,OAAO,SAACC,EAAWC,GACnC,YAAyBva,IAAjBsa,EAAU/W,GAAqBgX,IAAQC,SAASjX,EAAI,IAAQ+W,EAAU/W,KAAOA,IACrF,GAEJrI,KAAKkE,qBAAqB3E,EAAMyO,EAAM7J,MACtCnE,KAAK6P,YAAY0P,gBAAgBvR,KAG9BjP,EAAAtD,UAAAsS,YAAP,SAAoBC,GAChBhO,KAAK4N,mBAAmBI,EAAMC,UAAWD,EAAM3F,KAG5CtJ,EAAAtD,UAAAsJ,wBAAP,SAAgCZ,GAC5BnE,KAAKoa,mBACLpa,KAAKsd,cAAoB,KAAInZ,GAG1BpF,EAAAtD,UAAAuJ,uBAAP,SAA+Bb,GAC3BnE,KAAKoa,mBACLpa,KAAK6P,YAAY2P,uBAAuBrb,IAGrCpF,EAAAtD,UAAAyS,WAAP,SAAmBrN,GACfb,KAAKoa,mBACLpa,KAAK0E,eAAe7D,GACpBb,KAAK6P,YAAY3B,WAAWrN,IAGzB9B,EAAAtD,UAAA2S,cAAP,WAEI,OADApO,KAAKoa,mBACEpa,KAAK6P,YAAYzB,iBAGrBrP,EAAAtD,UAAAwJ,sBAAP,SAA8BpE,GAC1Bb,KAAKoa,mBACLpa,KAAK6P,YAAY4P,sBAAsB5e,IAYjC9B,EAAAtD,UAAA+F,WAAV,SAAsBpB,GA2BlB,OAzBAgL,EAAA3P,UAAM+F,WAAUxH,KAAAgG,KAACI,GACjBJ,KAAKoa,mBAEDha,EAAOkO,UACPtO,KAAK6P,YAAY6P,kBAAkBtf,EAAOkO,UAG9CtO,KAAK2f,cAAgB,KAErB3f,KAAK6P,YAAYC,GAAG0M,EAAAe,QAAOxN,YAAYC,OAAO4P,mBAAoB5f,KAAK6f,oBAAqB7f,MAG5FA,KAAKqe,cAAcre,KAAKqd,iBAGpBjd,EAAOuQ,UAAYvQ,EAAOb,MACtByc,EAAiB5b,EAAOuQ,WAAaqL,EAAiB5b,EAAOuQ,UAAUvQ,EAAOb,OAC9ES,KAAKqe,cAAcrC,EAAiB5b,EAAOuQ,UAAUvQ,EAAOb,OAIpES,KAAK6P,YAAY6O,aAAate,EAAO+I,KAGrCnJ,KAAK6P,YAAYiQ,2BAA2B,QAAS9f,KAAKsd,eACnD5e,QAAQC,WAGTI,EAAAtD,UAAAgT,qBAAV,SAAgCC,GAC5B,IAAc,IAAVA,EAAgB,CAEhB,IAAIqR,EAAY/f,KAAKuN,wBAAwBrP,EAAAhC,UAAUsG,OACnDwd,EAAYhgB,KAAKuN,wBAAwBrP,EAAAhC,UAAUwG,OACvD1C,KAAK6P,YAAYoQ,wBAAwB,QAAS5M,KAAK2C,MAAM+J,EAAU/Q,UAAU,GAAGyF,QAAU,KAAQ,GACtGzU,KAAK6P,YAAYoQ,wBAAwB,QAAS5M,KAAK2C,MAAMgK,EAAUhR,UAAU,GAAGyF,QAAU,KAAQ,QAGtGzU,KAAK6P,YAAYoQ,wBAAwB,QAASC,KAClDlgB,KAAK6P,YAAYoQ,wBAAwB,QAASC,MASlDnhB,EAAAtD,UAAA2e,iBAAR,WACI,IAAKpa,KAAK6P,YACN,KArWgC,kCAyWhC9Q,EAAAtD,UAAAsiB,mBAAR,WACI/d,KAAKqd,gBAA2B,UAAIrd,KAAK6P,YAAYsQ,eACrDngB,KAAKqd,gBAAkC,iBAAIrd,KAAK6P,YAAYuQ,sBAC5DpgB,KAAKqd,gBAAwC,uBAAIrd,KAAK6P,YAAYwQ,4BAClErgB,KAAKqd,gBAAgD,+BAAIrd,KAAK6P,YAAYyQ,oCAC1EtgB,KAAKqd,gBAAmC,kBAAIrd,KAAK6P,YAAY0Q,wBAGzDxhB,EAAAtD,UAAA4iB,cAAR,SAAuBja,GACfA,EAASsY,WACT1c,KAAK6P,YAAY2Q,aAAapc,EAASsY,WAEvCtY,EAASuY,kBACT3c,KAAK6P,YAAY4Q,oBAAoBrc,EAASuY,kBAE9CvY,EAASwY,wBACT5c,KAAK6P,YAAY6Q,0BAA0Btc,EAASwY,wBAEpDxY,EAASyY,gCACT7c,KAAK6P,YAAY8Q,kCAAkCvc,EAASyY,gCAE5DzY,EAAS0Y,mBACT9c,KAAK6P,YAAYuO,qBAAqBha,EAAS0Y,mBAE/C1Y,EAAS2Y,yBACT/c,KAAK6P,YAAYkN,wBAAwB3Y,EAAS2Y,yBAElD3Y,EAASwc,iBACT5gB,KAAK6P,YAAYgR,wBAAwB,QAASzc,EAASwc,kBAI3D7hB,EAAAtD,UAAAsjB,qBAAR,SAA8BK,EAA6B0B,EAAejS,GACtE,IAAID,GACAX,UAAW+O,EAA4BoC,EAAU7f,MACjD8I,QAAsBvD,IAAjBsa,EAAU/W,GAAoB+W,EAAU/W,GAAKyY,EAAMC,WACxDlS,SAAUA,EACVC,MAAOsQ,EAAUtQ,MACjBC,SAAUqQ,EAAUrQ,SACpB5K,KAAMib,EAAUjb,KAChB6K,UAAWoQ,EAAU4B,YAAYC,IAAI,SAAUC,GAC3C,OACIzM,QAASyM,EAAKC,UACdhL,MAAO+K,EAAK/K,MACZC,OAAQ8K,EAAK9K,WA8BzB,OAxBIxH,EAAUX,YAAc/P,EAAAhC,UAAUwG,OAAS0c,EAAUgC,SACZ,IAArChC,EAAUgC,MAAMrf,QAAQ,UACxB6M,EAAUa,KAAOvR,EAAA/B,UAAUklB,OAES,IAApCjC,EAAUgC,MAAMrf,QAAQ,SACxB6M,EAAUa,KAAOvR,EAAA/B,UAAUmlB,cAEe,IAA1ClC,EAAUgC,MAAMrf,QAAQ,eACxB6M,EAAUa,KAAQ2P,EAAUmC,gBAA2D,IAA1CnC,EAAUmC,cAAcxf,QAAQ,KAAe7D,EAAA/B,UAAUqlB,MAAQtjB,EAAA/B,UAAUslB,cAE7E,IAA3CrC,EAAUgC,MAAMrf,QAAQ,gBACxB6M,EAAUa,KAAOvR,EAAA/B,UAAUulB,aAK/B9S,EAAUX,YAAc/P,EAAAhC,UAAUyG,MAAQyc,EAAUgC,SACX,IAArChC,EAAUgC,MAAMrf,QAAQ,QACxB6M,EAAUa,KAAQ2P,EAAUmC,gBAA2D,IAA1CnC,EAAUmC,cAAcxf,QAAQ,KAAe7D,EAAA9B,SAASulB,aAAezjB,EAAA9B,SAASwlB,UAC5E,IAA1CxC,EAAUgC,MAAMrf,QAAQ,eAC/B6M,EAAUa,KAAOvR,EAAA9B,SAASylB,YAI3BjT,GAGH7P,EAAAtD,UAAAokB,oBAAR,SAA6BxgB,GACzBW,KAAK6P,YAAY2O,IAAIhC,EAAAe,QAAOxN,YAAYC,OAAO4P,mBAAoB5f,KAAK6f,oBAAqB7f,MAGzFA,KAAKI,OAAOoO,WACZxO,KAAK6P,YAAYnD,KAAK1M,KAAKI,OAAOoO,YAIlCzP,EAAAtD,UAAAqmB,gBAAR,SAAyBtX,GACrB,MAAiC,SAA1BA,EAASf,aAA0Be,EAASJ,aAAe,IAG9DrL,EAAAtD,UAAA0e,QAAR,SAAiB4H,GACb,OAAOA,IAAa7jB,EAAAhC,UAAUyG,KAAO,iBAAmBof,GAGpDhjB,EAAAtD,UAAAgiB,kBAAR,SAA2Bpe,GACvBW,KAAK2f,cAAgB,MAGjB5gB,EAAAtD,UAAAkiB,kBAAR,SAA2Bte,GACvBW,KAAK2f,cAAgB,MAGjB5gB,EAAAtD,UAAAoiB,kBAAR,SAA2Bxe,GACvBW,KAAKgiB,wBAGDjjB,EAAAtD,UAAAumB,qBAAR,WACI,GAA2B,OAAvBhiB,KAAK2f,cAAT,CAIA,IAAI1R,EAAY+O,EAA4Bhd,KAAK2f,cAAclc,KAAKyG,QAAQ+D,WAGxEA,IAAc/P,EAAAhC,UAAUsG,OAASyL,IAAc/P,EAAAhC,UAAUwG,OAKzD1C,KAAKE,aAAa0J,WAAa,GAAK5J,KAAKE,aAAaoZ,aAAe,IAKzEtZ,KAAKsD,eAAe5D,EAAApD,gBAAgBU,qBAAsBgD,KAAK2f,cAAc7b,SACzEvE,KAAM0O,EACN9E,IAAKnJ,KAAK2f,cAAclc,KAAKyG,QAAQf,IACrCQ,OAAQ3J,KAAK2f,cAAclc,KAAK+G,SAASb,OACzCa,SAAUxK,KAAK8hB,gBAAgB9hB,KAAK2f,cAAclc,KAAK+G,UACvDyX,YAAajiB,KAAK2f,cAAclc,KAAKyG,QAAQsE,UAC7C0T,gBAAiBliB,KAAK2f,cAAclc,KAAKyG,QAAQ8C,WAIrDhN,KAAK2f,cAAgB,QAGjB5gB,EAAAtD,UAAAyQ,QAAR,SAAiB7M,GAEb,IAAIA,EAAEqE,MAAN,CAIA,IAAIG,EAAQxE,EAAEwE,MACd,OAAQA,EAAMN,MAEV,KAAK,EACDvD,KAAKsD,eAAe5D,EAAApD,gBAAgBE,kBAAmBqH,EAAMC,SAC7D,MACJ,KAAK,EACD9D,KAAKsD,eAAe5D,EAAApD,gBAAgBG,kBAAmBoH,EAAMC,SAC7D,MACJ,KAAK,EACD9D,KAAKsD,eAAe5D,EAAApD,gBAAgBI,iBAAkBmH,EAAMC,SAC5D,MACJ,KAAK,EACD9D,KAAKsD,eAAe5D,EAAApD,gBAAgBK,4BAA6BkH,EAAMC,SACvE,MACJ,KAAK,EACD9D,KAAKsD,eAAe5D,EAAApD,gBAAgBM,oBAAqBiH,EAAMC,SAC/D,MAGJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOC,kCAC3BpiB,KAAKsD,eAAe5D,EAAApD,gBAAgBO,4BACpC,MAEJ,KAAK2f,EAAAe,QAAOxN,YAAYoS,OAAOE,kCAC3BriB,KAAKsD,eAAe5D,EAAApD,gBAAgBO,2BAA4BgH,EAAMC,SACtE,MAGJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOG,gCAC3BtiB,KAAKsD,eAAe5D,EAAApD,gBAAgBS,sBAAuB8G,EAAMC,SAC7DqF,IAAKtF,EAAMJ,KAAKyG,QAAQf,IACxBQ,OAAQ9F,EAAMJ,KAAK+G,SAASb,OAC5Ba,SAAUxK,KAAK8hB,gBAAgBje,EAAMJ,KAAK+G,YAE9C,MACJ,KAAKgS,EAAAe,QAAOxN,YAAYoS,OAAOI,sCAC/B,KAAK/F,EAAAe,QAAOxN,YAAYoS,OAAOK,+BAC3BxiB,KAAK2f,cAAgB9b,EACrB7D,KAAKgiB,uBACL,MAGJ,KAAKxF,EAAAe,QAAOxN,YAAYoS,OAAOM,gCAC3BziB,KAAKsD,eAAe5D,EAAApD,gBAAgBW,yBAA0B4G,EAAMC,SACpE,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOO,0BAC3B1iB,KAAKsD,eAAe5D,EAAApD,gBAAgBY,qBAAsB2G,EAAMC,SAChE,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOQ,yBAC3B3iB,KAAKsD,eAAe5D,EAAApD,gBAAgBa,oBAAqB0G,EAAMC,SAC/D,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOS,0BAC3B5iB,KAAKsD,eAAe5D,EAAApD,gBAAgBc,qBAAsByG,EAAMC,SAChE,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOU,yBAC3B7iB,KAAKsD,eAAe5D,EAAApD,gBAAgBe,oBAAqBwG,EAAMC,SAC/D,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOW,yBAC3B9iB,KAAKsD,eAAe5D,EAAApD,gBAAgBiB,oBAAqBsG,EAAMC,SAC/D,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOY,oCAC3B/iB,KAAKsD,eAAe5D,EAAApD,gBAAgBkB,+BAAgCqG,EAAMmf,UAC1E,MAEJ,KAAKxG,EAAAe,QAAOxN,YAAYoS,OAAOc,sCAC3BjjB,KAAKsD,eAAe5D,EAAApD,gBAAgBmB,iCAAkCoG,EAAMC,SAC5E,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOe,+BAC3BljB,KAAKsD,eAAe5D,EAAApD,gBAAgBoB,6BAA8BmG,EAAMC,SACxE,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOgB,mDAC3BnjB,KAAKsD,eAAe5D,EAAApD,gBAAgBqB,+BAAgCkG,EAAMC,SAC1E,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOiB,sCAC3BpjB,KAAKsD,eAAe5D,EAAApD,gBAAgBsB,8BAA+BiG,EAAMC,SACrEqF,IAAK,GACL5F,KAAM,EACNiH,SAAU3G,EAAMC,UAEpB,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOkB,kBAC3BrjB,KAAKsD,eAAe5D,EAAApD,gBAAgBuB,wBAAyBgG,EAAMC,SACnE,MAEJ,KAAK0Y,EAAAe,QAAOxN,YAAYoS,OAAOmB,sCAC3BtjB,KAAKsD,eAAe5D,EAAApD,gBAAgBwB,sBAAuB+F,EAAMC,SACjE,MAEJ,QACI9D,KAAKsD,eAAe5D,EAAApD,gBAAgB2B,sBAAuB4F,EAAMC,QAASD,MAgC1F9E,EAlmBA,CAAkCmM,EAAAnL,eAArB9G,EAAA8F,8FCjCb,IAAAb,EAAAvE,EAAA,GAASV,EAAA4C,WAAAqC,EAAArC,WAAwB5C,EAAA8C,YAAAmC,EAAAnC,YAAa9C,EAAA6C,YAAAoC,EAAApC,YAAa7C,EAAAiD,UAAAgC,EAAAhC,UAAsBjD,EAAAkD,UAAA+B,EAAA/B,UAAWlD,EAAAmD,SAAA8B,EAAA9B,SAAUnD,EAAA+C,WAAAkC,EAAAlC,WAAY/C,EAAAoD,aAAA6B,EAAA7B,aAClH,IAAAqD,EAAA/F,EAAA,GAAsBV,EAAAqD,gBAAAoD,EAAApD,gBAEtB,IAAA+T,EAAA1W,EAAA,GAASV,EAAAoF,UAAAgS,EAAAhS","file":"oneplayer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"dashjs\"), require(\"adsplayer.js\"), require(\"metricsagent.js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"oneplayer\", [\"dashjs\", \"adsplayer.js\", \"metricsagent.js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"oneplayer\"] = factory(require(\"dashjs\"), require(\"adsplayer.js\"), require(\"metricsagent.js\"));\n\telse\n\t\troot[\"oneplayer\"] = factory(root[\"dashjs\"], root[\"adsplayer.js\"], root[\"metricsagent.js\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__14__, __WEBPACK_EXTERNAL_MODULE__16__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","export enum PlayerType {\n    /** dash.js */\n    DASHJS = 'DASHJS',\n\n    /** Native HLS + FairPlay (Safari only) */\n    HLSFP = 'HLSFP'\n}\n\nexport enum HasProtocol {\n    /** MPEG-DASH */\n    DASH = 'DASH',\n\n    /** Microsoft Smooth Streaming */\n    MSS = 'MSS',\n\n    /** Apple Http Live Streaming */\n    HLS = 'HLS'\n}\n\nexport enum ServiceType {\n    /** Live service */\n    LIVE = 'LIVE',\n\n    /** On-demand such as VOD or catchup */\n    ONDEMAND = 'ONDEMAND'\n}\n\nexport enum PluginType {\n    /** Metrics collector, using project metricsagent.js */\n    METRICS = 'METRICS',\n\n    /** Ad-insertion, using project adsplayer.js */\n    ADINSERTION = 'ADINSERTION'\n}\n\nexport enum ChallengeFormatType {\n    OCTET_STREAM = 'octet-stream',\n    TEXT = 'text'\n}\n\nexport interface KeySystemConfiguration {\n    /** The licenser server URL */\n    serverURL?: string;\n\n    /** Wether license request is made using credentials */\n    withCredentials?: Boolean;\n\n    /** The HTTP request headers to be set in the license request as an object containing list of key/values pairs */\n    httpRequestHeaders?: object;\n\n    /** The licenser server certificate as a BASE64 string representation of the binary stream */\n    serverCertificate?: string;\n\n    /** The audio robustness level */\n    audioRobustness?: string;\n\n    /** The video robustness level */\n    videoRobustness?: string;\n\n    /** The session type (see https://w3c.github.io/encrypted-media/#dom-mediakeysessiontype) */\n    sessionType?: string;\n\n    /** The session id (see https://w3c.github.io/encrypted-media/#session-id) */\n    sessionId?: string;\n\n    /** The license request challenge format, 'octet-stream' or 'text' */\n    challengeFormat?: ChallengeFormatType;\n}\n\nexport interface ProtectionData {\n    /** List of property names corresponding to key system name strings and associated values being instances of KeySystemConfiguration */\n    [keySystemId: string]: KeySystemConfiguration;\n}\n\nexport interface StreamInfo {\n    /** The manifest URL */\n    url: string;\n\n    /** The HTTP streaming protocol */\n    protocol?: HasProtocol;\n\n    /** The service type */\n    type?: ServiceType;\n\n    /** The protection data */\n    protData?: ProtectionData;\n\n    /** The start time (in seconds) at which playback should start */\n    startTime?: number;\n\n    /** The metrics collector server URL */\n    metricsUrl?: string;\n\n    /** The ad-insertion description (MAST) file URL */\n    adsUrl?: string;\n\n    /** Some user/service specific data as an object containing list of key/values pairs */\n    userData?: object;\n}\n\nexport enum MediaType {\n    /** Video */\n    Video = 'video',\n\n    /** Audio */\n    Audio = 'audio',\n\n    /** Text */\n    Text = 'text'\n}\n\nexport enum AudioKind {\n    /** A possible alternative to the main track, e.g., a different take of a song (audio) */\n    Alternative = 'alternative',\n\n    /** An audio description of a video track */\n    Descriptions = 'descriptions',\n\n    /** The primary audio track */\n    Main = 'main',\n\n    /** The primary audio track, mixed with audio descriptions */\n    MainDesc = 'main-desc',\n\n    /** A translated version of the main audio track */\n    Translation = 'translation',\n\n    /** The primary audio track, mixed with audio descriptions */\n    Commentary = 'commentary',\n\n    /** Audio cleaned of ambient noise, for the hearing impaired */\n    Clean = 'clean'\n\n}\n\nexport enum TextKind {\n    /** Transcription or translation of audio, suitable for when sound is unavailable or not clearly audible\n        (e.g., because it is muted, drowned-out by ambient noise, or because the user is deaf) */\n    Captions = 'captions',\n\n    /** Transcription or translation of the dialog, suitable for when the sound is available but not understood\n       (e.g., because the user does not understand the language of the media resource’s audio track) */\n    Subtitles = 'subtitles',\n\n    /** Textual descriptions of the video content, when the visual content is obscured, unavailable, or not usable */\n    Descriptions = 'descriptions',\n\n    /** The track defines chapter titles (suitable for navigating the media resource) */\n    Chapters = 'chapters',\n\n    /** The track defines content used by scripts. Not visible for the user */\n    Metadata = 'metadata'\n}\n\nexport interface Quality {\n    /** The encoding bitrate (in bits/sec) */\n    bitrate: number;\n\n    /** The video width (in case of video tracks) */\n    width?: number;\n\n    /** The video height (in case of video tracks) */\n    height?: number;\n}\n\nexport interface TrackInfo {\n    /** The track media type */\n    mediaType: MediaType;\n\n    /** The track ID */\n    id: string;\n\n    /** The track selected state */\n    selected: boolean;\n\n    /** The track kind or category (for audio or text tracks) */\n    kind?: AudioKind | TextKind;\n\n    /** The track language based on ISO 639-2 */\n    lang?: string;\n\n    /** The mime-type of the track content format  */\n    mimeType?: string;\n\n    /** The codec used to encode the track content */\n    codec?: string;\n\n    /** The list of availables qualities for the track */\n    qualities?: Quality[];\n}\n\nexport enum PlayerEvents {\n    /**\n     * The PLAYER_ERROR event is fired when an error occurs.\n     * When the PLAYER_ERROR event is fired, the application shall stop the player using the {@link IPlayer.stop} method.\n     * <br/>Event properties:\n     * @event PLAYER_ERROR\n     * @property <b>name</b>: string - the event name (PLAYER_ERROR)\n     * @property <b>detail</b>: {@link PlayerError} - the error\n     */\n    PLAYER_ERROR = 'player_error',\n\n    /**\n     * The AD_ERROR event is fired when an error is raised by the AdsPlugin.\n     * <br/>Event properties:\n     * @event AD_ERROR\n     * @property <b>name</b>: string - the event name (AD_ERROR)\n     * @property <b>detail</b>: {@link PlayerError} - the error\n     */\n    AD_ERROR = 'ad_error',\n\n    /**\n     * The AD_START event is fired when some ads will start to play.\n     * When the AD_START event is fired, the application shall record the current video time and stop the player using the {@link IPlayer.stop} method.\n     * This event may be fired when the ADINSERTION plugin is loaded.\n     * <br/>Event properties:\n     * @event AD_START\n     * @property <b>name</b>: string - the event name (AD_START)\n     */\n    AD_START = 'ad_start',\n\n    /**\n     * The AD_END event is fired when some ads ended to play.\n     * When the AD_END event is fired, the application shall restart the player, at the recorded playback time, using the {@link IPlayer.load} method.\n     * This event may be fired when the ADINSERTION plugin is loaded.\n     * <br/>Event properties:\n     * @event AD_START\n     * @property <b>name</b>: string - the event name (AD_END)\n     */\n    AD_END = 'ad_end'\n}\n","export enum PlayerErrorCode {\n\n    // #region HTMLMediaElement errors\n    // --------------------------------------------------\n\n    MEDIA_ERR_ABORTED = 1,\n    MEDIA_ERR_NETWORK = 2,\n\n    /**\n     * The HTMLVideoElement failed to decode the audio or video stream\n     */\n    MEDIA_ERR_DECODE = 3,\n\n    /**\n     * Audio or video media type is not supported by the HTMLVideoElement\n     */\n    MEDIA_ERR_SRC_NOT_SUPPORTED = 4,\n\n    /**\n     * The stream could not be played because it is encrypted and one of the following:</br>\n     * <ul>\n     * <li>No key was provided and no needkey handler was provided</li>\n     * <li>The provided key could not be successfully applied</li>\n     * <li>The user agent does not support decryption of this media data</li>\n     * </ul>\n     */\n    MEDIA_ERR_ENCRYPTED = 5,\n\n    // #endregion HTMLMediaElement errors\n    // --------------------------------------------------\n\n    // #region MSE capability errors\n    // --------------------------------------------------\n\n    /**\n     * The user agent does not support Media Source Extensions.\n     */\n    CAPABILITY_ERR_MEDIASOURCE = 10,\n\n    /**\n     * The mime-type or codec is not supported.\n     */\n    CAPABILITY_ERR_CODEC_UNSUPPORTED = 11,\n\n    // #endregion MSE capability errors\n    // --------------------------------------------------\n\n    // #region Download errors\n    // --------------------------------------------------\n\n    /**\n     * The player failed to download the manifest.\n     * Error data properties:\n     * @property <b>url</b>: string - the manifest url\n     * @property <b>status</b>: number - the response status code\n     * @property <b>response</b>: string - the response text\n     */\n    DOWNLOAD_ERR_MANIFEST = 20,\n\n    /**\n     * The player failed to download some media segments, leading to freeze playback of the content.\n     * Error data properties:\n     * @property <b>url</b>: string - the manifest url\n     * @property <b>status</b>: number - the response status code\n     * @property <b>response</b>: string - the response text\n     */\n    DOWNLOAD_ERR_CONTENT = 21,\n\n    // #endregion Download errors\n    // --------------------------------------------------\n\n    // #region EME errors\n    // --------------------------------------------------\n\n    /**\n     * The user agent does not support Encrypted Media Extensions or they are disabled (unsecure origin).\n     */\n    CAPABILITY_ERR_MEDIAKEYS = 100,\n\n    /**\n     * An unspecified error occurred. This value is used for errors that don't match any of the following codes.\n     * </br><i>Note: This error may be raised in user agents embedding Encrypted Media Extensions v0.1 (July 2012)</i>\n     */\n    MEDIA_KEYERR_UNKNOWN = 101,\n\n    /**\n     * The Key System could not be installed or updated.\n     * </br><i>Note: This error may be raised in user agents embedding Encrypted Media Extensions v0.1 (July 2012)</i>\n     */\n    MEDIA_KEYERR_CLIENT = 102,\n\n    /**\n     * The message passed into addKey indicated an error from the license service.\n     * </br><i>Note: This error may be raised in user agents embedding Encrypted Media Extensions v0.1 (July 2012)</i>\n     */\n    MEDIA_KEYERR_SERVICE = 103,\n\n    /**\n     * There is no available output device with the required characteristics for the content protection system.\n     * </br><i>Note: This error may be raised in user agents embedding Encrypted Media Extensions v0.1 (July 2012)</i>\n     */\n    MEDIA_KEYERR_OUTPUT = 104,\n\n    /**\n     * A hardware configuration change caused a content protection error.\n     * </br><i>Note: This error may be raised in user agents embedding Encrypted Media Extensions v0.1 (July 2012)</i>\n     */\n    MEDIA_KEYERR_HARDWARECHANGE = 105,\n\n    /**\n     * An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.\n     * </br><i>Note: This error may be raised in user agents embedding Encrypted Media Extensions v0.1 (July 2012)</i>\n     */\n    MEDIA_KEYERR_DOMAIN = 106,\n\n    /**\n     * Key system access has been denied. No Key System compatible with Key Systems used to encrypt the content is available\n     * in the user agent, or the Key System does not support requested capabilities.\n     */\n    MEDIAKEYS_ERR_KEYSYSTEM_ACCESS = 110,\n\n    /**\n     * An error occurred when providing to the CDM the server certificate to be used to encrypt messages to the license server.\n     */\n    MEDIAKEYS_ERR_SERVER_CERTIFICATE = 111,\n\n    /**\n     * an error occured either while creating a session and generate a license request, either while loading a persistent session.\n     */\n    MEDIAKEYS_ERR_CREATE_SESSION = 112,\n\n    /**\n     * The licenser server URL has not been provided.\n     */\n    MEDIAKEYS_ERR_UNKNOWN_LICENSER = 113,\n\n    /**\n     * The license request to the licenser server failed.\n     * Error data properties:\n     * @property <b>url</b>: string - the license server url\n     * @property <b>status</b>: number - the response status code\n     * @property <b>response</b>: string - the response text\n     */\n    MEDIAKEYS_ERR_LICENSE_REQUEST = 114,\n\n    /**\n     * An error occurred while providing messages, including licenses, to the CDM.\n     */\n    MEDIAKEYS_ERR_KEY_ERROR = 115,\n\n    /**\n     * The license has expired.\n     */\n    MEDIAKEYS_ERR_EXPIRED = 116,\n\n    /**\n     * There are output restrictions associated with the key that cannot currently be met.\n     * Media data decrypted with this key may be blocked from presentation, if necessary according to the output restrictions.\n     */\n    MEDIAKEYS_ERR_OUTPUT_RESTRICTED = 117,\n\n    /**\n     * The key is not currently usable for decryption because of an error in the CDM.\n     */\n    MEDIAKEYS_ERR_INTERNAL_ERROR = 118,\n\n    // #endregion EME errors\n    // --------------------------------------------------\n\n    // #region Other errors\n    // --------------------------------------------------\n\n    /**\n     * Content morality level is too high to be played. It is necessary to unlock the stream with the appropriate adult code.\n     */\n    MEDIA_MORALITY_ERR = 130,\n\n    /**\n     * An error occurred when executing a player API function.\n     */\n    PLAYER_API_ERROR = 998,\n\n    /**\n     * An internal error in the player.\n     * The data property contains the error as returned by the player\n     */\n    PLAYER_INTERNAL_ERROR = 999\n\n    // #endregion Other errors\n    // --------------------------------------------------\n}\n\nexport interface PlayerError {\n    /** The error code */\n    code: PlayerErrorCode;\n\n    /** The error message */\n    message: string;\n\n    /** Extended message */\n    extMessage?: string;\n\n    /** The error data. Refer to each code to get the data object properties description */\n    data?: object;\n}\n\nexport const PlayerErrorMessage = {};\nPlayerErrorMessage[PlayerErrorCode.MEDIA_ERR_ABORTED] = 'Fetching process aborted';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_ERR_NETWORK] = 'Network error';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_ERR_DECODE] = 'Media decoding error';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_ERR_SRC_NOT_SUPPORTED] = 'Media format not supported';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_ERR_ENCRYPTED] = 'Media is encrypted';\n\nPlayerErrorMessage[PlayerErrorCode.CAPABILITY_ERR_MEDIASOURCE] = 'Media Source extensions are not supported';\nPlayerErrorMessage[PlayerErrorCode.CAPABILITY_ERR_CODEC_UNSUPPORTED] = 'Media codec is not supported';\n\nPlayerErrorMessage[PlayerErrorCode.DOWNLOAD_ERR_MANIFEST] = 'Failed to download manifest';\nPlayerErrorMessage[PlayerErrorCode.DOWNLOAD_ERR_CONTENT] = 'Failed to download media segment';\n\nPlayerErrorMessage[PlayerErrorCode.CAPABILITY_ERR_MEDIAKEYS] = 'DRM: Encrypted Media extensions are not supported or enabled';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_KEYERR_UNKNOWN] = 'DRM: An unspecified error occurred';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_KEYERR_CLIENT] = 'DRM: Failed to install or update Key System';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_KEYERR_SERVICE] = 'DRM: License service error';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_KEYERR_OUTPUT] = 'DRM: Output is restricted';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_KEYERR_HARDWARECHANGE] = 'DRM: Error due to a hardware configuration change';\nPlayerErrorMessage[PlayerErrorCode.MEDIA_KEYERR_DOMAIN] = 'DRM: Failed to join the domain';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_KEYSYSTEM_ACCESS] = 'DRM: Key System configuration is not supported';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_SERVER_CERTIFICATE] = 'DRM: Failed to update server certificate';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_CREATE_SESSION] = 'DRM: Failed to create session';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_UNKNOWN_LICENSER] = 'DRM: Missing license server url';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_LICENSE_REQUEST] = 'DRM: Failed to request license';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_KEY_ERROR] = 'DRM: License error';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_EXPIRED] = 'DRM: The license has expired';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_OUTPUT_RESTRICTED] = 'DRM: Output is restricted';\nPlayerErrorMessage[PlayerErrorCode.MEDIAKEYS_ERR_INTERNAL_ERROR] = 'DRM: Session error';\n\nPlayerErrorMessage[PlayerErrorCode.PLAYER_INTERNAL_ERROR] = 'Internal error';\n","import { IPlayer } from './IPlayer';\nimport { PlayerType, PluginType } from './Types';\nimport { DefaultPlayer } from './DefaultPlayer';\n// #if process.env.DASHJS === \"true\"\nimport { DashJSPlayer } from './dashjs/DashJSPlayer';\n// #endif\n// #if process.env.HLSFP === \"true\"\nimport { HlsFpPlayer } from './hlsfp/HlsFpPlayer';\n// #endif\n\ndeclare const __VERSION__: string;\nconst VERSION = __VERSION__;\n\nconst UNKNOWN_PLAYERTYPE_ERROR = 'Unknown player type';\n\n/**\n * OnePlayer is the main class that has to be used to create player instances.\n */\nexport class OnePlayer {\n\n    /**\n     * Returns current version of oneplayer.js.\n     * @return current version of oneplayer.js\n     */\n    static getVersion (): string {\n        return VERSION;\n    }\n\n    /**\n     * Creates a new instance of a player.\n     * This methods creates a player instance of the given type.\n     * @param {HTMLElement} video - the HTML5 video element used to decode and render the media data\n     * @param {HTMLDivElement} ttmlRenderingDiv - the HTML5 div to render rich TTML subtitles\n     * @returns {Promise} a promise which is resolved with the created player, or rejected if failed to create the player\n     */\n    static create (playerType: PlayerType, video: HTMLElement, ttmlRenderingDiv?: HTMLDivElement): Promise<IPlayer> {\n        return new Promise<IPlayer>((resolve, reject) => {\n            let player = null;\n            switch (playerType) {\n                // #if process.env.DASHJS === \"true\"\n                case PlayerType.DASHJS:\n                    player = new DashJSPlayer();\n                    break;\n                // #endif\n                // #if process.env.HLSFP === \"true\"\n                case PlayerType.HLSFP:\n                    player = new HlsFpPlayer();\n                    break;\n                // #endif\n                default:\n                    throw UNKNOWN_PLAYERTYPE_ERROR;\n            }\n\n            player.init(video, ttmlRenderingDiv).then(() => {\n                resolve(player);\n            })\n            .catch((e) => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Adds a plugin.\n     * @param {IPlayer} player - IPlayer reference\n     * @param {PluginType} type - the type of the plugin\n     * @param {object} config - the plugin configuration parameters\n     */\n    static addPlugin (player: IPlayer, type: PluginType, config?: object) {\n        if (!player) {\n            throw new Error('The player instance is not valid while adding the plugin');\n        }\n        (player as DefaultPlayer).addPlugin(type, config);\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import { PlayerType, StreamInfo, MediaType, TrackInfo, PluginType, PlayerEvents } from './Types';\nimport { IPlayer } from './IPlayer';\nimport { PlayerErrorCode, PlayerErrorMessage } from './Errors';\nimport { IPlugin } from './plugins/IPlugin';\n// #if process.env.METRICS === \"true\"\nimport { MetricsPlugin } from './plugins/MetricsPlugin';\n// #endif\n// #if process.env.ADINSERTION === \"true\"\nimport { AdsPlugin } from './plugins/AdsPlugin';\n// #endif\nimport { PlaybackSpeedController } from './tools/PlaybackSpeedController';\nimport { DebugController } from './tools/DebugController';\n\nconst DEFAULT_MEDIA_SETTINGS_KEY = 'oneplayerjs_media_settings';\n\n/**\n * Default player implementation\n */\nexport abstract class DefaultPlayer implements IPlayer {\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // <video> / HTMLMediaElement\n    protected videoElement: HTMLMediaElement;\n\n    // The input stream\n    protected stream: StreamInfo;\n\n    // Track settings caching state\n    protected storeMediaSettings: boolean;\n\n    // Track settings key\n    protected mediaSettingsKey: string;\n\n    // Playback speed controller\n    protected playbackSpeedController: PlaybackSpeedController;\n\n    // Debug controller\n    protected debugController: DebugController;\n\n    // Plugins\n    protected plugins: IPlugin[] = [];\n\n    // Logs state\n    protected logsEnabled: boolean;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region CONSTRUCTOR\n    // --------------------------------------------------\n\n    // #endregion CONSTRUCTOR\n\n    // #region PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region SETUP\n    // --------------------------------------------------\n\n    public abstract getVersion (): string;\n\n    public abstract getPlayerType (): PlayerType;\n\n    public init (videoElement: HTMLElement, ttmlRenderingDiv?: HTMLDivElement): Promise<any> {\n        if (!(videoElement instanceof HTMLMediaElement)) {\n            throw new Error('video element must be instance of HTMLMediaElement');\n        }\n        this.videoElement = videoElement;\n        this.stream = null;\n        this.storeMediaSettings = false;\n        this.mediaSettingsKey = DEFAULT_MEDIA_SETTINGS_KEY;\n        this.playbackSpeedController = new PlaybackSpeedController();\n        this.playbackSpeedController.init(this.videoElement);\n        this.debugController = new DebugController(this, this.videoElement);\n        this.logsEnabled = false;\n\n        return Promise.resolve();\n    }\n\n    abstract setConfig (params: object);\n\n    public enableLogs (enable: boolean) {\n        this.logsEnabled = enable;\n        for (let i = 0; i < this.plugins.length; i++) {\n            this.plugins[i].enableLogs(enable);\n        }\n    }\n\n    public enableLastMediaSettingsCaching (enable: boolean, key = DEFAULT_MEDIA_SETTINGS_KEY) {\n        this.storeMediaSettings = enable;\n        if (key && key.length > 0) {\n            this.mediaSettingsKey = key;\n        }\n        if (this.storeMediaSettings) {\n            this.applyMediaSettings();\n        } else {\n            this.removeMediaSettings();\n        }\n    }\n\n    abstract addEventListener (type: string, listener: any, scope?: object);\n\n    abstract removeEventListener (type: string, listener: any, scope?: object);\n\n    public reset () {\n        this.stop();\n        this.debugController.reset();\n        // Reset plugins\n        for (let i = 0; i < this.plugins.length; i++) {\n            this.plugins[i].reset();\n        }\n    }\n\n    // #endregion SETUP\n    // --------------------------------------------------\n\n    // #region PLAYBACK CONTROL\n    // --------------------------------------------------\n\n    public load (stream: StreamInfo, loadPlugins = true): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            let _loadStream = (stream) => {\n                this.loadStream(stream).then(() => {\n                    resolve();\n                }).catch(e => {\n                    reject(e);\n                });\n            };\n\n            // Stop previous stream\n            if (this.stream) {\n                this.stop();\n            }\n\n            if (this.logsEnabled) {\n                console.log('[oneplayer] Load stream', stream);\n            }\n\n            // Apply media settings from local storage\n            this.applyMediaSettings();\n\n            if (!loadPlugins) {\n                _loadStream(stream);\n            }\n\n            let pluginLoadPromises: Promise<any>[] = [];\n            for (let i = 0; i < this.plugins.length; i++) {\n                pluginLoadPromises.push(this.plugins[i].load(stream));\n            }\n\n            Promise.all(pluginLoadPromises).then((values) => {\n                // In case AdsPlugin encounter a pre-roll ad, then do not start stream playback\n                if (values.indexOf('preroll') === -1) {\n                    _loadStream(stream);\n                }\n            }).catch((e) => {\n                _loadStream(stream);\n            });\n        });\n    }\n\n    abstract play ();\n    abstract pause ();\n    abstract seek (time: number);\n\n    public setPlaybackSpeed (speed: number) {\n        this.playbackSpeedController.setSpeed(speed);\n    }\n\n    public getPlaybackSpeed (): number {\n        return this.playbackSpeedController.getSpeed();\n    }\n\n    public stop (reset = true, stopPlugins = true) {\n\n        if (reset) {\n            this.stream = null;\n            this.playbackSpeedController.reset();\n            this.debugController.stop();\n        } else {\n            this.playbackSpeedController.setSpeed(1);\n        }\n\n        if (stopPlugins) {\n            // Call stop on plugins\n            for (let i = 0; i < this.plugins.length; i++) {\n                this.plugins[i].stop();\n            }\n        }\n    }\n\n    // #endregion PLAYBACK CONTROL\n    // --------------------------------------------------\n\n    // #region DURATION / TIME\n    // --------------------------------------------------\n\n    abstract getDuration (): number;\n    abstract isLive ();\n    abstract getTime (): number;\n\n    // #endregion DURATION / TIME\n    // --------------------------------------------------\n\n    // #region AUDIO/SUBTITLES TRACKS\n    // --------------------------------------------------\n\n    /**\n     * Returns the list of tracks for a given media type\n     * @returns {object} the list of {@link TrackInfo} for each media type\n     */\n    public getTracks (type: MediaType): object {\n        let tracks = {};\n        tracks[MediaType.Video] = this.getTracksForType(MediaType.Video);\n        tracks[MediaType.Audio] = this.getTracksForType(MediaType.Audio);\n        tracks[MediaType.Text] = this.getTracksForType(MediaType.Text);\n        return tracks;\n    }\n\n    abstract getTracksForType (type: MediaType): TrackInfo[];\n    abstract getSelectedTrackForType (type: MediaType): TrackInfo;\n    abstract getQualityForType (type: MediaType): number;\n    abstract getBufferLevelForType (type: MediaType): number;\n    abstract selectTrackForType (type: MediaType, id: string);\n    abstract selectTrack (track: TrackInfo);\n    abstract setDefaultAudioLanguage (lang: string);\n    abstract setDefaultTextLanguage (lang: string);\n    abstract enableText (enable: boolean);\n    abstract isTextEnabled (): boolean;\n    abstract setDefaultTextEnabled (enable: boolean);\n\n    // #endregion AUDIO/SUBTITLES TRACKS\n    // --------------------------------------------------\n\n    // #region PLUGIN\n    // --------------------------------------------------\n\n    public addPlugin (type: PluginType, config?: object) {\n        let plugin;\n        switch (type) {\n            // #if process.env.METRICS === \"true\"\n            case PluginType.METRICS:\n                plugin = new MetricsPlugin();\n                break;\n            // #endif\n            // #if process.env.ADINSERTION === \"true\"\n            case PluginType.ADINSERTION:\n                plugin = new AdsPlugin();\n                break;\n            // #endif\n            default:\n                throw new Error('Unknown plugin type: ' + type);\n        }\n        plugin.init(this, this.videoElement, config);\n        plugin.enableLogs(this.logsEnabled);\n        this.plugins.push(plugin);\n    }\n\n    // #endregion PLUGIN\n    // --------------------------------------------------\n\n    // #region DEBUG\n    // --------------------------------------------------\n\n    public showDebug (show: boolean, debugRenderingDiv?: HTMLDivElement) {\n        this.debugController.showDebugPanel(show, debugRenderingDiv);\n    }\n\n    // #endregion DEBUG\n    // --------------------------------------------------\n\n    // #endregion PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region PROTECTED FUNCTIONS\n    // --------------------------------------------------\n\n    protected loadStream (stream: StreamInfo): Promise<void> {\n        this.stream = stream;\n        this.debugController.start(stream);\n        return Promise.resolve();\n    }\n\n    protected abstract limitToLowestBitrate (state: boolean);\n\n    protected sendErrorEvent (code: PlayerErrorCode, extMessage?: string, data?: object) {\n        let event = document.createEvent('CustomEvent');\n        let error = {\n            code: code,\n            message: PlayerErrorMessage[code],\n            extMessage: extMessage,\n            data: data\n        };\n        event.initCustomEvent(PlayerEvents.PLAYER_ERROR, false, false, error);\n        this.videoElement.dispatchEvent(event);\n    }\n\n    protected storeDefaultLanguage (type: MediaType, lang: string) {\n        if (!this.storeMediaSettings) {\n            return;\n        }\n        let settings = this.getMediaSettings();\n        if (!settings[type]) {\n            settings[type] = {};\n        }\n        settings[type]['lang'] = lang;\n        localStorage.setItem(this.mediaSettingsKey, JSON.stringify(settings));\n    }\n\n    protected storeTextState (enable: boolean) {\n        if (!this.storeMediaSettings) {\n            return;\n        }\n        let settings = this.getMediaSettings();\n        if (!settings[MediaType.Text]) {\n            settings[MediaType.Text] = {};\n        }\n        settings[MediaType.Text]['enable'] = enable;\n        localStorage.setItem(this.mediaSettingsKey, JSON.stringify(settings));\n    }\n\n    // #endregion PROTECTED FUNCTIONS\n    // --------------------------------------------------\n\n    // #region PRIVATE FUNCTIONS\n    // --------------------------------------------------\n\n    private applyMediaSettings () {\n        let storedSettings = localStorage.getItem(this.mediaSettingsKey);\n        if (!storedSettings) {\n            return;\n        }\n        try {\n            let settings = JSON.parse(storedSettings);\n            if (settings['audio'] !== undefined && settings['audio']['lang'] !== undefined) {\n                this.setDefaultAudioLanguage(settings['audio']['lang']);\n            }\n            if (settings['text'] !== undefined && settings['text']['lang'] !== undefined) {\n                this.setDefaultTextLanguage(settings['text']['lang']);\n            }\n            if (settings['text'] !== undefined && settings['text']['enable'] !== undefined) {\n                this.setDefaultTextEnabled(settings['text']['enable']);\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    private removeMediaSettings () {\n        localStorage.removeItem(this.mediaSettingsKey);\n    }\n\n    private getMediaSettings () {\n        let settings = {};\n        let storedSettings = localStorage.getItem(this.mediaSettingsKey);\n        if (storedSettings) {\n            try {\n                settings = JSON.parse(storedSettings);\n            } catch (e) {\n                return settings;\n            }\n        }\n        return settings;\n    }\n\n    // #endregion PRIVATE FUNCTIONS\n}\n","(function(r){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=r()}else if(typeof define===\"function\"&&define.amd){define([],r)}else{var e;if(typeof window!==\"undefined\"){e=window}else if(typeof global!==\"undefined\"){e=global}else if(typeof self!==\"undefined\"){e=self}else{e=this}e.base64js=r()}})(function(){var r,e,n;return function(){function r(e,n,t){function o(f,i){if(!n[f]){if(!e[f]){var u=\"function\"==typeof require&&require;if(!i&&u)return u(f,!0);if(a)return a(f,!0);var v=new Error(\"Cannot find module '\"+f+\"'\");throw v.code=\"MODULE_NOT_FOUND\",v}var d=n[f]={exports:{}};e[f][0].call(d.exports,function(r){var n=e[f][1][r];return o(n||r)},d,d.exports,r,e,n,t)}return n[f].exports}for(var a=\"function\"==typeof require&&require,f=0;f<t.length;f++)o(t[f]);return o}return r}()({\"/\":[function(r,e,n){\"use strict\";n.byteLength=d;n.toByteArray=h;n.fromByteArray=p;var t=[];var o=[];var a=typeof Uint8Array!==\"undefined\"?Uint8Array:Array;var f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(var i=0,u=f.length;i<u;++i){t[i]=f[i];o[f.charCodeAt(i)]=i}o[\"-\".charCodeAt(0)]=62;o[\"_\".charCodeAt(0)]=63;function v(r){var e=r.length;if(e%4>0){throw new Error(\"Invalid string. Length must be a multiple of 4\")}var n=r.indexOf(\"=\");if(n===-1)n=e;var t=n===e?0:4-n%4;return[n,t]}function d(r){var e=v(r);var n=e[0];var t=e[1];return(n+t)*3/4-t}function c(r,e,n){return(e+n)*3/4-n}function h(r){var e;var n=v(r);var t=n[0];var f=n[1];var i=new a(c(r,t,f));var u=0;var d=f>0?t-4:t;for(var h=0;h<d;h+=4){e=o[r.charCodeAt(h)]<<18|o[r.charCodeAt(h+1)]<<12|o[r.charCodeAt(h+2)]<<6|o[r.charCodeAt(h+3)];i[u++]=e>>16&255;i[u++]=e>>8&255;i[u++]=e&255}if(f===2){e=o[r.charCodeAt(h)]<<2|o[r.charCodeAt(h+1)]>>4;i[u++]=e&255}if(f===1){e=o[r.charCodeAt(h)]<<10|o[r.charCodeAt(h+1)]<<4|o[r.charCodeAt(h+2)]>>2;i[u++]=e>>8&255;i[u++]=e&255}return i}function s(r){return t[r>>18&63]+t[r>>12&63]+t[r>>6&63]+t[r&63]}function l(r,e,n){var t;var o=[];for(var a=e;a<n;a+=3){t=(r[a]<<16&16711680)+(r[a+1]<<8&65280)+(r[a+2]&255);o.push(s(t))}return o.join(\"\")}function p(r){var e;var n=r.length;var o=n%3;var a=[];var f=16383;for(var i=0,u=n-o;i<u;i+=f){a.push(l(r,i,i+f>u?u:i+f))}if(o===1){e=r[n-1];a.push(t[e>>2]+t[e<<4&63]+\"==\")}else if(o===2){e=(r[n-2]<<8)+r[n-1];a.push(t[e>>10]+t[e>>4&63]+t[e<<2&63]+\"=\")}return a.join(\"\")}},{}]},{},[])(\"/\")});\n","import { PlayerEvents, ProtectionData, KeySystemConfiguration, ChallengeFormatType } from '../Types';\n\nconst base64 = require('base64-js/base64js.min.js');\n\n/**\n * Dash.js player\n */\nexport class FairPlayController {\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // <video> / HTMLMediaElement\n    protected videoElement: HTMLMediaElement;\n\n    // FairPlay key system configuration\n    private keySystemConfiguration: KeySystemConfiguration;\n\n    // MediaKeySession (as WebKitMediaKeySession on Safari)\n    private mediaKeySession: any;\n\n    // The license request\n    private licenseRequest: XMLHttpRequest;\n\n    // Logs state\n    private logsEnabled: boolean;\n\n    // Events listeners\n    private needKeyListener;\n    private keyMessageListener;\n    private keyAddedListener;\n    private keyErrorListener;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region SETUP\n    // --------------------------------------------------\n\n    public init (videoElement: HTMLMediaElement, protectionData: ProtectionData) {\n        this.videoElement = videoElement;\n        if (protectionData && protectionData['com.apple.fps.1_0']) {\n            this.keySystemConfiguration = protectionData['com.apple.fps.1_0'];\n        }\n        this.logsEnabled = false;\n        this.mediaKeySession = null;\n        this.licenseRequest = null;\n\n        this.needKeyListener = this.onNeedKey.bind(this);\n        this.keyMessageListener = this.onKeyMessage.bind(this);\n        this.keyAddedListener = this.onKeyAdded.bind(this);\n        this.keyErrorListener = this.onKeyError.bind(this);\n\n        this.videoElement.addEventListener('webkitneedkey', this.needKeyListener);\n    }\n\n    public reset () {\n        if (this.licenseRequest !== null) {\n            this.licenseRequest.abort();\n            this.licenseRequest = null;\n        }\n        this.mediaKeySession = null;\n        this.videoElement.removeEventListener('webkitneedkey', this.needKeyListener);\n    }\n\n    public enableLogs (enable: boolean) {\n        this.logsEnabled = enable;\n    }\n\n    // #endregion SETUP\n    // --------------------------------------------------\n\n    // #region PRIVATE FUNCTIONS\n    // --------------------------------------------------\n\n    private debug (message: string) {\n        if (!this.logsEnabled) {\n            return;\n        }\n        console.log('[HLS-FP] ' + message);\n    }\n\n    private sendErrorEvent (e) {\n        let event = document.createEvent('CustomEvent');\n        event.initCustomEvent(PlayerEvents.PLAYER_ERROR, false, false, e);\n        this.videoElement.dispatchEvent(event);\n    }\n\n    private stringToArray (str: string) {\n        let buffer = new ArrayBuffer(str.length * 2); // 2 bytes per character\n        let array = new Uint16Array(buffer);\n        for (let i = 0; i < str.length; i++) {\n            array[i] = str.charCodeAt(i);\n        }\n        return array;\n    }\n\n    private getChallengeFormatType () {\n        return (this.keySystemConfiguration && this.keySystemConfiguration.challengeFormat) ? this.keySystemConfiguration.challengeFormat : ChallengeFormatType.OCTET_STREAM;\n    }\n\n    private extractContentId (initData: Uint8Array) {\n        let contentId = String.fromCharCode.apply(null, new Uint16Array(initData.buffer));\n        let parts = contentId.split('//');\n        if (parts.length !== 2) {\n            throw new Error('Invalid content key format');\n        }\n        return parts[1];\n    }\n\n    private getCertificate () {\n        if (!this.keySystemConfiguration || !this.keySystemConfiguration.serverCertificate) {\n            return new Uint8Array(0);\n        }\n        return base64.toByteArray(this.keySystemConfiguration.serverCertificate);\n    }\n\n    private concatInitDataIdAndCertificate (initData: Uint8Array, id: string, cert: Uint8Array) {\n        let idArray = (typeof id === 'string') ? this.stringToArray(id) : id;\n\n        // layout is [initData][4 byte: idLength][idLength byte: id][4 byte:certLength][certLength byte: cert]\n        let offset = 0;\n        let buffer = new ArrayBuffer(initData.byteLength + 4 + idArray.byteLength + 4 + cert.byteLength);\n        let dataView = new DataView(buffer);\n\n        let initDataArray = new Uint8Array(buffer, offset, initData.byteLength);\n        initDataArray.set(initData);\n        offset += initDataArray.byteLength;\n\n        dataView.setUint32(offset, idArray.byteLength, true);\n        offset += 4;\n\n        let id16Array = new Uint16Array(buffer, offset, id.length);\n        id16Array.set(idArray);\n        offset += id16Array.byteLength;\n\n        dataView.setUint32(offset, cert.byteLength, true);\n        offset += 4;\n\n        let certArray = new Uint8Array(buffer, offset, cert.byteLength);\n        certArray.set(cert);\n\n        return new Uint8Array(buffer, 0, buffer.byteLength);\n    }\n\n    private processLicenseMessage (message: Uint8Array) {\n        if (this.getChallengeFormatType() === ChallengeFormatType.OCTET_STREAM) {\n            return message;\n        }\n\n        let textMessage = 'spc=' + base64.fromByteArray(message) + '&assetId=' + encodeURIComponent(this.mediaKeySession.contentId);\n        return textMessage;\n    }\n\n    private sendLicenseRequest (url: string, challenge: any, withCredentials: boolean): Promise<XMLHttpRequest> {\n        return new Promise<XMLHttpRequest>((resolve, reject) => {\n            let challengeFormatType = this.getChallengeFormatType();\n            let licenseRequest = new XMLHttpRequest();\n            let success = false;\n            licenseRequest.responseType = challengeFormatType === ChallengeFormatType.OCTET_STREAM ? 'arraybuffer' : 'text';\n            licenseRequest.withCredentials = withCredentials;\n\n            licenseRequest.onload = function (this: XMLHttpRequest, e: ProgressEvent) {\n                if (this.status < 200 || this.status > 299) {\n                    return;\n                }\n                if (this.status === 200 && this.readyState === 4) {\n                    success = true;\n                    resolve(this);\n                }\n            };\n\n            licenseRequest.onloadend = function (this: XMLHttpRequest, e: ProgressEvent) {\n                if (success) {\n                    return;\n                }\n                reject(this);\n            };\n\n            // licenseRequest.onerror = function (this: XMLHttpRequest, e: ErrorEvent) {\n            //     if (success) {\n            //         return;\n            //     }\n            //     reject(this);\n            // };\n\n            licenseRequest.open('POST', url, true);\n            licenseRequest.setRequestHeader('Content-Type', challengeFormatType === ChallengeFormatType.OCTET_STREAM ? 'application/octet-stream' : 'application/x-www-form-urlencoded');\n            licenseRequest.send(challenge);\n        });\n    }\n\n    private processLicenseResponse (request) {\n        let challengeFormatType = this.getChallengeFormatType();\n        let key;\n\n        if (challengeFormatType === ChallengeFormatType.TEXT) {\n            // Response can be of the form: '\\n<ckc>base64encoded</ckc>\\n', so trim the excess:\n            key = request.responseText.trim();\n            if (key.substr(0, 5) === '<ckc>' && key.substr(-6) === '</ckc>') {\n                key = key.slice(5,-6);\n            }\n            key = base64.toByteArray(key);\n        } else {\n            key = new Uint8Array(request.response);\n        }\n\n        this.debug('update key session');\n        this.mediaKeySession.update(key);\n    }\n\n    private getKeyError (event) {\n        let error = event.target.error;\n        let code = 'MEDIA_KEYERR';\n        let message = 'MediakeyError';\n\n        if (error) {\n            switch (error.code) {\n                case 1:\n                    code = 'MEDIA_KEYERR_UNKNOWN';\n                    message = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                    break;\n                case 2:\n                    code = 'MEDIA_KEYERR_CLIENT';\n                    message = 'The Key System could not be installed or updated.';\n                    break;\n                case 3:\n                    code = 'MEDIA_KEYERR_SERVICE';\n                    message = 'The message passed into update indicated an error from the license service.';\n                    break;\n                case 4:\n                    code = 'MEDIA_KEYERR_OUTPUT';\n                    message = 'There is no available output device with the required characteristics for the content protection system.';\n                    break;\n                case 5:\n                    code = 'MEDIA_KEYERR_HARDWARECHANGE';\n                    message += 'A hardware configuration change caused a content protection error.';\n                    break;\n                case 6:\n                    code = 'MEDIA_KEYERR_DOMAIN';\n                    message = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                    break;\n                default:\n                    code = 'MEDIA_KEYERR_UNKNOWN';\n                    message = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                    break;\n            }\n        } else {\n            code = 'MEDIA_KEYERR_UNKNOWN';\n            message = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n        }\n        if (error.systemCode) {\n            message += '  (System Code = ' + event.systemCode + ')';\n        }\n        return {\n            code: code,\n            message: message\n        };\n    }\n\n    private onNeedKey (e) {\n        this.debug('needkey event');\n\n        let contentId = this.extractContentId(e.initData);\n        let certificate = this.getCertificate();\n        let initData = this.concatInitDataIdAndCertificate(e.initData, contentId, certificate);\n\n        this.debug('create key session');\n        let mediaKeys = new window['WebKitMediaKeys']('com.apple.fps.1_0');\n        this.videoElement['webkitSetMediaKeys'](mediaKeys);\n        this.mediaKeySession = this.videoElement['webkitKeys'].createSession('video/mp4', initData);\n\n        if (!this.mediaKeySession) {\n            throw new Error('Could not create key session');\n        }\n\n        if (this.mediaKeySession.error) {\n            this.sendErrorEvent({\n                code: 'MEDIA_KEYMESSERR_NO_SESSION',\n                message: 'Failed to create key session',\n                data: this.mediaKeySession.error\n            });\n        }\n\n        this.mediaKeySession.contentId = contentId;\n\n        this.mediaKeySession.addEventListener('webkitkeymessage', this.keyMessageListener);\n        this.mediaKeySession.addEventListener('webkitkeyadded', this.keyAddedListener);\n        this.mediaKeySession.addEventListener('webkitkeyerror', this.keyErrorListener);\n    }\n\n    private onKeyMessage (e) {\n\n        this.debug('keymessage event');\n\n        let serverUrl = this.keySystemConfiguration ? this.keySystemConfiguration.serverURL : null;\n        if (!serverUrl) {\n            this.sendErrorEvent({\n                code: 'MEDIA_KEYMESSERR_URL_LICENSER_UNKNOWN',\n                message: 'No license server URL specified'\n            });\n            return;\n        }\n\n        let message = e.message;\n        message = this.processLicenseMessage(message);\n\n        let withCredentials = this.keySystemConfiguration ? (this.keySystemConfiguration.withCredentials === true) : false;\n        this.debug('send license request');\n        this.sendLicenseRequest(serverUrl, message, withCredentials)\n        .then((request) => {\n            this.debug('received license reponse');\n            this.processLicenseResponse(request);\n        })\n        .catch((request) => {\n            this.sendErrorEvent({\n                code: 'MEDIA_KEYMESSERR_LICENSER_ERROR',\n                message: 'License request failed',\n                data: {\n                    status: request.status,\n                    error: request.response\n                }\n            });\n        });\n    }\n\n    private onKeyAdded (e) {\n        this.debug('keyadded event');\n    }\n\n    private onKeyError (e) {\n        this.debug('keyerror event');\n        let error = this.getKeyError(e);\n        this.sendErrorEvent(error);\n    }\n\n    // #endregion PRIVATE FUNCTIONS\n\n}\n","import { IPlayer } from '../IPlayer';\nimport { DefaultPlayer } from '../DefaultPlayer';\nimport { PlayerType, StreamInfo, MediaType, TrackInfo, ProtectionData, AudioKind, TextKind } from '../Types';\nimport { FairPlayController } from './FairPlayController';\nimport { PlayerErrorCode } from '../Errors';\n\n/**\n * Dash.js player\n */\nexport class HlsFpPlayer extends DefaultPlayer implements IPlayer {\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // Protection data\n    private protectionData: ProtectionData;\n\n    // FairPlayController\n    private fpcontroller: FairPlayController;\n\n    // Default audio language\n    private defaultAudioLanguage: string;\n\n    // Default text language\n    private defaultTextLanguage: string;\n\n    // Default text state\n    private defaultTextEnabled: boolean;\n\n    // Selected text track id before being disabled\n    private selectedTextTrackId: string;\n\n    // Events listeners\n    private loadedmetadataListener;\n    private stateChangedListener;\n    private canplayListener;\n    private seekedListener;\n    private errorListener;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region CONSTRUCTOR\n    // --------------------------------------------------\n\n    /**\n     * Constructor.\n     */\n    constructor () {\n        super();\n    }\n    // #endregion CONSTRUCTOR\n\n    // #region PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region SETUP\n    // --------------------------------------------------\n\n    public getVersion (): string {\n        return '';\n    }\n\n    public getPlayerType (): PlayerType {\n        return PlayerType.HLSFP;\n    }\n\n    public init (videoElement: HTMLElement, ttmlRenderingDiv?: HTMLDivElement): Promise<any> {\n        super.init(videoElement, ttmlRenderingDiv);\n        this.defaultAudioLanguage = null;\n        this.defaultTextLanguage = null;\n        this.defaultTextEnabled = false;\n        this.selectedTextTrackId = null;\n\n        this.loadedmetadataListener = this.onLoadedmetadata.bind(this);\n        this.stateChangedListener = this.onStateChanged.bind(this);\n        this.seekedListener = this.onSeeked.bind(this);\n        this.errorListener = this.onError.bind(this);\n\n        this.videoElement.addEventListener('loadedmetadata', this.loadedmetadataListener);\n        this.videoElement.addEventListener('play', this.stateChangedListener);\n        this.videoElement.addEventListener('pause', this.stateChangedListener);\n        this.videoElement.addEventListener('playing', this.stateChangedListener);\n        this.videoElement.addEventListener('waiting', this.stateChangedListener);\n        this.videoElement.addEventListener('seeking', this.stateChangedListener);\n        this.videoElement.addEventListener('error', this.errorListener);\n\n        return Promise.resolve();\n    }\n\n    public setConfig (params: object) {\n        // noop\n    }\n\n    public enableLogs (enable: boolean) {\n        super.enableLogs(enable);\n        if (this.fpcontroller) {\n            this.fpcontroller.enableLogs(enable);\n        }\n    }\n\n    public addEventListener (type: string, listener: any, scope?: object) {\n        this.videoElement.addEventListener(type, listener, scope);\n    }\n\n    public removeEventListener (type: string, listener: any, scope?: object) {\n        this.videoElement.removeEventListener(type, listener, scope);\n    }\n\n    public reset () {\n        this.videoElement.removeEventListener('loadedmetadata', this.loadedmetadataListener);\n        this.videoElement.removeEventListener('play', this.stateChangedListener);\n        this.videoElement.removeEventListener('pause', this.stateChangedListener);\n        this.videoElement.removeEventListener('playing', this.stateChangedListener);\n        this.videoElement.removeEventListener('waiting', this.stateChangedListener);\n        this.videoElement.removeEventListener('seeking', this.stateChangedListener);\n        this.videoElement.removeEventListener('error', this.errorListener);\n    }\n\n    // #endregion SETUP\n    // --------------------------------------------------\n\n    // #region PLAYBACK CONTROL\n    // --------------------------------------------------\n\n    public play () {\n        return this.videoElement.play();\n    }\n\n    public pause () {\n        this.videoElement.pause();\n    }\n\n    public seek (time: number) {\n        this.videoElement.currentTime = time;\n    }\n\n    public stop (reset = true, stopPlugins?: boolean) {\n        // if (this.stream === null) {\n        //     return;\n        // }\n\n        super.stop(stopPlugins);\n\n        this.debug('stop');\n\n        if (reset || this.isLive()) {\n            this.videoElement.pause();\n            if (this.fpcontroller !== null) {\n                this.fpcontroller.reset();\n                this.fpcontroller = null;\n            }\n\n            this.videoElement.removeAttribute('src');\n            this.videoElement.load();\n        } else {\n            this.videoElement.addEventListener('seeked', this.seekedListener);\n            this.videoElement.currentTime = 0;\n        }\n\n    }\n\n    // #endregion PLAYBACK CONTROL\n    // --------------------------------------------------\n\n    // #region DURATION / TIME\n    // --------------------------------------------------\n\n    public getDuration (): number {\n        return this.videoElement.duration;\n    }\n\n    public isLive () {\n        return this.getDuration() !== Number.POSITIVE_INFINITY ? false : true;\n    }\n\n    public getTime (): number {\n        return this.videoElement.currentTime;\n    }\n\n    // #endregion DURATION / TIME\n    // --------------------------------------------------\n\n    // #region AUDIO/SUBTITLES TRACKS\n    // --------------------------------------------------\n\n    public getTracksForType (type: MediaType): TrackInfo[] {\n        switch (type) {\n            case MediaType.Video:\n                return this.getVideoTracks();\n            case MediaType.Audio:\n                return this.getAudioTracks();\n            case MediaType.Text:\n                return this.getTextTracks();\n            default:\n                return null;\n        }\n    }\n\n    public getSelectedTrackForType (type: MediaType): TrackInfo {\n        switch (type) {\n            case MediaType.Audio:\n                return this.getSelectedAudioTrack();\n            case MediaType.Text:\n                return this.getSelectedTextTrack();\n            default:\n                return null;\n        }\n    }\n\n    public getQualityForType (type: MediaType): number {\n        // not available with HLS\n        return -1;\n    }\n\n    public getBufferLevelForType (type: MediaType): number {\n        // not available with HLS\n        return -1;\n    }\n\n    public selectTrackForType (type: MediaType, id: string) {\n        let lang = null;\n        switch (type) {\n            case MediaType.Audio:\n                lang = this.selectAudioTrack(id);\n                break;\n            case MediaType.Text:\n                lang = this.selectTextTrack(id);\n                this.selectedTextTrackId = id;\n                break;\n            default:\n                break;\n        }\n        if (lang) {\n            this.storeDefaultLanguage(type, lang);\n            if (type === MediaType.Text) {\n                this.storeTextState(true);\n            }\n        }\n    }\n\n    public selectTrack (track: TrackInfo) {\n        this.selectTrackForType(track.mediaType, track.id);\n    }\n\n    public setDefaultAudioLanguage (lang: string) {\n        this.defaultAudioLanguage = lang;\n    }\n\n    public setDefaultTextLanguage (lang: string) {\n        this.defaultTextLanguage = lang;\n    }\n\n    public enableText (enable: boolean) {\n        if (enable) {\n            this.selectTextTrack(this.selectedTextTrackId);\n        } else {\n            let textTracks = this.videoElement.textTracks;\n            for (let i = 0; i < textTracks.length; i++) {\n                textTracks[i].mode = 'disabled';\n            }\n        }\n        this.storeTextState(enable);\n    }\n\n    public isTextEnabled (): boolean {\n        let textTracks = this.videoElement.textTracks;\n        for (let i = 0; i < textTracks.length; i++) {\n            if (textTracks[i].mode === 'showing') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public setDefaultTextEnabled (enable: boolean) {\n        this.defaultTextEnabled = true;\n    }\n\n    // #endregion AUDIO/SUBTITLES TRACKS\n    // --------------------------------------------------\n\n    // #endregion PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region PROTECTED FUNCTIONS\n    // --------------------------------------------------\n\n    protected loadStream (stream: StreamInfo): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            let canplayListener = (e) => {\n                this.debug('canplay');\n                this.videoElement.removeEventListener('canplay', canplayListener);\n                // autoplay\n                this.videoElement.play().then(() => {\n                    resolve();\n                }).catch(e => {\n                    reject(e);\n                });\n            };\n\n            this.videoElement.addEventListener('canplay', canplayListener);\n\n            super.loadStream(stream);\n            this.selectedTextTrackId = null;\n\n            if (stream.protData) {\n                this.protectionData = stream.protData;\n            }\n\n            this.fpcontroller = new FairPlayController();\n            this.fpcontroller.init(this.videoElement, this.protectionData);\n\n            this.videoElement.src = stream.url + (stream.startTime >= 0 ? ('#t=' + stream.startTime) : '');\n        });\n    }\n\n    protected limitToLowestBitrate (state: boolean) {\n        // Using built-in video player there is no mean to control bitrate\n        return;\n    }\n\n    // #endregion PROTECTED FUNCTIONS\n\n    // #region PRIVATE FUNCTIONS\n    // --------------------------------------------------\n\n    private getVideoTracks (): TrackInfo[] {\n        let tracksInfo: TrackInfo[] = [];\n        let trackInfo: TrackInfo = {\n            mediaType: MediaType.Video,\n            id: 'video',\n            selected: true,\n            codec: '',\n            mimeType: '',\n            lang: '',\n            qualities: []\n        };\n        tracksInfo.push(trackInfo);\n        return tracksInfo;\n    }\n\n    private getAudioTracks (): TrackInfo[] {\n        let tracksInfo: TrackInfo[] = [];\n        let audioTracks = this.videoElement.audioTracks;\n\n        if (audioTracks.length === 0) {\n            return [];\n        }\n\n        for (let i = 0; i < audioTracks.length; i++) {\n            tracksInfo.push(this.audioTrackToMediaInfo(audioTracks[i]));\n        }\n        return tracksInfo;\n    }\n\n    private getTextTracks (): TrackInfo[] {\n        let tracksInfo: TrackInfo[] = [];\n        let textTracks = this.videoElement.textTracks;\n\n        if (textTracks.length === 0) {\n            return [];\n        }\n\n        for (let i = 0; i < textTracks.length; i++) {\n            tracksInfo.push(this.textTrackToMediaInfo(textTracks[i]));\n        }\n        return tracksInfo;\n    }\n\n    private selectAudioTrack (id?: string, lang?: string) {\n        let audioTracks = this.videoElement.audioTracks;\n        let selectedLang = null;\n        for (let i = 0; i < audioTracks.length; i++) {\n            if ((id && audioTracks[i].id === id) || (lang && audioTracks[i].language === lang)) {\n                audioTracks[i].enabled = true;\n                selectedLang = audioTracks[i].language;\n            }\n        }\n        return selectedLang;\n    }\n\n    private selectTextTrack (id?: string, lang?: string) {\n        let textTracks = this.videoElement.textTracks;\n        let selectedLang = null;\n        for (let i = 0; i < textTracks.length; i++) {\n            if ((id && textTracks[i].label === id) || (lang && textTracks[i].language === lang)) {\n                textTracks[i].mode = 'showing';\n                selectedLang = textTracks[i].language;\n            } else {\n                textTracks[i].mode = 'disabled';\n            }\n        }\n        if (!selectedLang && textTracks.length > 0) {\n            textTracks[0].mode = 'showing';\n            selectedLang = textTracks[0].language;\n        }\n        return selectedLang;\n    }\n\n    private getSelectedAudioTrack () {\n        let audioTracks = this.videoElement.audioTracks;\n        for (let i = 0; i < audioTracks.length; i++) {\n            if (audioTracks[i].enabled) {\n                return this.audioTrackToMediaInfo(audioTracks[i]);\n            }\n        }\n        return null;\n    }\n\n    private getSelectedTextTrack () {\n        let textTracks = this.videoElement.textTracks;\n        for (let i = 0; i < textTracks.length; i++) {\n            if (textTracks[i].mode === 'showing') {\n                return this.textTrackToMediaInfo(textTracks[i]);\n            }\n        }\n        return null;\n    }\n\n    private audioTrackToMediaInfo (audioTrack: AudioTrack) {\n        let trackInfo: TrackInfo = {\n            mediaType: MediaType.Audio,\n            id: audioTrack.id,\n            selected: audioTrack.enabled,\n            kind: audioTrack.kind as AudioKind,\n            codec: '',\n            mimeType: '',\n            lang: audioTrack.language,\n            qualities: []\n        };\n        return trackInfo;\n    }\n\n    private textTrackToMediaInfo (textTrack: TextTrack) {\n        let trackInfo: TrackInfo = {\n            mediaType: MediaType.Text,\n            id: textTrack.label,\n            selected: textTrack.mode === 'showing',\n            kind: textTrack.kind as TextKind,\n            codec: '',\n            mimeType: '',\n            lang: textTrack.language,\n            qualities: []\n        };\n\n        return trackInfo;\n    }\n\n    private onLoadedmetadata (e) {\n        this.debug('loadedmetadata');\n        if (this.defaultAudioLanguage) {\n            this.selectAudioTrack(undefined, this.defaultAudioLanguage);\n        }\n        if (this.defaultTextLanguage && this.defaultTextEnabled) {\n            this.selectTextTrack(undefined, this.defaultTextLanguage);\n        }\n    }\n\n    private onStateChanged (e) {\n        this.debug(e.type);\n    }\n\n    private onSeeked (e) {\n        // used by stop method\n        this.debug('seeked');\n        this.videoElement.pause();\n        this.videoElement.removeEventListener('seeked', this.seekedListener);\n    }\n\n    private onError (e) {\n        switch (e.target.error.code) {\n            // MEDIA_ERR_ABORTED\n            case 1:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_ABORTED);\n                break;\n            // MEDIA_ERR_NETWORK\n            case 2:\n                this.sendErrorEvent(PlayerErrorCode.DOWNLOAD_ERR_CONTENT);\n                break;\n            // MEDIA_ERR_DECODE\n            case 3:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_DECODE);\n                break;\n            // MEDIA_ERR_SRC_NOT_SUPPORTED\n            case 4:\n                this.sendErrorEvent(PlayerErrorCode.DOWNLOAD_ERR_MANIFEST, '', {\n                    url: e.target.src\n                });\n                break;\n            // MEDIA_ERR_ENCRYPTED\n            case 5:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_ENCRYPTED);\n                break;\n        }\n    }\n\n    private debug (message: string) {\n        if (!this.logsEnabled) {\n            return;\n        }\n        console.log('[HLS-FP] ' + message);\n    }\n\n    // #endregion PRIVATE FUNCTIONS\n\n}\n","import * as dashjs from 'dashjs';\n\nexport class TTMLController {\n\n    /**\n     * Initialize.\n     * @param mediaPlayer the dash.js player\n     */\n    init (mediaPlayer) {\n        mediaPlayer.on(dashjs.MediaPlayer.events.TTML_TO_PARSE, this.onTTMLPreProcess, this);\n    }\n\n    // #region PRIVATE METHODS\n    // --------------------------------------------------\n    private onTTMLPreProcess (ttmlSubtitles) {\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\n            return;\n        }\n\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/[\\w]+:region/gi, 'region');\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/[\\w]+:begin/gi, 'begin');\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/[\\w]+:end/gi, 'end');\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/[\\w]+:style/gi, 'style');\n    }\n    // #endregion PRIVATE METHODS\n}\n","module.exports = \"#oneplayer-debug {\\r\\n    position: absolute;\\r\\n    top: 10px;\\r\\n    left: 10px;\\r\\n    border-radius: 4px;\\r\\n    padding: 0.5em;\\r\\n    color: #fff;\\r\\n    background: rgba(28, 28, 28, 0.8);\\r\\n    font-size: 12px;\\r\\n    font-family: monospace;\\r\\n}\\r\\n\\r\\n#oneplayer-debug-metrics {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n}\\r\\n\\r\\n#oneplayer-debug-metrics > div {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: space-evenly;\\r\\n    align-content: center;\\r\\n    padding: 0px;    \\r\\n}\\r\\n\\r\\n#oneplayer-debug-metrics > .left {\\r\\n    align-items: flex-end;\\r\\n}\\r\\n\\r\\n#oneplayer-debug-metrics > .right {\\r\\n    align-items: flex-start;\\r\\n}\\r\\n\\r\\n#oneplayer-debug-metrics > div > * {\\r\\n    height: 1.5em;\\r\\n    margin: 2px 0 2px 0;\\r\\n}\\r\\n\\r\\n#oneplayer-debug-metrics > div > span {\\r\\n    padding: 0 5px;\\r\\n}\\r\\n\\r\\n#oneplayer-debug-version {\\r\\n    font-style: italic;\\r\\n    font-size: 11px;\\r\\n    padding-top: 10px\\r\\n}\\r\\n\\r\\n/* chartist style customization */\\r\\n.ct-chart {\\r\\n    background: rgba(0, 0, 0, 0.5);\\r\\n}\\r\\n\\r\\n.ct-series-a .ct-line {\\r\\n    stroke: white;\\r\\n    stroke-width: 1px;\\r\\n}\\r\\n\\r\\n.ct-series-a .ct-area {\\r\\n    fill: white;\\r\\n    fill-opacity: 0.5;\\r\\n}\\r\\n\\r\\n.ct-series-a .ct-grid {\\r\\n    stroke: rgba(255, 255, 255, 0.5);\\r\\n    stroke-width: 1px;\\r\\n    stroke-dasharray: 2px;\\r\\n}\\r\\n\\r\\n.ct-series-a .ct-point {\\r\\n    stroke: white;\\r\\n    stroke-width: 1px;\\r\\n    stroke-linecap: round;\\r\\n}\\r\\n\\r\\n/* * {\\r\\n    border: 1px solid;\\r\\n    border-color: #FFFFFF;\\r\\n} */\\r\\n\\r\\n  \";","module.exports = \"<div id='oneplayer-debug-metrics'>\\r\\n  <div class='left'>\\r\\n    <span>Protocol:</span>\\r\\n    <span>Type:</span>\\r\\n    <span>Playback state:</span>\\r\\n    <span>Playback time:</span>\\r\\n    <span id=\\\"oneplayer-debug-duration-jitter-label\\\">Duration:</span>\\r\\n    <span>Playback quality:</span>\\r\\n    <span>Video buffer:</span>\\r\\n    <span>Audio buffer:</span>\\r\\n    <span>Video bitrate:</span>\\r\\n    <span>Connection speed:</span>\\r\\n  </div>\\r\\n  <div class='right'>\\r\\n    <span id=\\\"oneplayer-debug-protocol\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-stream-type\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-playback-state\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-playback-time\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-duration-jitter\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-playback-quality\\\"></span>\\r\\n    <div class=\\\"ct-chart\\\" id=\\\"oneplayer-debug-video-buffer-chart\\\"></div>\\r\\n    <div class=\\\"ct-chart\\\" id=\\\"oneplayer-debug-audio-buffer-chart\\\"></div>\\r\\n    <div class=\\\"ct-chart\\\" id=\\\"oneplayer-debug-video-bitrate-chart\\\"></div>\\r\\n    <div class=\\\"ct-chart\\\" id=\\\"oneplayer-debug-connection-speed-chart\\\"></div>\\r\\n  </div>\\r\\n  <div class='right'>\\r\\n    <span></span>\\r\\n    <span></span>\\r\\n    <span></span>\\r\\n    <span></span>\\r\\n    <span></span>\\r\\n    <span></span>\\r\\n    <span id=\\\"oneplayer-debug-video-buffer\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-audio-buffer\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-video-bitrate\\\"></span>\\r\\n    <span id=\\\"oneplayer-debug-connection-speed\\\"></span>\\r\\n  </div>\\r\\n</div>\\r\\n<div id=\\\"oneplayer-debug-version\\\"><span></span></div>\\r\\n\";","import { OnePlayer } from '../OnePlayer';\nimport { IPlayer } from '../IPlayer';\nimport { StreamInfo, ServiceType, MediaType, Quality, PlayerType } from '../Types';\nimport { DashJSPlayer } from '../dashjs/DashJSPlayer';\n\nlet html = require('./DebugComponent.html');\nlet css = require('./DebugComponent.css');\n\nconst POLL_INTERVAL = 500; // 500ms\nconst METRICS_COUNT = 120; // 2 per seconds, 60sec\n\ndeclare global {\n    interface Window { Chartist: any; }\n}\n\nwindow.Chartist = window.Chartist || {};\n\nexport class DebugPanel {\n\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    private videoElement: HTMLMediaElement;\n    private player: IPlayer;\n\n    private containerDiv: HTMLElement;\n    private debugDiv: HTMLDivElement;\n\n    // Listeners\n    private stateChangedListener;\n    private pauseListener;\n    private qualityRenderedListener;\n\n    // Data\n    private version = '';\n    private protocol: string = '';\n    private streamType: string = '';\n    private playbackState: string = '';\n    private playbackTime: number = 0;\n    private duration: number = 0;\n    private jitter: number = 0;\n    private videoBufferSizes: number[];\n    private audioBufferSizes: number[];\n    private videoBuffer: number = 0;\n    private audioBuffer: number = 0;\n    private bufferTarget: number = 0;\n    private videoQualities: number[];\n    private videoBitrate: number = 0;\n    private connectionSpeeds: number[];\n    private connectionSpeed: number = 0;\n    private playbackQuality: number = -1;\n\n    // Charts\n    private videoBufferChart: Chartist.IChartistLineChart;\n    private audioBufferChart: Chartist.IChartistLineChart;\n    private videoBitrateChart: Chartist.IChartistLineChart;\n    private connectionSpeedChart: Chartist.IChartistLineChart;\n\n    // Interval for polling metrics\n    private pollInterval;\n\n    // Live metrics used to determine jitter\n    private liveStartTime: number;\n    private liveStartPlaybackTime: number;\n\n    // #endregion MEMBERS\n\n    // #region CONSTRUCTOR\n    // --------------------------------------------------\n\n    /**\n     * Constructor.\n     */\n    constructor (player: IPlayer, video: HTMLElement) {\n        this.player = player;\n        this.videoElement = video as HTMLMediaElement;\n        this.containerDiv = null;\n        this.debugDiv = null;\n        this.pollInterval = null;\n\n        this.videoBufferSizes = [];\n        this.audioBufferSizes = [];\n        this.videoQualities = [];\n        this.connectionSpeeds = [];\n\n        this.stateChangedListener = this.onStateChanged.bind(this);\n        this.pauseListener = this.onPause.bind(this);\n        this.qualityRenderedListener = this.onQualityRendered.bind(this);\n\n        this.registerEvents();\n\n        this.init();\n    }\n\n    // #endregion CONSTRUCTOR\n    // --------------------------------------------------\n\n    // #region PUBLIC METHODS\n    // --------------------------------------------------\n\n    public reset () {\n        this.unregisterEvents();\n        this.show(false);\n    }\n\n    public start (stream: StreamInfo) {\n        this.init();\n        this.protocol = stream.protocol || '';\n        this.streamType = stream.type ? (stream.type === ServiceType.LIVE ? 'live' : 'static') : '';\n        this.render();\n    }\n\n    public stop () {\n        this.stopMetricsPolling();\n        this.init();\n        this.render();\n    }\n\n    public show (show: boolean, debugRenderingDiv?: HTMLDivElement) {\n        if (!show && this.debugDiv !== null) {\n            this.containerDiv.removeChild(this.debugDiv);\n            this.debugDiv = null;\n        } else if (show && this.debugDiv === null) {\n            // Create debug panel and append it to provided container or to <video> parent element\n            this.containerDiv = debugRenderingDiv ? debugRenderingDiv : this.videoElement.parentElement;\n            this.createDebugPanel();\n            this.render();\n        }\n    }\n\n    // #endregion PUBLIC METHODS\n    // --------------------------------------------------\n\n    // #region PRIVATE METHODS\n    // --------------------------------------------------\n\n    private registerEvents () {\n        this.videoElement.addEventListener('loadedmetadata', this.stateChangedListener);\n        this.videoElement.addEventListener('seeking', this.stateChangedListener);\n        this.videoElement.addEventListener('seeked', this.stateChangedListener);\n        this.videoElement.addEventListener('playing', this.stateChangedListener);\n        this.videoElement.addEventListener('waiting', this.stateChangedListener);\n        this.videoElement.addEventListener('pause', this.pauseListener);\n\n        if (this.player.getPlayerType() === PlayerType.DASHJS) {\n            this.player.addEventListener('qualityChangeRendered', this.qualityRenderedListener);\n        }\n    }\n\n    private unregisterEvents () {\n        this.videoElement.removeEventListener('loadedmetadata', this.stateChangedListener);\n        this.videoElement.removeEventListener('seeking', this.stateChangedListener);\n        this.videoElement.removeEventListener('seeked', this.stateChangedListener);\n        this.videoElement.removeEventListener('playing', this.stateChangedListener);\n        this.videoElement.removeEventListener('waiting', this.stateChangedListener);\n        this.videoElement.removeEventListener('pause', this.pauseListener);\n\n        if (this.player.getPlayerType() === PlayerType.DASHJS) {\n            this.player.removeEventListener('qualityChangeRendered', this.qualityRenderedListener);\n        }\n    }\n\n    private init () {\n        this.version = 'oneplayer.js v' + OnePlayer.getVersion() + ((this.player.getVersion().length > 0) ? (' / ' + this.player.getVersion()) : '');\n        this.protocol = '';\n        this.streamType = '';\n        this.playbackState = '';\n        this.playbackTime = 0;\n        this.duration = 0;\n        this.jitter = 0;\n        this.videoBufferSizes = [0];\n        this.audioBufferSizes = [0];\n        this.videoBuffer = 0;\n        this.audioBuffer = 0;\n        this.bufferTarget = 0;\n        this.videoQualities = [0];\n        this.videoBitrate = 0;\n        this.connectionSpeeds = [0];\n        this.connectionSpeed = 0;\n        this.playbackQuality = -1;\n\n        this.liveStartTime = 0;\n        this.liveStartPlaybackTime = 0;\n    }\n\n    private onStateChanged (e) {\n        this.playbackState = e.type;\n\n        if (e.type === 'loadedmetadata' || e.type === 'playing') {\n            this.startMetricsPolling();\n        }\n\n        if (e.type === 'playing' && this.player.isLive()) {\n            this.liveStartTime = new Date().getTime();\n            this.liveStartPlaybackTime = this.videoElement.currentTime;\n        }\n    }\n\n    private onPause (e) {\n        this.playbackState = 'paused';\n        this.render();\n        this.stopMetricsPolling();\n    }\n\n    private onQualityRendered (e) {\n        if (e.mediaType !== MediaType.Video) {\n            return;\n        }\n        this.playbackQuality = e.newQuality;\n    }\n\n    private startMetricsPolling () {\n        if (this.pollInterval !== null) {\n            return;\n        }\n        this.updateMetrics();\n        this.pollInterval = setInterval(() => {\n            this.updateMetrics();\n        }, POLL_INTERVAL);\n    }\n\n    private stopMetricsPolling () {\n        if (this.pollInterval === null) {\n            return;\n        }\n        clearInterval(this.pollInterval);\n        this.pollInterval = null;\n    }\n\n    private updateMetrics () {\n        let time = new Date().getTime();\n\n        this.streamType = this.player.isLive() ? 'live' : 'static';\n        this.playbackTime = this.videoElement.currentTime;\n        this.duration = this.videoElement.duration;\n\n        if (this.liveStartTime > 0) {\n            this.jitter = ((time - this.liveStartTime) / 1000) - (this.playbackTime - this.liveStartPlaybackTime);\n        }\n\n        if (this.player.getPlayerType() === PlayerType.DASHJS) {\n            this.updateDashMetrics();\n        }\n\n        this.render();\n    }\n\n    private updateDashMetrics () {\n        // Get dash.js metrics for audio and video\n        let mediaPlayer: DashJSPlayer = this.player as DashJSPlayer;\n\n        // Get video metrics\n        let videoMetrics = mediaPlayer.getMetricsFor(MediaType.Video);\n\n        // Update buffer target (for video and audio based on video buffer target)\n        if (videoMetrics && videoMetrics.BufferState.length > 0) {\n            this.bufferTarget = Math.max(this.bufferTarget, videoMetrics.BufferState[videoMetrics.BufferState.length - 1].target);\n        }\n        // Update video buffer level\n        this.videoBuffer = this.updateBufferLevel(videoMetrics, this.videoBufferSizes, this.videoBufferChart);\n        // Update connection speed based on video segments download speed\n        this.updateConnectionSpeed(videoMetrics);\n\n        // Update audio buffer level\n        let audioMetrics = mediaPlayer.getMetricsFor(MediaType.Audio);\n        this.audioBuffer = this.updateBufferLevel(audioMetrics, this.audioBufferSizes, this.audioBufferChart);\n\n        this.updateVideoBitrate();\n    }\n\n    private updateBufferLevel (metrics, bufferSizes: number[], chart: Chartist.IChartistLineChart) {\n        let level = 0;\n        if (metrics && metrics.BufferLevel.length > 0) {\n            level = metrics.BufferLevel[metrics.BufferLevel.length - 1].level / 1000;\n            this.appendChartValue(bufferSizes, level);\n        }\n        if (this.debugDiv !== null) {\n            chart.options.high = this.bufferTarget;\n        }\n        return level;\n    }\n\n    private updateVideoBitrate () {\n        let videoTrack = this.player.getSelectedTrackForType(MediaType.Video);\n        if (videoTrack === null) {\n            return;\n        }\n\n        if (this.debugDiv !== null) {\n            // Update number of qualities/bitrates\n            this.videoBitrateChart.options.high = videoTrack.qualities.length - 1;\n        }\n\n        // Update current quality index\n        let qualityIndex = this.player.getQualityForType(MediaType.Video);\n        this.appendChartValue(this.videoQualities, qualityIndex);\n\n        // Get corresponding bitrate\n        let quality: Quality = videoTrack.qualities[qualityIndex];\n        this.videoBitrate = quality.bitrate;\n    }\n\n    private updateConnectionSpeed (metrics) {\n\n        if (!metrics || metrics.HttpList.length === 0) {\n            return;\n        }\n\n        let request = metrics.HttpList[metrics.HttpList.length - 1];\n        if (request.responsecode !== 200) {\n            return;\n        }\n        let responseTime = new Date(request.tresponse);\n        let finishTime = new Date(request._tfinish);\n        let downloadTimeInSeconds = (finishTime.getTime() - responseTime.getTime()) / 1000;\n        let downloadBytes = request.trace.reduce((a, b) => a + b.b[0], 0);\n        this.connectionSpeed = Math.round((8 * downloadBytes) / downloadTimeInSeconds);\n\n        this.appendChartValue(this.connectionSpeeds, this.connectionSpeed);\n        if (this.debugDiv !== null) {\n            this.connectionSpeedChart.options.high = Math.max(this.connectionSpeedChart.options.high, this.connectionSpeed);\n        }\n    }\n\n    private appendChartValue (values: number[], value) {\n        if (values.length >= METRICS_COUNT) {\n            values.shift();\n        }\n        values.push(value);\n    }\n\n    private render () {\n        if (!this.debugDiv) {\n            return;\n        }\n\n        this.debugDiv.querySelector('#oneplayer-debug-version').innerHTML = this.version;\n\n        if (this.streamType !== '') {\n            this.debugDiv.querySelector('#oneplayer-debug-duration-jitter-label').innerHTML = this.streamType === 'live' ? 'Jitter:' : 'Duration:';\n        }\n\n        this.debugDiv.querySelector('#oneplayer-debug-protocol').innerHTML = this.protocol;\n        this.debugDiv.querySelector('#oneplayer-debug-stream-type').innerHTML = this.streamType;\n        this.debugDiv.querySelector('#oneplayer-debug-playback-state').innerHTML = this.playbackState;\n        this.debugDiv.querySelector('#oneplayer-debug-playback-time').innerHTML = this.playbackTime.toFixed(3) + 's';\n        this.debugDiv.querySelector('#oneplayer-debug-duration-jitter').innerHTML = this.streamType === 'live' ? (this.jitter.toFixed(3) + 's') : this.formatDuration(this.duration);\n        this.debugDiv.querySelector('#oneplayer-debug-playback-quality').innerHTML = this.getPlaybackQualityInfos();\n        this.debugDiv.querySelector('#oneplayer-debug-video-buffer').innerHTML = this.videoBuffer.toFixed(1) + 's';\n        this.debugDiv.querySelector('#oneplayer-debug-audio-buffer').innerHTML = this.audioBuffer.toFixed(1) + 's';\n        this.debugDiv.querySelector('#oneplayer-debug-video-bitrate').innerHTML = this.formatBitrate(this.videoBitrate);\n        this.debugDiv.querySelector('#oneplayer-debug-connection-speed').innerHTML = this.formatBitrate(this.connectionSpeed);\n\n        this.videoBufferChart.update({\n            series: [this.videoBufferSizes]\n        }, this.videoBufferChart.options);\n\n        this.audioBufferChart.update({\n            series: [this.audioBufferSizes]\n        }, this.audioBufferChart.options);\n\n        this.videoBitrateChart.update({\n            series: [this.videoQualities]\n        }, this.videoBitrateChart.options);\n\n        this.connectionSpeedChart.update({\n            series: [this.connectionSpeeds]\n        }, this.connectionSpeedChart.options);\n\n        // Set debug panel visible\n        this.debugDiv.style.visibility = 'visible';\n    }\n\n    private formatDuration (duration: number) {\n        let s = duration.toFixed(3) + 's';\n        if (duration < 60) {\n            return s;\n        }\n        s += ' (';\n        if (duration > 3600) {\n            s += Math.floor(duration / 3600) + 'h';\n        }\n        if (duration > 60) {\n            s += Math.floor(duration % 3600 / 60) + 'm';\n        }\n        s += (duration % 60).toFixed(3) + 's)';\n        return s;\n    }\n\n    private formatBitrate (bitrate: number) {\n        let bitrateInKbps = Math.round(bitrate / 1000);\n        if (bitrateInKbps > 1000) {\n            return (bitrateInKbps / 1000).toFixed(1) + 'Mb/s';\n        }\n        return bitrateInKbps + 'Kb/s';\n    }\n\n    private getPlaybackQualityInfos () {\n        if (this.playbackQuality === -1) {\n            return '';\n        }\n\n        let videoTrack = this.player.getSelectedTrackForType(MediaType.Video);\n        if (videoTrack === null) {\n            return '';\n        }\n\n        let quality: Quality = videoTrack.qualities[this.playbackQuality];\n        let qualityInfos = this.formatBitrate(quality.bitrate);\n        if (quality.width && quality.height) {\n            qualityInfos += ' - ' + quality.width + 'x' + quality.height;\n        }\n        qualityInfos += ' (' + (this.playbackQuality + 1) + '/' + videoTrack.qualities.length + ')';\n        return qualityInfos;\n    }\n\n    private loadChartist () {\n        let node = document.createElement('script');\n        node.src = 'https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.0/chartist.js';\n        node.type = 'text/javascript';\n        node.onload = this.ShowDebug.bind(this);\n        document.getElementsByTagName('head')[0].appendChild(node);\n    }\n\n    private ShowDebug () {\n        // Add debug panel styles\n        this.addStyles('oneplayer-debug-styles', css);\n\n        // Create <div> for debug panel\n        this.debugDiv = document.createElement('div');\n        this.debugDiv.style.visibility = 'hidden';\n        this.debugDiv.id = 'oneplayer-debug';\n        this.debugDiv.innerHTML = html;\n\n        // Append it to provided container or to <video> parent element\n        this.containerDiv.appendChild(this.debugDiv);\n\n        // Create buffer size charts\n        let optionsBufferChart: Chartist.ILineChartOptions = {\n            high: this.bufferTarget,\n            low: 0,\n            fullWidth: true,\n            showPoint: false,\n            showLine: false,\n            showArea: true,\n            chartPadding: {\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0\n            },\n            axisX: {\n                showGrid: false,\n                showLabel: false,\n                offset: 0\n            },\n            axisY: {\n                showGrid: false,\n                showLabel: false,\n                offset: 0\n            },\n            lineSmooth: window.Chartist.Interpolation.none()\n        };\n\n        this.videoBufferChart = new window.Chartist.Line('#oneplayer-debug-video-buffer-chart', {\n            series: [this.videoBufferSizes]\n        }, optionsBufferChart);\n\n        this.audioBufferChart = new window.Chartist.Line('#oneplayer-debug-audio-buffer-chart', {\n            series: [this.videoBufferSizes]\n        }, optionsBufferChart);\n\n        // Create video bitrate chart\n        this.videoBitrateChart = new window.Chartist.Line('#oneplayer-debug-video-bitrate-chart', {\n            series: [this.videoQualities]\n        }, {\n            low: 0,\n            fullWidth: true,\n            showPoint: false,\n            showLine: true,\n            showArea: false,\n            chartPadding: {\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0\n            },\n            axisX: {\n                showGrid: false,\n                showLabel: false,\n                offset: 0\n            },\n            axisY: {\n                showGrid: false,\n                showLabel: false,\n                offset: 0\n            },\n            lineSmooth: window.Chartist.Interpolation.step()\n        });\n\n        // Create connection speed chart\n        this.connectionSpeedChart = new window.Chartist.Line('#oneplayer-debug-connection-speed-chart', {\n            series: [this.connectionSpeeds]\n        }, {\n            low: 0,\n            fullWidth: true,\n            showPoint: false,\n            showLine: true,\n            showArea: false,\n            chartPadding: {\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0\n            },\n            axisX: {\n                showGrid: false,\n                showLabel: false,\n                offset: 0\n            },\n            axisY: {\n                showGrid: false,\n                showLabel: false,\n                offset: 0\n            },\n            lineSmooth: window.Chartist.Interpolation.simple()\n        });\n    }\n\n    private createDebugPanel () {\n        if (!window.Chartist.Interpolation) {\n            this.loadChartist();\n        } else {\n            this.ShowDebug();\n        }\n    }\n\n    private addStyles (id: string, css: any) {\n        let head = this.getHeadSection();\n\n        // Check if not already existing\n        let style = head.querySelector('#' + id);\n        if (style) {\n            return;\n        }\n\n        style = document.createElement('style');\n        style.id = id;\n        style.innerHTML = css;\n        head.appendChild(style);\n    }\n\n    private getHeadSection () {\n        // Get <head> section\n        let elements = document.getElementsByTagName('head');\n        if (elements.length > 0) {\n            return elements[0];\n        }\n\n        // Create <head> if not existing\n        let head = document.createElement('head');\n        document.body.appendChild(head);\n        return head;\n    }\n\n    // #endregion PRIVATE METHODS\n    // --------------------------------------------------\n\n}\n","import { OnePlayer } from '../OnePlayer';\nimport { IPlayer } from '../IPlayer';\nimport { StreamInfo } from '../Types';\nimport { DebugPanel } from './DebugPanel';\n\nexport class DebugController {\n\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    private player: IPlayer;\n\n    private debugPanel: DebugPanel;\n\n    private debug: boolean;\n    private verbose: boolean;\n\n    private onKeyPressedListener;\n\n    // #endregion MEMBERS\n\n    // #region CONSTRUCTOR\n    // --------------------------------------------------\n\n    /**\n     * Constructor.\n     */\n    constructor (player: IPlayer, video: HTMLElement) {\n        this.player = player;\n        this.debug = false;\n        this.verbose = false;\n        this.onKeyPressedListener = this.onKeyPressed.bind(this);\n        window.addEventListener('keydown', this.onKeyPressedListener);\n        this.debugPanel = new DebugPanel(player, video);\n    }\n\n    public reset () {\n        this.debugPanel.reset();\n    }\n\n    public start (stream: StreamInfo) {\n        this.debugPanel.start(stream);\n    }\n\n    public stop () {\n        this.debugPanel.stop();\n    }\n\n    public showDebugPanel (show: boolean, debugRenderingDiv?: HTMLDivElement) {\n        this.debugPanel.show(show, debugRenderingDiv);\n    }\n\n    // #endregion CONSTRUCTOR\n    // --------------------------------------------------\n\n    // #region PRIVATE METHODS\n    // --------------------------------------------------\n\n    private onKeyPressed (e: KeyboardEvent) {\n\n        // Handle ctrl+alt+maj+d to show/hide debug panel\n        if ((e.altKey === true) && (e.ctrlKey === true) && (e.shiftKey === true) && (e.keyCode === 68)) {\n            this.debug = !this.debug;\n            this.debugPanel.show(this.debug);\n        }\n\n        // Handle ctrl+alt+maj+v to enable/disable logs\n        if ((e.altKey === true) && (e.ctrlKey === true) && (e.shiftKey === true) && (e.keyCode === 86)) {\n            this.verbose = !this.verbose;\n            console.log('oneplayer.js debug ' + (this.verbose ? 'ON' : 'OFF'));\n            let playerVersion = this.player.getVersion();\n            console.log('oneplayer.js v' + OnePlayer.getVersion() + (playerVersion.length > 0) ? (' / ' + playerVersion) : '');\n            this.player.enableLogs(this.verbose);\n        }\n    }\n\n    // #endregion PRIVATE METHODS\n    // --------------------------------------------------\n}\n","\nexport class PlaybackSpeedController {\n\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // <video> / HTMLMediaElement\n    private videoElement: HTMLMediaElement;\n\n    // Playback speed\n    private speed: number = 0;\n\n    // Trick mode speed\n    private trickModeSpeed: number = 0;\n\n    // Original volume level\n    private volume: number;\n\n    // The time at which seek has been done\n    private seekTime: number;\n\n    // The timeout for seeking\n    private seekTimeout;\n\n    private onSeekedListener;\n\n    private playPromise: Promise<any>;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region PUBLIC METHODS\n    // --------------------------------------------------\n\n    public init (videoElement: HTMLMediaElement) {\n        this.videoElement = videoElement;\n        this.volume = null;\n        this.playPromise = null;\n        this.onSeekedListener = this.onSeeked.bind(this);\n    }\n\n    public reset () {\n        this.stopTrickMode();\n\n        // Restore volume level\n        if (this.volume) {\n            this.videoElement.volume = this.volume;\n            this.volume = null;\n        }\n    }\n\n    public setSpeed (speed: number) {\n        // console.log('[TRICK_PLAY] setSpeed: ' + speed);\n\n        // Ignore value 0, method pause() has to be used instead\n        // Ignore negative values between -1 and 0 (not supported)\n        if (speed <= 0 && speed > -1) {\n            throw new Error('The provided playback speed (' + speed + ') is not in the supported range');\n        }\n\n        // Check if duration is available (stream initialized)\n        if (isNaN(this.videoElement.duration)) {\n            throw new Error('Playback speed can not be changed until video is not initialized');\n        }\n\n        this.speed = speed;\n\n        // Apply new speed now if not already in trick mode and if playback is not being (re)started\n        // => if already in trick mode, then apply new speed once current seek is done (see onSeeked)\n        // => if playback is being (re)started, then apply new speed once play is done (see onPlay)\n        if (this.trickModeSpeed === 0 && this.speed !== 1 && this.playPromise === null) {\n            this.applySpeed();\n        }\n    }\n\n    public getSpeed (): number {\n        return this.trickModeSpeed === 0 ? this.videoElement.playbackRate : this.trickModeSpeed;\n    }\n\n    // #endregion PUBLIC METHODS\n\n    // #region PRIVATE METHODS\n    // --------------------------------------------------\n\n    private applySpeed () {\n        // From normal playback to slow motion or fast forward/rewind, then set mute on\n        if (this.videoElement.playbackRate === 1 && this.trickModeSpeed === 0 && this.speed !== 1) {\n            this.volume = this.videoElement.volume;\n            // console.log('[TRICK_PLAY] mute on (' + this.volume + ')');\n            this.videoElement.volume = 0;\n        }\n\n        // If normal playback or slow motion then stop trick mode\n        if (Math.abs(this.speed) <= 1 && this.trickModeSpeed !== 0) {\n            // console.log('[TRICK_PLAY] stop trick mode');\n            this.stopTrickMode();\n        }\n\n        // For negative values and values > 1 then start/run trick mode at given speed\n        if (this.speed <= -1 || this.speed > 1) {\n            if (this.trickModeSpeed === 0) {\n                // Switch to lowest quality\n                // this.limitToLowestBitrate(true);\n\n                // Start trick mode\n                // console.log('[TRICK_PLAY] start trick mode');\n                this.startTrickMode(this.speed);\n            } else if (this.trickModeSpeed !== this.speed) {\n                // Or modify trick mode speed\n                // console.log('[TRICK_PLAY] update speed: ' + this.speed);\n                this.trickModeSpeed = this.speed;\n            }\n        }\n\n        // For speed between 0 and 1 (slow motion or normal playback) then simply modify the playbackRate of the HTML video element\n        if (this.speed > 0 && this.speed <= 1) {\n            this.videoElement.playbackRate = this.speed;\n            // For normal playback, play if in paused mode\n            if (this.videoElement.paused) {\n                // console.log('[TRICK_PLAY] play');\n                this.playPromise = this.videoElement.play().then(this.onPlay.bind(this));\n            }\n        }\n    }\n\n    private startTrickMode (speed: number) {\n        // console.log('[TRICK_PLAY] start trick mode');\n\n        this.trickModeSpeed = speed;\n\n        // Pause video and set playbackRate to 1\n        this.videoElement.pause();\n        this.videoElement.playbackRate = 1;\n\n        // Add 'seeked' listener\n        this.videoElement.addEventListener('seeked', this.onSeekedListener);\n\n        // Start seeking\n        this.seek();\n    }\n\n    private stopTrickMode () {\n        // console.log('[TRICK_PLAY] stop trick mode');\n\n        // Remove 'seeked' listener\n        this.videoElement.removeEventListener('seeked', this.onSeekedListener);\n\n        // Cancel seek timeout\n        clearTimeout(this.seekTimeout);\n\n        this.trickModeSpeed = 0;\n    }\n\n    private seek () {\n        this.seekTime = new Date().getTime();\n        let seekPos = this.videoElement.currentTime + this.trickModeSpeed;\n        // console.log('[TRICK_PLAY] seek: ' + seekPos);\n        this.videoElement.currentTime = Math.min(Math.max(seekPos, 0), this.videoElement.duration);\n    }\n\n    private onSeeked () {\n        // console.log('[TRICK_PLAY] seeked');\n\n        // On Safari we need to pause again since seeking restarts playback automatically\n        this.videoElement.pause();\n\n        let time = new Date().getTime();\n        let elapsedTime = time - this.seekTime;\n        // console.log('[' + time + '] seeked - elapsed time = ' + elapsedTime + ', wait for ' + Math.max((1000 - elapsedTime), 0) + ' ms');\n\n        this.applySpeed();\n\n        // Still in trick mode => seek again\n        if (this.trickModeSpeed !== 0 &&\n            this.videoElement.currentTime > 0 &&\n            this.videoElement.currentTime < this.videoElement.duration) {\n            this.seekTimeout = setTimeout(() => {\n                this.seek();\n            }, Math.max((1000 - elapsedTime), 0));\n        }\n    }\n\n    private onPlay () {\n        // console.log('[TRICK_PLAY] playing');\n\n        this.playPromise = null;\n\n        this.applySpeed();\n\n        // If normal playback, restore volume level\n        if (this.videoElement.playbackRate === 1 && this.volume) {\n            // console.log('[TRICK_PLAY] mute off => ' + this.volume);\n            this.videoElement.volume = this.volume;\n            this.volume = null;\n        }\n    }\n\n    // #endregion PRIVATE METHODS\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","import { IPlugin } from './IPlugin';\nimport { PluginType, StreamInfo, PlayerEvents } from '../Types';\nimport { IPlayer } from '../IPlayer';\nimport { DefaultPlayer } from '../DefaultPlayer';\nimport { AdsPlayer, EventTypes, ErrorCodes } from 'adsplayer.js';\n\n/**\n * adsplayer.js plugin\n */\nexport class AdsPlugin implements IPlugin {\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // <video> / HTMLMediaElement\n    protected videoElement: HTMLMediaElement;\n\n    // IPlayer instance\n    protected player: DefaultPlayer;\n\n    // AdsPlayer instance\n    private adsPlayer: AdsPlayer;\n\n    // The HTML5 div to render ads\n    private adsRenderingDiv;\n\n    // Parameter to indicate adsplayer.js to handle or not main video playback\n    private handleMainPlayerPlayback;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region SETUP\n    // --------------------------------------------------\n\n    public getType (): string {\n        return PluginType.METRICS;\n    }\n\n    public getVersion (): string {\n        this.checkInitialized();\n        return 'adsplayer.js_' + this.adsPlayer.getVersion();\n    }\n\n    public init (player: IPlayer, videoElement: HTMLMediaElement, config: object) {\n\n        if (!config['adsRenderingDiv']) {\n            throw new Error('Failed to initialize Ad-insertion plugin: div for rendering ads must be provided');\n        }\n\n        this.handleMainPlayerPlayback = true;\n        if (config['handleMainPlayerPlayback']) {\n            this.handleMainPlayerPlayback = config['handleMainPlayerPlayback'];\n        }\n\n        this.videoElement = videoElement;\n        this.player = player as DefaultPlayer;\n        this.adsRenderingDiv = config['adsRenderingDiv'];\n        this.adsPlayer = new AdsPlayer();\n        this.adsPlayer.init(this.videoElement, this.adsRenderingDiv, this.handleMainPlayerPlayback);\n        this.adsPlayer.addEventListener(EventTypes.ERROR, this.onError.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.START, this.onStart.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.END, this.onEnd.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.ADD_ELEMENT, this.onAddElement.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.REMOVE_ELEMENT, this.onRemoveElement.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.PLAY, this.onPlay.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.PAUSE, this.onPause.bind(this));\n        this.adsPlayer.addEventListener(EventTypes.CLICK, this.onClick.bind(this));\n    }\n\n    public enableLogs (enable: boolean) {\n        this.adsPlayer.enableLogs(enable);\n    }\n\n    public reset () {\n        this.checkInitialized();\n        this.adsPlayer.destroy();\n    }\n\n    // #endregion SETUP\n    // --------------------------------------------------\n\n    // #region PLUGIN CONTROL\n    // --------------------------------------------------\n\n    public load (stream: StreamInfo): Promise<any> {\n        this.checkInitialized();\n        return new Promise<any>((resolve, reject) => {\n            this.adsPlayer.load(stream)\n            .then((res) => {\n                resolve(res ? 'preroll' : '');\n            })\n            .catch((e) => {\n                resolve();\n            });\n        });\n    }\n\n    public stop () {\n        this.checkInitialized();\n        this.adsPlayer.reset();\n        this.videoElement.style.display = 'block';\n        this.adsRenderingDiv.style.display = 'none';\n    }\n\n    // #endregion PLUGIN CONTROL\n    // --------------------------------------------------\n\n    // #region PRIVATE FUNCTIONS\n    // --------------------------------------------------\n\n    private checkInitialized () {\n        if (!this.adsPlayer) {\n            throw new Error('Ad-Insertion plugin not initialized');\n        }\n    }\n\n    private onError (e) {\n        let error = {\n            code: e.data.code,\n            message:  e.data.message,\n            extMessage: '',\n            data: e.data.data\n        };\n        this.sendEvent(PlayerEvents.AD_ERROR, error);\n    }\n\n    private onStart (e) {\n        this.sendEvent(PlayerEvents.AD_START, e.data);\n        this.videoElement.style.display = 'none';\n        this.adsRenderingDiv.style.display = 'block';\n    }\n\n    private onEnd (e) {\n        this.videoElement.style.display = 'block';\n        this.adsRenderingDiv.style.display = 'none';\n        this.sendEvent(PlayerEvents.AD_END);\n    }\n\n    private onAddElement (e) {\n        console.log('adsplayer - ' + e.type + ' / ' + e.data.type);\n    }\n\n    private onRemoveElement (e) {\n        console.log('adsplayer - ' + e.type + ' / ' + e.data.type);\n    }\n\n    private onPlay (e) {\n        console.log('adsplayer - ' + e.type);\n    }\n\n    private onPause (e) {\n        console.log('adsplayer - ' + e.type);\n    }\n\n    private onClick (e) {\n        console.log('adsplayer - ' + e.type);\n        // if (e.data.uri) {\n        //     window.open(e.data.uri);\n        // }\n    }\n\n    private sendEvent (eventType: PlayerEvents, data?: object) {\n        let event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventType, false, false, data);\n        this.videoElement.dispatchEvent(event);\n    }\n\n    // #endregion PRIVATE FUNCTIONS\n\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","import { IPlugin } from './IPlugin';\nimport { PluginType, StreamInfo } from '../Types';\nimport { IPlayer } from '../IPlayer';\nimport * as MetricsAgent from 'metricsagent.js';\n\nconst DEFAULT_SETTINGS = {\n    name: 'Prisme (local)',\n    activationUrl: '',\n    serverUrl: 'http://localhost:3004/metrics',\n    enable: true,\n    dbServerUrl: '',\n    collector: 'OnePlayerCollector',\n    formatter: 'Prisme',\n    sendingTime: 10000\n};\n\n/**\n * metricsagent.js plugin\n */\n\nexport class MetricsPlugin implements IPlugin {\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // MetricsAgent instance\n    private metricsAgent;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region SETUP\n    // --------------------------------------------------\n\n    public getType (): string {\n        return PluginType.METRICS;\n    }\n\n    public getVersion (): string {\n        this.checkInitialized();\n        return 'metricsagent.js_' + this.metricsAgent.getVersion();\n    }\n\n    public init (player: IPlayer, videoElement: HTMLMediaElement, config: object) {\n\n        // Get default settings and update with provided settings\n        let settings = DEFAULT_SETTINGS;\n        for (let key in config) settings[key] = config[key];\n\n        this.metricsAgent = new MetricsAgent(settings);\n        this.metricsAgent.init(player, videoElement);\n    }\n\n    public enableLogs (enable: boolean) {\n        //\n    }\n\n    public reset () {\n        this.checkInitialized();\n        this.metricsAgent.destroy();\n    }\n\n    // #endregion SETUP\n    // --------------------------------------------------\n\n    // #region PLUGIN CONTROL\n    // --------------------------------------------------\n\n    /**\n     * Load/open a video stream.\n     * @param {object} stream - video stream properties object such url, startTime, prodData ...\n     */\n    public load (stream: StreamInfo): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            this.metricsAgent.load(stream);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops/reset the playback of the video stream.\n     */\n    public stop () {\n        this.metricsAgent.reset();\n    }\n\n    // #endregion PLUGIN CONTROL\n    // --------------------------------------------------\n\n    // #region PRIVATE FUNCTIONS\n    // --------------------------------------------------\n\n    private checkInitialized () {\n        if (!this.metricsAgent) {\n            throw new Error('Metrics plugin not initialized');\n        }\n    }\n\n    // #endregion PRIVATE FUNCTIONS\n\n}\n","import { IPlayer } from '../IPlayer';\nimport { DefaultPlayer } from '../DefaultPlayer';\nimport { PlayerType, StreamInfo, MediaType, TrackInfo, AudioKind, TextKind } from '../Types';\nimport { PlayerErrorCode } from '../Errors';\nimport { TTMLController } from './TTMLController';\nimport dashjs, { MediaPlayerClass } from 'dashjs';\n\nconst DASHJS_PLAYER_NOT_INITIALIZED_ERROR = 'DashJS player not initialized!';\n\nconst DEFAULT_SETTINGS = {\n    'MSS': {\n        'LIVE': {\n            liveDelay: 16,\n            stableBufferTime: 16,\n            bufferTimeAtTopQuality: 16,\n            bufferTimeAtTopQualityLongForm: 16,\n            lowLatencyEnabled: false,\n            keepProtectionMediaKeys: true\n        }\n    }\n};\n\nconst MEDIAINFO_TYPE_TO_MEDIATYPE = {\n    'video': MediaType.Video,\n    'audio': MediaType.Audio,\n    'text': MediaType.Text,\n    'fragmentedText': MediaType.Text,\n    'embeddedText': MediaType.Text\n};\n\n/**\n * Dash.js player\n */\nexport class DashJSPlayer extends DefaultPlayer implements IPlayer {\n    // #region MEMBERS\n    // --------------------------------------------------\n\n    // Dash.js player\n    private mediaPlayer: MediaPlayerClass;\n\n    // Default settings\n    private defaultSettings: object = {};\n\n    // Audio settings\n    private audioSettings: object = {};\n\n    // Download error\n    private downloadError;\n\n    // TTML Controller in charge of preproccessing TTML datas before parsing\n    private ttmlController: TTMLController;\n\n    // #endregion MEMBERS\n    // --------------------------------------------------\n\n    // #region CONSTRUCTOR\n    // --------------------------------------------------\n\n    /**\n     * Constructor.\n     */\n    constructor () {\n        super();\n        this.mediaPlayer = dashjs.MediaPlayer().create();\n        this.mediaPlayer.on(dashjs.MediaPlayer.events.ERROR, this.onError, this);\n        this.mediaPlayer.on(dashjs.MediaPlayer.events.PLAYBACK_PLAYING, this.onPlaybackPlaying, this);\n        this.mediaPlayer.on(dashjs.MediaPlayer.events.PLAYBACK_SEEKING, this.onPlaybackSeeking, this);\n        this.mediaPlayer.on(dashjs.MediaPlayer.events.PLAYBACK_WAITING, this.onPlaybackWaiting, this);\n\n        this.ttmlController = new TTMLController();\n        this.ttmlController.init(this.mediaPlayer);\n\n        this.getDefaultSettings();\n    }\n    // #endregion CONSTRUCTOR\n\n    // #region PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region SETUP\n    // --------------------------------------------------\n\n    public getVersion (): string {\n        this.checkInitialized();\n        return 'dash.js_' + this.mediaPlayer.getVersion();\n    }\n\n    public getPlayerType (): PlayerType {\n        return PlayerType.DASHJS;\n    }\n\n    public init (videoElement: HTMLElement, ttmlRenderingDiv?: HTMLDivElement): Promise<any> {\n        this.checkInitialized();\n        super.init(videoElement, ttmlRenderingDiv);\n\n        // Attach video element\n        this.mediaPlayer.initialize(this.videoElement, undefined, true);\n\n        // Initialize text (subtitles/captions) rendering\n        if (ttmlRenderingDiv) {\n            this.mediaPlayer.attachTTMLRenderingDiv(ttmlRenderingDiv);\n        } else {\n            ttmlRenderingDiv = document.createElement('div');\n            if (this.videoElement.parentNode) {\n                this.videoElement.parentNode.appendChild(ttmlRenderingDiv);\n                this.mediaPlayer.attachTTMLRenderingDiv(ttmlRenderingDiv);\n            }\n        }\n\n        // Disable media settings caching in local storage\n        this.mediaPlayer.enableLastMediaSettingsCaching(false);\n\n        // Enable last bitrate caching in local storage\n        this.mediaPlayer.enableLastBitrateCaching(true);\n\n        this.mediaPlayer.setLowLatencyEnabled(false);\n\n        return Promise.resolve();\n    }\n\n    public setConfig (params: object) {\n        this.checkInitialized();\n        // Store given settings in default settings\n        for (let key in params) {\n            this.defaultSettings[key] = params[key];\n        }\n        this.applySettings(params);\n    }\n\n    public enableLogs (enable: boolean) {\n        super.enableLogs(enable);\n        this.checkInitialized();\n        this.mediaPlayer.getDebug().setLogToBrowserConsole(enable);\n    }\n\n    public addEventListener (type: string, listener: any, scope?: object) {\n        this.checkInitialized();\n        this.mediaPlayer.on(type, listener, scope);\n    }\n\n    public removeEventListener (type: string, listener: any, scope?: object) {\n        this.checkInitialized();\n        this.mediaPlayer.off(type, listener, scope);\n    }\n\n    public reset () {\n        super.reset();\n        this.checkInitialized();\n        this.mediaPlayer.reset();\n    }\n\n    public getMetricsFor (type: MediaType) {\n        this.checkInitialized();\n        return this.mediaPlayer.getMetricsFor(this.getType(type));\n    }\n\n    // #endregion SETUP\n    // --------------------------------------------------\n\n    // #region PLAYBACK CONTROL\n    // --------------------------------------------------\n\n    public play (): Promise<void> {\n        this.checkInitialized();\n        this.mediaPlayer.play();\n        return Promise.resolve();\n    }\n\n    public pause () {\n        this.checkInitialized();\n        this.mediaPlayer.pause();\n    }\n\n    public seek (time: number) {\n        this.checkInitialized();\n        this.mediaPlayer.seek(time);\n    }\n\n    public stop (reset = true, stopPlugins?: boolean) {\n        super.stop(reset, stopPlugins);\n        this.checkInitialized();\n        if (reset || this.mediaPlayer.isDynamic()) {\n            this.mediaPlayer.attachSource(null);\n        } else {\n            this.pause();\n            this.seek(0);\n        }\n    }\n\n    // #endregion PLAYBACK CONTROL\n    // --------------------------------------------------\n\n    // #region DURATION / TIME\n    // --------------------------------------------------\n\n    public getDuration (): number {\n        this.checkInitialized();\n        if (!this.mediaPlayer.isReady()) {\n            return 0;\n        }\n        return this.mediaPlayer.duration();\n    }\n\n    public isLive () {\n        this.checkInitialized();\n        return this.mediaPlayer.isDynamic();\n    }\n\n    public getTime (): number {\n        this.checkInitialized();\n        if (!this.mediaPlayer.isReady()) {\n            return 0;\n        }\n        return this.mediaPlayer.time(undefined);\n    }\n\n    // #endregion DURATION / TIME\n    // --------------------------------------------------\n\n    // #region AUDIO/SUBTITLES TRACKS\n    // --------------------------------------------------\n\n    public getTracksForType (type: MediaType): TrackInfo[] {\n        this.checkInitialized();\n\n        let tracksInfo: TrackInfo[] = [];\n        let mediaType = this.getType(type);\n        let selectedTrack = this.mediaPlayer.getCurrentTrackFor(mediaType);\n        let tracks = this.mediaPlayer.getTracksFor(mediaType);\n        for (let i = 0; i < tracks.length; i++) {\n            tracksInfo.push(this.mediaInfoToTrackInfo(tracks[i], tracksInfo.length, tracks[i] === selectedTrack));\n        }\n\n        return tracksInfo;\n    }\n\n    public getSelectedTrackForType (type: MediaType): TrackInfo {\n        this.checkInitialized();\n\n        let trackInfos = this.getTracksForType(type);\n        for (let i = 0; i < trackInfos.length; i++) {\n            if (trackInfos[i].selected) {\n                return trackInfos[i];\n            }\n        }\n        return null;\n    }\n\n    public getQualityForType (type: MediaType): number {\n        this.checkInitialized();\n        return this.mediaPlayer.getQualityFor(this.getType(type));\n    }\n\n    public getBufferLevelForType (type: MediaType): number {\n        this.checkInitialized();\n        return this.mediaPlayer.getBufferLength(this.getType(type));\n    }\n\n    public selectTrackForType (type: MediaType, id: string) {\n        this.checkInitialized();\n\n        let mediaType = this.getType(type);\n        let tracks = this.mediaPlayer.getTracksFor(mediaType);\n        if (!tracks || tracks.length === 0) {\n            return;\n        }\n        let track = (tracks.filter((mediaInfo, idx) => {\n            return (mediaInfo.id === undefined) ? (idx === parseInt(id, 10)) : (mediaInfo.id === id);\n        }))[0];\n\n        this.storeDefaultLanguage(type, track.lang);\n        this.mediaPlayer.setCurrentTrack(track);\n    }\n\n    public selectTrack (track: TrackInfo) {\n        this.selectTrackForType(track.mediaType, track.id);\n    }\n\n    public setDefaultAudioLanguage (lang: string) {\n        this.checkInitialized();\n        this.audioSettings['lang'] = lang;\n    }\n\n    public setDefaultTextLanguage (lang: string) {\n        this.checkInitialized();\n        this.mediaPlayer.setTextDefaultLanguage(lang);\n    }\n\n    public enableText (enable: boolean) {\n        this.checkInitialized();\n        this.storeTextState(enable);\n        this.mediaPlayer.enableText(enable);\n    }\n\n    public isTextEnabled (): boolean {\n        this.checkInitialized();\n        return this.mediaPlayer.isTextEnabled();\n    }\n\n    public setDefaultTextEnabled (enable: boolean) {\n        this.checkInitialized();\n        this.mediaPlayer.setTextDefaultEnabled(enable);\n    }\n\n    // #endregion AUDIO/SUBTITLES TRACKS\n    // --------------------------------------------------\n\n    // #endregion PUBLIC FUNCTIONS\n    // --------------------------------------------------\n\n    // #region PROTECTED FUNCTIONS\n    // --------------------------------------------------\n\n    protected loadStream (stream: StreamInfo): Promise<void> {\n\n        super.loadStream(stream);\n        this.checkInitialized();\n\n        if (stream.protData) {\n            this.mediaPlayer.setProtectionData(stream.protData);\n        }\n\n        this.downloadError = null;\n\n        this.mediaPlayer.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, this.onStreamInitialized, this);\n\n        // Restore default settings\n        this.applySettings(this.defaultSettings);\n\n        // Apply settings according to protocol and service type\n        if (stream.protocol && stream.type) {\n            if (DEFAULT_SETTINGS[stream.protocol] && DEFAULT_SETTINGS[stream.protocol][stream.type]) {\n                this.applySettings(DEFAULT_SETTINGS[stream.protocol][stream.type]);\n            }\n        }\n\n        this.mediaPlayer.attachSource(stream.url);\n\n        // Set audio initial settings after attachSource(), since attachSource() does reset previous stream media settings\n        this.mediaPlayer.setInitialMediaSettingsFor('audio', this.audioSettings);\n        return Promise.resolve();\n    }\n\n    protected limitToLowestBitrate (state: boolean) {\n        if (state === true) {\n            // Switch to lowest quality\n            let videoInfo = this.getSelectedTrackForType(MediaType.Video);\n            let audioInfo = this.getSelectedTrackForType(MediaType.Audio);\n            this.mediaPlayer.setMaxAllowedBitrateFor('video', Math.floor(videoInfo.qualities[0].bitrate / 1000) + 1);\n            this.mediaPlayer.setMaxAllowedBitrateFor('audio', Math.floor(audioInfo.qualities[0].bitrate / 1000) + 1);\n        } else {\n            // Reset max allowed bit rate\n            this.mediaPlayer.setMaxAllowedBitrateFor('video', NaN);\n            this.mediaPlayer.setMaxAllowedBitrateFor('audio', NaN);\n        }\n    }\n\n    // #endregion PROTECTED FUNCTIONS\n\n    // #region PRIVATE FUNCTIONS\n    // --------------------------------------------------\n\n    private checkInitialized () {\n        if (!this.mediaPlayer) {\n            throw DASHJS_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n    }\n\n    private getDefaultSettings () {\n        this.defaultSettings['liveDelay'] = this.mediaPlayer.getLiveDelay();\n        this.defaultSettings['stableBufferTime'] = this.mediaPlayer.getStableBufferTime();\n        this.defaultSettings['bufferTimeAtTopQuality'] = this.mediaPlayer.getBufferTimeAtTopQuality();\n        this.defaultSettings['bufferTimeAtTopQualityLongForm'] = this.mediaPlayer.getBufferTimeAtTopQualityLongForm();\n        this.defaultSettings['lowLatencyEnabled'] = this.mediaPlayer.getLowLatencyEnabled();\n    }\n\n    private applySettings (settings) {\n        if (settings.liveDelay) {\n            this.mediaPlayer.setLiveDelay(settings.liveDelay);\n        }\n        if (settings.stableBufferTime) {\n            this.mediaPlayer.setStableBufferTime(settings.stableBufferTime);\n        }\n        if (settings.bufferTimeAtTopQuality) {\n            this.mediaPlayer.setBufferTimeAtTopQuality(settings.bufferTimeAtTopQuality);\n        }\n        if (settings.bufferTimeAtTopQualityLongForm) {\n            this.mediaPlayer.setBufferTimeAtTopQualityLongForm(settings.bufferTimeAtTopQualityLongForm);\n        }\n        if (settings.lowLatencyEnabled) {\n            this.mediaPlayer.setLowLatencyEnabled(settings.lowLatencyEnabled);\n        }\n        if (settings.keepProtectionMediaKeys) {\n            this.mediaPlayer.keepProtectionMediaKeys(settings.keepProtectionMediaKeys);\n        }\n        if (settings.minVideoBitrate) {\n            this.mediaPlayer.setMinAllowedBitrateFor('video', settings.minVideoBitrate);\n        }\n    }\n\n    private mediaInfoToTrackInfo (mediaInfo: dashjs.MediaInfo, index: number, selected: boolean) {\n        let trackInfo: TrackInfo = {\n            mediaType: MEDIAINFO_TYPE_TO_MEDIATYPE[mediaInfo.type],\n            id: (mediaInfo.id !== undefined) ? mediaInfo.id : index.toString(),\n            selected: selected,\n            codec: mediaInfo.codec,\n            mimeType: mediaInfo.mimeType,\n            lang: mediaInfo.lang,\n            qualities: mediaInfo.bitrateList.map(function (item) {\n                return {\n                    bitrate: item.bandwidth,\n                    width: item.width,\n                    height: item.height\n                };\n            })\n        };\n\n        // For audio tracks, determine track kind value\n        if (trackInfo.mediaType === MediaType.Audio && mediaInfo.roles) {\n            if (mediaInfo.roles.indexOf('main') !== -1) {\n                trackInfo.kind = AudioKind.Main;\n            }\n            if (mediaInfo.roles.indexOf('dub') !== -1) {\n                trackInfo.kind = AudioKind.Translation;\n            }\n            if (mediaInfo.roles.indexOf('alternate') !== -1) {\n                trackInfo.kind = (mediaInfo.accessibility && mediaInfo.accessibility.indexOf('2') !== -1) ? AudioKind.Clean : AudioKind.Alternative;\n            }\n            if (mediaInfo.roles.indexOf('commentary') !== -1) {\n                trackInfo.kind = AudioKind.Commentary;\n            }\n        }\n\n        // For text tracks, determine track kind value\n        if (trackInfo.mediaType === MediaType.Text && mediaInfo.roles) {\n            if (mediaInfo.roles.indexOf('main') !== -1) {\n                trackInfo.kind = (mediaInfo.accessibility && mediaInfo.accessibility.indexOf('2') !== -1) ? TextKind.Descriptions : TextKind.Captions;\n            } else if (mediaInfo.roles.indexOf('alternate') !== -1) {\n                trackInfo.kind = TextKind.Subtitles;\n            }\n        }\n\n        return trackInfo;\n    }\n\n    private onStreamInitialized (e) {\n        this.mediaPlayer.off(dashjs.MediaPlayer.events.STREAM_INITIALIZED, this.onStreamInitialized, this);\n\n        // If start time is specified then seek at start time\n        if (this.stream.startTime) {\n            this.mediaPlayer.seek(this.stream.startTime);\n        }\n    }\n\n    private getResponseText (response) {\n        return response.responseType === 'text' ? response.responseText : '';\n    }\n\n    private getType (dashType) {\n        return dashType === MediaType.Text ? 'fragmentedText' : dashType;\n    }\n\n    private onPlaybackPlaying (e) {\n        this.downloadError = null;\n    }\n\n    private onPlaybackSeeking (e) {\n        this.downloadError = null;\n    }\n\n    private onPlaybackWaiting (e) {\n        this.processDownloadError();\n    }\n\n    private processDownloadError () {\n        if (this.downloadError === null) {\n            return;\n        }\n\n        let mediaType = MEDIAINFO_TYPE_TO_MEDIATYPE[this.downloadError.data.request.mediaType];\n\n        // Consider only audio and video segments download error\n        if (mediaType !== MediaType.Video && mediaType !== MediaType.Audio) {\n            return;\n        }\n\n        // Check readyState to know if enough data to enable playback\n        if (this.videoElement.readyState > 2 && this.videoElement.playbackRate > 0) {\n            return;\n        }\n\n        // Trigger error\n        this.sendErrorEvent(PlayerErrorCode.DOWNLOAD_ERR_CONTENT, this.downloadError.message, {\n            type: mediaType,\n            url: this.downloadError.data.request.url,\n            status: this.downloadError.data.response.status,\n            response: this.getResponseText(this.downloadError.data.response),\n            segmentTime: this.downloadError.data.request.startTime,\n            segmentDuration: this.downloadError.data.request.duration\n        });\n\n        // Reset download error\n        this.downloadError = null;\n    }\n\n    private onError (e) {\n        // Ignore deprecated errors\n        if (e.event) {\n            return;\n        }\n\n        let error = e.error;\n        switch (error.code) {\n            // HTMLMediaElement\n            case 1:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_ABORTED, error.message);\n                break;\n            case 2:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_NETWORK, error.message);\n                break;\n            case 3:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_DECODE, error.message);\n                break;\n            case 4:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_SRC_NOT_SUPPORTED, error.message);\n                break;\n            case 5:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_ERR_ENCRYPTED, error.message);\n                break;\n\n            // MSE\n            case dashjs.MediaPlayer.errors.CAPABILITY_MEDIASOURCE_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.CAPABILITY_ERR_MEDIASOURCE);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE:\n                this.sendErrorEvent(PlayerErrorCode.CAPABILITY_ERR_MEDIASOURCE, error.message);\n                break;\n\n            // Download errors\n            case dashjs.MediaPlayer.errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE:\n                this.sendErrorEvent(PlayerErrorCode.DOWNLOAD_ERR_MANIFEST, error.message, {\n                    url: error.data.request.url,\n                    status: error.data.response.status,\n                    response: this.getResponseText(error.data.response)\n                });\n                break;\n            case dashjs.MediaPlayer.errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE:\n            case dashjs.MediaPlayer.errors.DOWNLOAD_ERROR_ID_CONTENT_CODE:\n                this.downloadError = error;\n                this.processDownloadError();\n                break;\n\n            // EME\n            case dashjs.MediaPlayer.errors.CAPABILITY_MEDIAKEYS_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.CAPABILITY_ERR_MEDIAKEYS, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEYERR_UNKNOWN_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_KEYERR_UNKNOWN, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEYERR_CLIENT_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_KEYERR_CLIENT, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEYERR_SERVICE_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_KEYERR_SERVICE, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEYERR_OUTPUT_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_KEYERR_OUTPUT, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEYERR_DOMAIN_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIA_KEYERR_DOMAIN, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_KEYSYSTEM_ACCESS, error.messageS);\n                break;\n\n            case dashjs.MediaPlayer.errors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_SERVER_CERTIFICATE, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.KEY_SESSION_CREATED_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_CREATE_SESSION, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_UNKNOWN_LICENSER, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_LICENSE_REQUEST, error.message, {\n                    url: '',\n                    code: 0,\n                    response: error.message\n                });\n                break;\n\n            case dashjs.MediaPlayer.errors.MEDIA_KEYERR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_KEY_ERROR, error.message);\n                break;\n\n            case dashjs.MediaPlayer.errors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE:\n                this.sendErrorEvent(PlayerErrorCode.MEDIAKEYS_ERR_EXPIRED, error.message);\n                break;\n\n            default:\n                this.sendErrorEvent(PlayerErrorCode.PLAYER_INTERNAL_ERROR, error.message, error);\n                break;\n        }\n    }\n\n/*\n    MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE:          10;\n    MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE:          12;\n    XLINK_LOADER_LOADING_FAILURE_ERROR_CODE:             13;\n    SEGMENTS_UPDATE_FAILED_ERROR_CODE:                   14;\n    SEGMENTS_UNAVAILABLE_ERROR_CODE:                     15;\n    SEGMENT_BASE_LOADER_ERROR_CODE:                      16;\n    TIME_SYNC_FAILED_ERROR_CODE:                         17;\n    FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE:          18;\n    FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE:             19;\n    URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE:            20;\n    APPEND_ERROR_CODE:                                   21;\n    REMOVE_ERROR_CODE:                                   22;\n    DATA_UPDATE_FAILED_ERROR_CODE:                       23;\n\n    DOWNLOAD_ERROR_ID_XLINK_CODE:                        30;\n    MANIFEST_ERROR_ID_PARSE_CODE:                        32;\n    MANIFEST_ERROR_ID_NOSTREAMS_CODE:                    33;\n    TIMED_TEXT_ERROR_ID_PARSE_CODE:                      34;\n    MANIFEST_ERROR_ID_MULTIPLEXED_CODE:                  35;\n\n    MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE:          108;\n    MSS_NO_TFRF_CODE:                                   200;\n*/\n\n    // #endregion PRIVATE FUNCTIONS\n\n}\n","export { PlayerType, StreamInfo, ServiceType, HasProtocol, MediaType, TrackInfo, AudioKind, TextKind, PluginType, PlayerEvents } from './src/Types';\nexport { PlayerError, PlayerErrorCode } from './src/Errors';\nexport { IPlayer } from './src/IPlayer';\nexport { OnePlayer } from './src/OnePlayer';\n"],"sourceRoot":""}